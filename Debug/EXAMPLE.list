
EXAMPLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a90  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08008ba0  08008ba0  00018ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c44  08008c44  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08008c44  08008c44  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c44  08008c44  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c44  08008c44  00018c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c48  08008c48  00018c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000183c  20000060  08008cac  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000189c  08008cac  0002189c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016625  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000370b  00000000  00000000  000366f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00039e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e39  00000000  00000000  0003b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000198f4  00000000  00000000  0003be91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c86  00000000  00000000  00055785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f05f  00000000  00000000  0006c40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e60  00000000  00000000  000fb46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001002cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b88 	.word	0x08008b88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08008b88 	.word	0x08008b88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <filesystem_init>:
/***********************************************************************************************************************************
 *** PUBLIC FUNCTIONS
 **********************************************************************************************************************************/

void filesystem_init()
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	w25q80dv_init();
 8000164:	f000 f8f6 	bl	8000354 <w25q80dv_init>
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}

0800016c <filesystem_write>:

void filesystem_write(Measurements data)
{
 800016c:	b590      	push	{r4, r7, lr}
 800016e:	b091      	sub	sp, #68	; 0x44
 8000170:	af02      	add	r7, sp, #8
 8000172:	f107 0410 	add.w	r4, r7, #16
 8000176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int pos = -1;
 800017a:	f04f 33ff 	mov.w	r3, #4294967295
 800017e:	633b      	str	r3, [r7, #48]	; 0x30
	Measurements mapBits;
	for (int i = 0; i < CANT_PAGES; i++)
 8000180:	2300      	movs	r3, #0
 8000182:	637b      	str	r3, [r7, #52]	; 0x34
 8000184:	e033      	b.n	80001ee <filesystem_write+0x82>
	{
		mapBits = w25q80db_read(i * SIZE_PAGE);
 8000186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000188:	021b      	lsls	r3, r3, #8
 800018a:	461a      	mov	r2, r3
 800018c:	463b      	mov	r3, r7
 800018e:	4611      	mov	r1, r2
 8000190:	4618      	mov	r0, r3
 8000192:	f000 f937 	bl	8000404 <w25q80db_read>
 8000196:	f107 0420 	add.w	r4, r7, #32
 800019a:	463b      	mov	r3, r7
 800019c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800019e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		pos = isAvailableForWrite(mapBits);
 80001a2:	f107 0320 	add.w	r3, r7, #32
 80001a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001a8:	f000 f879 	bl	800029e <isAvailableForWrite>
 80001ac:	6338      	str	r0, [r7, #48]	; 0x30
		if (pos > 0)
 80001ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	dd19      	ble.n	80001e8 <filesystem_write+0x7c>
		{
			((uint8_t *)&mapBits)[i] = 0xFF;
 80001b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80001b6:	f107 0220 	add.w	r2, r7, #32
 80001ba:	4413      	add	r3, r2
 80001bc:	22ff      	movs	r2, #255	; 0xff
 80001be:	701a      	strb	r2, [r3, #0]
			w25q80dv_write(mapBits, i * SIZE_PAGE);
 80001c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80001c2:	021b      	lsls	r3, r3, #8
 80001c4:	9300      	str	r3, [sp, #0]
 80001c6:	f107 0320 	add.w	r3, r7, #32
 80001ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001cc:	f000 f8ea 	bl	80003a4 <w25q80dv_write>
			w25q80dv_write(data, pos * sizeof(Measurements) + i * SIZE_PAGE);
 80001d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80001d2:	011b      	lsls	r3, r3, #4
 80001d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80001d6:	0212      	lsls	r2, r2, #8
 80001d8:	4413      	add	r3, r2
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	f107 0310 	add.w	r3, r7, #16
 80001e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001e2:	f000 f8df 	bl	80003a4 <w25q80dv_write>
			break;
 80001e6:	e007      	b.n	80001f8 <filesystem_write+0x8c>
	for (int i = 0; i < CANT_PAGES; i++)
 80001e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80001ea:	3301      	adds	r3, #1
 80001ec:	637b      	str	r3, [r7, #52]	; 0x34
 80001ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80001f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001f4:	dbc7      	blt.n	8000186 <filesystem_write+0x1a>
		}
	}
}
 80001f6:	bf00      	nop
 80001f8:	bf00      	nop
 80001fa:	373c      	adds	r7, #60	; 0x3c
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd90      	pop	{r4, r7, pc}

08000200 <filesystem_read>:

bool filesystem_read(uint64_t id, Measurements* data)
{
 8000200:	b590      	push	{r4, r7, lr}
 8000202:	b093      	sub	sp, #76	; 0x4c
 8000204:	af00      	add	r7, sp, #0
 8000206:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800020a:	617a      	str	r2, [r7, #20]
	Measurements mapBits;
	for (int i = 0; i < CANT_PAGES; i++)
 800020c:	2300      	movs	r3, #0
 800020e:	647b      	str	r3, [r7, #68]	; 0x44
 8000210:	e03c      	b.n	800028c <filesystem_read+0x8c>
	{
		mapBits = w25q80db_read(i * SIZE_PAGE);
 8000212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000214:	021b      	lsls	r3, r3, #8
 8000216:	461a      	mov	r2, r3
 8000218:	463b      	mov	r3, r7
 800021a:	4611      	mov	r1, r2
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f8f1 	bl	8000404 <w25q80db_read>
 8000222:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000226:	463b      	mov	r3, r7
 8000228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800022a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		for (int j = 1; j < sizeof(Measurements); j++)
 800022e:	2301      	movs	r3, #1
 8000230:	643b      	str	r3, [r7, #64]	; 0x40
 8000232:	e025      	b.n	8000280 <filesystem_read+0x80>
		{
			if (((uint8_t *)&mapBits)[j] == 0xFF)
 8000234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000236:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800023a:	4413      	add	r3, r2
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	2bff      	cmp	r3, #255	; 0xff
 8000240:	d11b      	bne.n	800027a <filesystem_read+0x7a>
			{
				Measurements temp = w25q80db_read(j * sizeof(Measurements) + i * SIZE_PAGE);
 8000242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000244:	011b      	lsls	r3, r3, #4
 8000246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000248:	0212      	lsls	r2, r2, #8
 800024a:	441a      	add	r2, r3
 800024c:	f107 0320 	add.w	r3, r7, #32
 8000250:	4611      	mov	r1, r2
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f8d6 	bl	8000404 <w25q80db_read>
				if (temp.id == id)
 8000258:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800025c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000260:	4299      	cmp	r1, r3
 8000262:	bf08      	it	eq
 8000264:	4290      	cmpeq	r0, r2
 8000266:	d108      	bne.n	800027a <filesystem_read+0x7a>
				{
					memcpy(data, &temp, sizeof(Measurements));
 8000268:	f107 0320 	add.w	r3, r7, #32
 800026c:	2210      	movs	r2, #16
 800026e:	4619      	mov	r1, r3
 8000270:	6978      	ldr	r0, [r7, #20]
 8000272:	f008 fc27 	bl	8008ac4 <memcpy>
					return true;
 8000276:	2301      	movs	r3, #1
 8000278:	e00d      	b.n	8000296 <filesystem_read+0x96>
		for (int j = 1; j < sizeof(Measurements); j++)
 800027a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800027c:	3301      	adds	r3, #1
 800027e:	643b      	str	r3, [r7, #64]	; 0x40
 8000280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000282:	2b0f      	cmp	r3, #15
 8000284:	d9d6      	bls.n	8000234 <filesystem_read+0x34>
	for (int i = 0; i < CANT_PAGES; i++)
 8000286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000288:	3301      	adds	r3, #1
 800028a:	647b      	str	r3, [r7, #68]	; 0x44
 800028c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800028e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000292:	dbbe      	blt.n	8000212 <filesystem_read+0x12>
				}
			}
		}
	}
	return false;
 8000294:	2300      	movs	r3, #0
}
 8000296:	4618      	mov	r0, r3
 8000298:	374c      	adds	r7, #76	; 0x4c
 800029a:	46bd      	mov	sp, r7
 800029c:	bd90      	pop	{r4, r7, pc}

0800029e <isAvailableForWrite>:
/***********************************************************************************************************************************
 *** PRIVATE FUNCTION
 **********************************************************************************************************************************/

static int isAvailableForWrite(Measurements page)
{
 800029e:	b490      	push	{r4, r7}
 80002a0:	b086      	sub	sp, #24
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	463c      	mov	r4, r7
 80002a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (int i = 1; i < sizeof(Measurements); i++)
 80002aa:	2301      	movs	r3, #1
 80002ac:	617b      	str	r3, [r7, #20]
 80002ae:	e00a      	b.n	80002c6 <isAvailableForWrite+0x28>
	{
		if ( ((uint8_t *)&page)[i] == 0)
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	463a      	mov	r2, r7
 80002b4:	4413      	add	r3, r2
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d101      	bne.n	80002c0 <isAvailableForWrite+0x22>
		{
			return i;
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	e007      	b.n	80002d0 <isAvailableForWrite+0x32>
	for (int i = 1; i < sizeof(Measurements); i++)
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	3301      	adds	r3, #1
 80002c4:	617b      	str	r3, [r7, #20]
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	2b0f      	cmp	r3, #15
 80002ca:	d9f1      	bls.n	80002b0 <isAvailableForWrite+0x12>
		}
	}
	return -1;
 80002cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3718      	adds	r7, #24
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc90      	pop	{r4, r7}
 80002d8:	4770      	bx	lr
	...

080002dc <lis3mdl_init>:
/***********************************************************************************************************************************
 *** PUBLIC FUNCTIONS
 **********************************************************************************************************************************/

void lis3mdl_init()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af02      	add	r7, sp, #8
	uint8_t pData[5] = {TEMP_ENABLE | DATA_RATE_5HZ,
 80002e2:	4a0a      	ldr	r2, [pc, #40]	; (800030c <lis3mdl_init+0x30>)
 80002e4:	463b      	mov	r3, r7
 80002e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002ea:	6018      	str	r0, [r3, #0]
 80002ec:	3304      	adds	r3, #4
 80002ee:	7019      	strb	r1, [r3, #0]
						SCALE_12_GAUSS,
						CTRL3_DEFAULT,
						CTRL4_DEFAULT,
						CTRL5_DEFAULT};

	HAL_I2C_Mem_Write_IT(&hi2c1, SLAVE_ADDRESS << 1U, CTRL_REG, I2C_MEMADD_SIZE_8BIT, pData, sizeof(pData));
 80002f0:	2305      	movs	r3, #5
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	463b      	mov	r3, r7
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	2301      	movs	r3, #1
 80002fa:	2220      	movs	r2, #32
 80002fc:	2138      	movs	r1, #56	; 0x38
 80002fe:	4804      	ldr	r0, [pc, #16]	; (8000310 <lis3mdl_init+0x34>)
 8000300:	f001 fc32 	bl	8001b68 <HAL_I2C_Mem_Write_IT>
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	08008ba0 	.word	0x08008ba0
 8000310:	200007bc 	.word	0x200007bc

08000314 <lis3mdl_read>:

lis3mdl_data lis3mdl_read()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af04      	add	r7, sp, #16
 800031a:	6078      	str	r0, [r7, #4]
	lis3mdl_data pData;
	HAL_I2C_Mem_Read(&hi2c1, SLAVE_ADDRESS << 1U, READ_REG, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&pData, sizeof(lis3mdl_data), 1000);
 800031c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000320:	9302      	str	r3, [sp, #8]
 8000322:	2308      	movs	r3, #8
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	f107 0308 	add.w	r3, r7, #8
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	2301      	movs	r3, #1
 800032e:	2228      	movs	r2, #40	; 0x28
 8000330:	2138      	movs	r1, #56	; 0x38
 8000332:	4807      	ldr	r0, [pc, #28]	; (8000350 <lis3mdl_read+0x3c>)
 8000334:	f001 f9b0 	bl	8001698 <HAL_I2C_Mem_Read>
	return pData;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	461a      	mov	r2, r3
 800033c:	f107 0308 	add.w	r3, r7, #8
 8000340:	cb03      	ldmia	r3!, {r0, r1}
 8000342:	6010      	str	r0, [r2, #0]
 8000344:	6051      	str	r1, [r2, #4]
}
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	200007bc 	.word	0x200007bc

08000354 <w25q80dv_init>:
/***********************************************************************************************************************************
 *** PUBLIC FUNCTIONS
 **********************************************************************************************************************************/

void w25q80dv_init()
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
	w25q80dv_write_enable();
 800035a:	f000 f883 	bl	8000464 <w25q80dv_write_enable>
	uint8_t pData[3] = {WRITE_STATUS_REGISTER, SOFTWARE_PROTECTION_ENABLE_0, SOFTWARE_PROTECTION_ENABLE_1};
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <w25q80dv_init+0x44>)
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	6812      	ldr	r2, [r2, #0]
 8000364:	4611      	mov	r1, r2
 8000366:	8019      	strh	r1, [r3, #0]
 8000368:	3302      	adds	r3, #2
 800036a:	0c12      	lsrs	r2, r2, #16
 800036c:	701a      	strb	r2, [r3, #0]
	TRANSMIT(pData, sizeof(pData));
 800036e:	2200      	movs	r2, #0
 8000370:	2110      	movs	r1, #16
 8000372:	480a      	ldr	r0, [pc, #40]	; (800039c <w25q80dv_init+0x48>)
 8000374:	f001 f820 	bl	80013b8 <HAL_GPIO_WritePin>
 8000378:	1d39      	adds	r1, r7, #4
 800037a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037e:	2203      	movs	r2, #3
 8000380:	4807      	ldr	r0, [pc, #28]	; (80003a0 <w25q80dv_init+0x4c>)
 8000382:	f003 ffab 	bl	80042dc <HAL_SPI_Transmit>
 8000386:	2201      	movs	r2, #1
 8000388:	2110      	movs	r1, #16
 800038a:	4804      	ldr	r0, [pc, #16]	; (800039c <w25q80dv_init+0x48>)
 800038c:	f001 f814 	bl	80013b8 <HAL_GPIO_WritePin>
}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	08008ba8 	.word	0x08008ba8
 800039c:	40010800 	.word	0x40010800
 80003a0:	20000810 	.word	0x20000810

080003a4 <w25q80dv_write>:

void w25q80dv_write(Measurements data, uint32_t dir)
{
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b08b      	sub	sp, #44	; 0x2c
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	463c      	mov	r4, r7
 80003ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t pData[20];
	dir |= (PAGE_PROGRAM << 24U);
 80003b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80003b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	memcpy(pData, &dir, 4);
 80003ba:	617b      	str	r3, [r7, #20]
	memcpy(pData + 4, &data, sizeof(Measurements));
 80003bc:	f107 0314 	add.w	r3, r7, #20
 80003c0:	3304      	adds	r3, #4
 80003c2:	4639      	mov	r1, r7
 80003c4:	2210      	movs	r2, #16
 80003c6:	4618      	mov	r0, r3
 80003c8:	f008 fb7c 	bl	8008ac4 <memcpy>
	w25q80dv_write_enable();
 80003cc:	f000 f84a 	bl	8000464 <w25q80dv_write_enable>
	TRANSMIT(pData, 20);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2110      	movs	r1, #16
 80003d4:	4809      	ldr	r0, [pc, #36]	; (80003fc <w25q80dv_write+0x58>)
 80003d6:	f000 ffef 	bl	80013b8 <HAL_GPIO_WritePin>
 80003da:	f107 0114 	add.w	r1, r7, #20
 80003de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003e2:	2214      	movs	r2, #20
 80003e4:	4806      	ldr	r0, [pc, #24]	; (8000400 <w25q80dv_write+0x5c>)
 80003e6:	f003 ff79 	bl	80042dc <HAL_SPI_Transmit>
 80003ea:	2201      	movs	r2, #1
 80003ec:	2110      	movs	r1, #16
 80003ee:	4803      	ldr	r0, [pc, #12]	; (80003fc <w25q80dv_write+0x58>)
 80003f0:	f000 ffe2 	bl	80013b8 <HAL_GPIO_WritePin>
}
 80003f4:	bf00      	nop
 80003f6:	372c      	adds	r7, #44	; 0x2c
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd90      	pop	{r4, r7, pc}
 80003fc:	40010800 	.word	0x40010800
 8000400:	20000810 	.word	0x20000810

08000404 <w25q80db_read>:

Measurements w25q80db_read(uint32_t dir)
{
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b08d      	sub	sp, #52	; 0x34
 8000408:	af02      	add	r7, sp, #8
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
	Measurements pTxData, pRxData;
	dir |= (READ_DATA << 24U);
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]
	memcpy(&pTxData, &dir, sizeof(dir));
 8000418:	61bb      	str	r3, [r7, #24]
	TRANSMIT_RECIVE((uint8_t*)&pTxData, (uint8_t*)&pRxData, sizeof(Measurements));
 800041a:	2200      	movs	r2, #0
 800041c:	2110      	movs	r1, #16
 800041e:	480f      	ldr	r0, [pc, #60]	; (800045c <w25q80db_read+0x58>)
 8000420:	f000 ffca 	bl	80013b8 <HAL_GPIO_WritePin>
 8000424:	f107 0208 	add.w	r2, r7, #8
 8000428:	f107 0118 	add.w	r1, r7, #24
 800042c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	2310      	movs	r3, #16
 8000434:	480a      	ldr	r0, [pc, #40]	; (8000460 <w25q80db_read+0x5c>)
 8000436:	f004 f894 	bl	8004562 <HAL_SPI_TransmitReceive>
 800043a:	2201      	movs	r2, #1
 800043c:	2110      	movs	r1, #16
 800043e:	4807      	ldr	r0, [pc, #28]	; (800045c <w25q80db_read+0x58>)
 8000440:	f000 ffba 	bl	80013b8 <HAL_GPIO_WritePin>
	return pRxData;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	461c      	mov	r4, r3
 8000448:	f107 0308 	add.w	r3, r7, #8
 800044c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800044e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	372c      	adds	r7, #44	; 0x2c
 8000456:	46bd      	mov	sp, r7
 8000458:	bd90      	pop	{r4, r7, pc}
 800045a:	bf00      	nop
 800045c:	40010800 	.word	0x40010800
 8000460:	20000810 	.word	0x20000810

08000464 <w25q80dv_write_enable>:
/***********************************************************************************************************************************
 *** PRIVATE FUNCTION
 **********************************************************************************************************************************/

static void w25q80dv_write_enable()
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
	uint8_t pData = WRITE_ENABLE;
 800046a:	2306      	movs	r3, #6
 800046c:	71fb      	strb	r3, [r7, #7]
	TRANSMIT(&pData, sizeof(pData));
 800046e:	2200      	movs	r2, #0
 8000470:	2110      	movs	r1, #16
 8000472:	4809      	ldr	r0, [pc, #36]	; (8000498 <w25q80dv_write_enable+0x34>)
 8000474:	f000 ffa0 	bl	80013b8 <HAL_GPIO_WritePin>
 8000478:	1df9      	adds	r1, r7, #7
 800047a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800047e:	2201      	movs	r2, #1
 8000480:	4806      	ldr	r0, [pc, #24]	; (800049c <w25q80dv_write_enable+0x38>)
 8000482:	f003 ff2b 	bl	80042dc <HAL_SPI_Transmit>
 8000486:	2201      	movs	r2, #1
 8000488:	2110      	movs	r1, #16
 800048a:	4803      	ldr	r0, [pc, #12]	; (8000498 <w25q80dv_write_enable+0x34>)
 800048c:	f000 ff94 	bl	80013b8 <HAL_GPIO_WritePin>
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40010800 	.word	0x40010800
 800049c:	20000810 	.word	0x20000810

080004a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <vApplicationGetIdleTaskMemory+0x28>)
 80004b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	4a05      	ldr	r2, [pc, #20]	; (80004cc <vApplicationGetIdleTaskMemory+0x2c>)
 80004b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2280      	movs	r2, #128	; 0x80
 80004bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004be:	bf00      	nop
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	2000007c 	.word	0x2000007c
 80004cc:	2000011c 	.word	0x2000011c

080004d0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetTimerTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetTimerTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004ee:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000031c 	.word	0x2000031c
 8000500:	200003bc 	.word	0x200003bc

08000504 <main>:
/***********************************************************************************************************************************
 *** PUBLIC FUNCTIONS
 **********************************************************************************************************************************/

int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b090      	sub	sp, #64	; 0x40
 8000508:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800050a:	f000 fba1 	bl	8000c50 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800050e:	f000 f915 	bl	800073c <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000512:	f000 f9dd 	bl	80008d0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000516:	f000 f94d 	bl	80007b4 <MX_I2C1_Init>
	MX_SPI1_Init();
 800051a:	f000 f979 	bl	8000810 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800051e:	f000 f9ad 	bl	800087c <MX_USART1_UART_Init>
	lis3mdl_init();
 8000522:	f7ff fedb 	bl	80002dc <lis3mdl_init>
	filesystem_init();
 8000526:	f7ff fe1b 	bl	8000160 <filesystem_init>

	HAL_UART_Receive_IT(&huart1, (uint8_t *)&pData, sizeof(pData));
 800052a:	2208      	movs	r2, #8
 800052c:	4924      	ldr	r1, [pc, #144]	; (80005c0 <main+0xbc>)
 800052e:	4825      	ldr	r0, [pc, #148]	; (80005c4 <main+0xc0>)
 8000530:	f004 faf3 	bl	8004b1a <HAL_UART_Receive_IT>

	/* Create the semaphores(s) */
	/* definition and creation of myBinarySem01 */
	osSemaphoreDef(myBinarySem01);
 8000534:	2300      	movs	r3, #0
 8000536:	63bb      	str	r3, [r7, #56]	; 0x38
 8000538:	2300      	movs	r3, #0
 800053a:	63fb      	str	r3, [r7, #60]	; 0x3c
	myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800053c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000540:	2101      	movs	r1, #1
 8000542:	4618      	mov	r0, r3
 8000544:	f005 f914 	bl	8005770 <osSemaphoreCreate>
 8000548:	4603      	mov	r3, r0
 800054a:	4a1f      	ldr	r2, [pc, #124]	; (80005c8 <main+0xc4>)
 800054c:	6013      	str	r3, [r2, #0]

	/* Create the timer(s) */
	/* definition and creation of myTimer01 */
	osTimerDef(myTimer01, Callback01);
 800054e:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <main+0xc8>)
 8000550:	633b      	str	r3, [r7, #48]	; 0x30
 8000552:	2300      	movs	r3, #0
 8000554:	637b      	str	r3, [r7, #52]	; 0x34
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8000556:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800055a:	2200      	movs	r2, #0
 800055c:	2101      	movs	r1, #1
 800055e:	4618      	mov	r0, r3
 8000560:	f005 f88e 	bl	8005680 <osTimerCreate>
 8000564:	4603      	mov	r3, r0
 8000566:	4a1a      	ldr	r2, [pc, #104]	; (80005d0 <main+0xcc>)
 8000568:	6013      	str	r3, [r2, #0]
	osTimerStart(myTimer01Handle, 1000);
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <main+0xcc>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000572:	4618      	mov	r0, r3
 8000574:	f005 f8b8 	bl	80056e8 <osTimerStart>

	/* Create the queue(s) */
	/* definition and creation of myQueue01 */
	osMessageQDef(myQueue01, 16, uint64_t);
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <main+0xd0>)
 800057a:	f107 0420 	add.w	r4, r7, #32
 800057e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000580:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f005 f9a6 	bl	80058dc <osMessageCreate>
 8000590:	4603      	mov	r3, r0
 8000592:	4a11      	ldr	r2, [pc, #68]	; (80005d8 <main+0xd4>)
 8000594:	6013      	str	r3, [r2, #0]

	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <main+0xd8>)
 8000598:	1d3c      	adds	r4, r7, #4
 800059a:	461d      	mov	r5, r3
 800059c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f005 f81a 	bl	80055e6 <osThreadCreate>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <main+0xdc>)
 80005b6:	6013      	str	r3, [r2, #0]

	osKernelStart();
 80005b8:	f005 f80e 	bl	80055d8 <osKernelStart>

	while (1)
 80005bc:	e7fe      	b.n	80005bc <main+0xb8>
 80005be:	bf00      	nop
 80005c0:	200008c8 	.word	0x200008c8
 80005c4:	20000868 	.word	0x20000868
 80005c8:	200008bc 	.word	0x200008bc
 80005cc:	0800067d 	.word	0x0800067d
 80005d0:	200008b8 	.word	0x200008b8
 80005d4:	08008bac 	.word	0x08008bac
 80005d8:	200008b4 	.word	0x200008b4
 80005dc:	08008bc8 	.word	0x08008bc8
 80005e0:	200008b0 	.word	0x200008b0

080005e4 <StartDefaultTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartDefaultTask(void const * argument)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	const char* pError = "ERROR ID NO ENCONTRADO\0";
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <StartDefaultTask+0x88>)
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	Measurements data;
	for(;;)
	{
		osEvent retvalue = osMessageGet(myQueue01Handle, 4000);
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <StartDefaultTask+0x8c>)
 80005f2:	6819      	ldr	r1, [r3, #0]
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f005 f9d5 	bl	80059ac <osMessageGet>

		if (retvalue.status == osEventMessage)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	2b10      	cmp	r3, #16
 8000606:	d1f3      	bne.n	80005f0 <StartDefaultTask+0xc>
		{
			if (osSemaphoreWait(myBinarySem01Handle, osWaitForever) == osOK)
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <StartDefaultTask+0x90>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f04f 31ff 	mov.w	r1, #4294967295
 8000610:	4618      	mov	r0, r3
 8000612:	f005 f8df 	bl	80057d4 <osSemaphoreWait>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1e9      	bne.n	80005f0 <StartDefaultTask+0xc>
			{
				bool temp = filesystem_read(*((uint64_t *)retvalue.value.p), &data);
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	461a      	mov	r2, r3
 8000628:	f7ff fdea 	bl	8000200 <filesystem_read>
 800062c:	4603      	mov	r3, r0
 800062e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				osSemaphoreRelease(myBinarySem01Handle);
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <StartDefaultTask+0x90>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f005 f91a 	bl	8005870 <osSemaphoreRelease>
				if (temp)
 800063c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000640:	2b00      	cmp	r3, #0
 8000642:	d007      	beq.n	8000654 <StartDefaultTask+0x70>
					HAL_UART_Transmit_IT(&huart1, (uint8_t *)&data, sizeof(Measurements));
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	2210      	movs	r2, #16
 800064a:	4619      	mov	r1, r3
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <StartDefaultTask+0x94>)
 800064e:	f004 fa2f 	bl	8004ab0 <HAL_UART_Transmit_IT>
 8000652:	e7cd      	b.n	80005f0 <StartDefaultTask+0xc>
				else
					HAL_UART_Transmit_IT(&huart1, (uint8_t *)pError, strlen(pError));
 8000654:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000656:	f7ff fd7b 	bl	8000150 <strlen>
 800065a:	4603      	mov	r3, r0
 800065c:	b29b      	uxth	r3, r3
 800065e:	461a      	mov	r2, r3
 8000660:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <StartDefaultTask+0x94>)
 8000664:	f004 fa24 	bl	8004ab0 <HAL_UART_Transmit_IT>
	{
 8000668:	e7c2      	b.n	80005f0 <StartDefaultTask+0xc>
 800066a:	bf00      	nop
 800066c:	08008be4 	.word	0x08008be4
 8000670:	200008b4 	.word	0x200008b4
 8000674:	200008bc 	.word	0x200008bc
 8000678:	20000868 	.word	0x20000868

0800067c <Callback01>:
  * @brief  runs every one second.
  * @param  argument: unused..
  * @retval None
  */
void Callback01(void const * argument)
{
 800067c:	b5b0      	push	{r4, r5, r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	lis3mdl_data temp = lis3mdl_read();
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fe43 	bl	8000314 <lis3mdl_read>
	Measurements data;
	data.id = ID++;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <Callback01+0x6c>)
 8000690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000694:	1c54      	adds	r4, r2, #1
 8000696:	f143 0500 	adc.w	r5, r3, #0
 800069a:	4913      	ldr	r1, [pc, #76]	; (80006e8 <Callback01+0x6c>)
 800069c:	e9c1 4500 	strd	r4, r5, [r1]
 80006a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	memcpy(&data.measurements, &temp, 8);
 80006a4:	f107 0118 	add.w	r1, r7, #24
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	3308      	adds	r3, #8
 80006ae:	2208      	movs	r2, #8
 80006b0:	4618      	mov	r0, r3
 80006b2:	f008 fa07 	bl	8008ac4 <memcpy>
	if (osSemaphoreWait(myBinarySem01Handle, osWaitForever) == osOK)
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <Callback01+0x70>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f04f 31ff 	mov.w	r1, #4294967295
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 f888 	bl	80057d4 <osSemaphoreWait>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d109      	bne.n	80006de <Callback01+0x62>
	{
		filesystem_write(data);
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006d0:	f7ff fd4c 	bl	800016c <filesystem_write>
		osSemaphoreRelease(myBinarySem01Handle);
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <Callback01+0x70>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f005 f8c9 	bl	8005870 <osSemaphoreRelease>
	}
}
 80006de:	bf00      	nop
 80006e0:	3720      	adds	r7, #32
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bdb0      	pop	{r4, r5, r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200008c0 	.word	0x200008c0
 80006ec:	200008bc 	.word	0x200008bc

080006f0 <HAL_UART_RxCpltCallback>:
  * @brief  is called when data is received by the uart.
  * @param  huart: represent the uart.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a0b      	ldr	r2, [pc, #44]	; (800072c <HAL_UART_RxCpltCallback+0x3c>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d10f      	bne.n	8000722 <HAL_UART_RxCpltCallback+0x32>
	{
		osMessagePut(myQueue01Handle, pData, 1000);
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <HAL_UART_RxCpltCallback+0x40>)
 8000704:	6818      	ldr	r0, [r3, #0]
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <HAL_UART_RxCpltCallback+0x44>)
 8000708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800070c:	4613      	mov	r3, r2
 800070e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000712:	4619      	mov	r1, r3
 8000714:	f005 f90a 	bl	800592c <osMessagePut>
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&pData, sizeof(pData));
 8000718:	2208      	movs	r2, #8
 800071a:	4906      	ldr	r1, [pc, #24]	; (8000734 <HAL_UART_RxCpltCallback+0x44>)
 800071c:	4806      	ldr	r0, [pc, #24]	; (8000738 <HAL_UART_RxCpltCallback+0x48>)
 800071e:	f004 f9fc 	bl	8004b1a <HAL_UART_Receive_IT>
	}
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40013800 	.word	0x40013800
 8000730:	200008b4 	.word	0x200008b4
 8000734:	200008c8 	.word	0x200008c8
 8000738:	20000868 	.word	0x20000868

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b090      	sub	sp, #64	; 0x40
 8000740:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	2228      	movs	r2, #40	; 0x28
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f008 f936 	bl	80089bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075e:	2302      	movs	r3, #2
 8000760:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000762:	2301      	movs	r3, #1
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000766:	2310      	movs	r3, #16
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800076a:	2300      	movs	r3, #0
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	4618      	mov	r0, r3
 8000774:	f003 f91e 	bl	80039b4 <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x46>
	{
		Error_Handler();
 800077e:	f000 f8f3 	bl	8000968 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	607b      	str	r3, [r7, #4]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f003 fb8c 	bl	8003eb8 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x6e>
	{
		Error_Handler();
 80007a6:	f000 f8df 	bl	8000968 <Error_Handler>
	}
}
 80007aa:	bf00      	nop
 80007ac:	3740      	adds	r7, #64	; 0x40
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2C1_Init+0x50>)
 80007ba:	4a13      	ldr	r2, [pc, #76]	; (8000808 <MX_I2C1_Init+0x54>)
 80007bc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_I2C1_Init+0x50>)
 80007c0:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_I2C1_Init+0x58>)
 80007c2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_I2C1_Init+0x50>)
 80007d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_I2C1_Init+0x50>)
 80007f2:	f000 fdf9 	bl	80013e8 <HAL_I2C_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80007fc:	f000 f8b4 	bl	8000968 <Error_Handler>
	}
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200007bc 	.word	0x200007bc
 8000808:	40005400 	.word	0x40005400
 800080c:	00061a80 	.word	0x00061a80

08000810 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_SPI1_Init+0x64>)
 8000816:	4a18      	ldr	r2, [pc, #96]	; (8000878 <MX_SPI1_Init+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_SPI1_Init+0x64>)
 800081c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000820:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_SPI1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_SPI1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_SPI1_Init+0x64>)
 800083c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000840:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_SPI1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_SPI1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_SPI1_Init+0x64>)
 800085c:	220a      	movs	r2, #10
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_SPI1_Init+0x64>)
 8000862:	f003 fcb7 	bl	80041d4 <HAL_SPI_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 800086c:	f000 f87c 	bl	8000968 <Error_Handler>
	}
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000810 	.word	0x20000810
 8000878:	40013000 	.word	0x40013000

0800087c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_USART1_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008b4:	f004 f8ac 	bl	8004a10 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80008be:	f000 f853 	bl	8000968 <Error_Handler>
	}
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000868 	.word	0x20000868
 80008cc:	40013800 	.word	0x40013800

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_GPIO_Init+0x8c>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a1c      	ldr	r2, [pc, #112]	; (800095c <MX_GPIO_Init+0x8c>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_GPIO_Init+0x8c>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_GPIO_Init+0x8c>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a16      	ldr	r2, [pc, #88]	; (800095c <MX_GPIO_Init+0x8c>)
 8000902:	f043 0308 	orr.w	r3, r3, #8
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_GPIO_Init+0x8c>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0308 	and.w	r3, r3, #8
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SC_GPIO_Port, SC_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2110      	movs	r1, #16
 8000918:	4811      	ldr	r0, [pc, #68]	; (8000960 <MX_GPIO_Init+0x90>)
 800091a:	f000 fd4d 	bl	80013b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800091e:	2308      	movs	r3, #8
 8000920:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_GPIO_Init+0x94>)
 8000924:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	4619      	mov	r1, r3
 8000930:	480b      	ldr	r0, [pc, #44]	; (8000960 <MX_GPIO_Init+0x90>)
 8000932:	f000 fbbd 	bl	80010b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SC_Pin */
	GPIO_InitStruct.Pin = SC_Pin;
 8000936:	2310      	movs	r3, #16
 8000938:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093e:	2301      	movs	r3, #1
 8000940:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2302      	movs	r3, #2
 8000944:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SC_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	4619      	mov	r1, r3
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_GPIO_Init+0x90>)
 800094e:	f000 fbaf 	bl	80010b0 <HAL_GPIO_Init>
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000
 8000960:	40010800 	.word	0x40010800
 8000964:	10110000 	.word	0x10110000

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <HAL_MspInit+0x4c>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <HAL_MspInit+0x4c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6193      	str	r3, [r2, #24]
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_MspInit+0x4c>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_MspInit+0x4c>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	61d3      	str	r3, [r2, #28]
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	210f      	movs	r1, #15
 80009ae:	f06f 0001 	mvn.w	r0, #1
 80009b2:	f000 fa86 	bl	8000ec2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000

080009c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <HAL_I2C_MspInit+0x80>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d12b      	bne.n	8000a3c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <HAL_I2C_MspInit+0x84>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <HAL_I2C_MspInit+0x84>)
 80009ea:	f043 0308 	orr.w	r3, r3, #8
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_I2C_MspInit+0x84>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0308 	and.w	r3, r3, #8
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009fc:	23c0      	movs	r3, #192	; 0xc0
 80009fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a00:	2312      	movs	r3, #18
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480f      	ldr	r0, [pc, #60]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 8000a10:	f000 fb4e 	bl	80010b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_I2C_MspInit+0x84>)
 8000a16:	69db      	ldr	r3, [r3, #28]
 8000a18:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <HAL_I2C_MspInit+0x84>)
 8000a1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a1e:	61d3      	str	r3, [r2, #28]
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_I2C_MspInit+0x84>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2105      	movs	r1, #5
 8000a30:	201f      	movs	r0, #31
 8000a32:	f000 fa46 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a36:	201f      	movs	r0, #31
 8000a38:	f000 fa5f 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a3c:	bf00      	nop
 8000a3e:	3720      	adds	r7, #32
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40005400 	.word	0x40005400
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40010c00 	.word	0x40010c00

08000a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <HAL_SPI_MspInit+0x88>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d12f      	bne.n	8000ad0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_SPI_MspInit+0x8c>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a19      	ldr	r2, [pc, #100]	; (8000adc <HAL_SPI_MspInit+0x8c>)
 8000a76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_SPI_MspInit+0x8c>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <HAL_SPI_MspInit+0x8c>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a13      	ldr	r2, [pc, #76]	; (8000adc <HAL_SPI_MspInit+0x8c>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_SPI_MspInit+0x8c>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000aa0:	23a0      	movs	r3, #160	; 0xa0
 8000aa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <HAL_SPI_MspInit+0x90>)
 8000ab4:	f000 fafc 	bl	80010b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ab8:	2340      	movs	r3, #64	; 0x40
 8000aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <HAL_SPI_MspInit+0x90>)
 8000acc:	f000 faf0 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3720      	adds	r7, #32
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40013000 	.word	0x40013000
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010800 	.word	0x40010800

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <HAL_UART_MspInit+0x9c>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d139      	bne.n	8000b78 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <HAL_UART_MspInit+0xa0>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <HAL_UART_MspInit+0xa0>)
 8000b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_UART_MspInit+0xa0>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_UART_MspInit+0xa0>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <HAL_UART_MspInit+0xa0>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <HAL_UART_MspInit+0xa0>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4619      	mov	r1, r3
 8000b48:	480f      	ldr	r0, [pc, #60]	; (8000b88 <HAL_UART_MspInit+0xa4>)
 8000b4a:	f000 fab1 	bl	80010b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	4619      	mov	r1, r3
 8000b62:	4809      	ldr	r0, [pc, #36]	; (8000b88 <HAL_UART_MspInit+0xa4>)
 8000b64:	f000 faa4 	bl	80010b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2105      	movs	r1, #5
 8000b6c:	2025      	movs	r0, #37	; 0x25
 8000b6e:	f000 f9a8 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b72:	2025      	movs	r0, #37	; 0x25
 8000b74:	f000 f9c1 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b78:	bf00      	nop
 8000b7a:	3720      	adds	r7, #32
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40013800 	.word	0x40013800
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40010800 	.word	0x40010800

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <NMI_Handler+0x4>

08000b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <MemManage_Handler+0x4>

08000b9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr

08000bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bba:	f000 f88f 	bl	8000cdc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bbe:	f006 fd67 	bl	8007690 <xTaskGetSchedulerState>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d001      	beq.n	8000bcc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bc8:	f007 fc9e 	bl	8008508 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <I2C1_EV_IRQHandler+0x10>)
 8000bd6:	f001 f873 	bl	8001cc0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200007bc 	.word	0x200007bc

08000be4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <USART1_IRQHandler+0x10>)
 8000bea:	f003 ffbb 	bl	8004b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000868 	.word	0x20000868

08000bf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c04:	f7ff fff8 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c0a:	490c      	ldr	r1, [pc, #48]	; (8000c3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c20:	4c09      	ldr	r4, [pc, #36]	; (8000c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f007 ff23 	bl	8008a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c32:	f7ff fc67 	bl	8000504 <main>
  bx lr
 8000c36:	4770      	bx	lr
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c40:	08008c4c 	.word	0x08008c4c
  ldr r2, =_sbss
 8000c44:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c48:	2000189c 	.word	0x2000189c

08000c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_Init+0x28>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_Init+0x28>)
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f923 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	200f      	movs	r0, #15
 8000c68:	f000 f808 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6c:	f7ff fe82 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40022000 	.word	0x40022000

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f93b 	bl	8000f16 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f903 	bl	8000ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <HAL_IncTick+0x20>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	200008d0 	.word	0x200008d0

08000d00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <HAL_GetTick+0x10>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	200008d0 	.word	0x200008d0

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4906      	ldr	r1, [pc, #24]	; (8000dac <__NVIC_EnableIRQ+0x34>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f7ff ff90 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff2d 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff42 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff90 	bl	8000e04 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5f 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff35 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffa2 	bl	8000e68 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b085      	sub	sp, #20
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d008      	beq.n	8000f58 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2204      	movs	r2, #4
 8000f4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e020      	b.n	8000f9a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 020e 	bic.w	r2, r2, #14
 8000f66:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0201 	bic.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f80:	2101      	movs	r1, #1
 8000f82:	fa01 f202 	lsl.w	r2, r1, r2
 8000f86:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d005      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	e051      	b.n	800106c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 020e 	bic.w	r2, r2, #14
 8000fd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0201 	bic.w	r2, r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a22      	ldr	r2, [pc, #136]	; (8001078 <HAL_DMA_Abort_IT+0xd4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d029      	beq.n	8001046 <HAL_DMA_Abort_IT+0xa2>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <HAL_DMA_Abort_IT+0xd8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d022      	beq.n	8001042 <HAL_DMA_Abort_IT+0x9e>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <HAL_DMA_Abort_IT+0xdc>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01a      	beq.n	800103c <HAL_DMA_Abort_IT+0x98>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <HAL_DMA_Abort_IT+0xe0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d012      	beq.n	8001036 <HAL_DMA_Abort_IT+0x92>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <HAL_DMA_Abort_IT+0xe4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00a      	beq.n	8001030 <HAL_DMA_Abort_IT+0x8c>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_DMA_Abort_IT+0xe8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d102      	bne.n	800102a <HAL_DMA_Abort_IT+0x86>
 8001024:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001028:	e00e      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 800102a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800102e:	e00b      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 8001030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001034:	e008      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 8001036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103a:	e005      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 800103c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001040:	e002      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 8001042:	2310      	movs	r3, #16
 8001044:	e000      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 8001046:	2301      	movs	r3, #1
 8001048:	4a11      	ldr	r2, [pc, #68]	; (8001090 <HAL_DMA_Abort_IT+0xec>)
 800104a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	4798      	blx	r3
    } 
  }
  return status;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40020008 	.word	0x40020008
 800107c:	4002001c 	.word	0x4002001c
 8001080:	40020030 	.word	0x40020030
 8001084:	40020044 	.word	0x40020044
 8001088:	40020058 	.word	0x40020058
 800108c:	4002006c 	.word	0x4002006c
 8001090:	40020000 	.word	0x40020000

08001094 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a2:	b2db      	uxtb	r3, r3
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
	...

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b08b      	sub	sp, #44	; 0x2c
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c2:	e169      	b.n	8001398 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010c4:	2201      	movs	r2, #1
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	69fa      	ldr	r2, [r7, #28]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	429a      	cmp	r2, r3
 80010de:	f040 8158 	bne.w	8001392 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4a9a      	ldr	r2, [pc, #616]	; (8001350 <HAL_GPIO_Init+0x2a0>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d05e      	beq.n	80011aa <HAL_GPIO_Init+0xfa>
 80010ec:	4a98      	ldr	r2, [pc, #608]	; (8001350 <HAL_GPIO_Init+0x2a0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d875      	bhi.n	80011de <HAL_GPIO_Init+0x12e>
 80010f2:	4a98      	ldr	r2, [pc, #608]	; (8001354 <HAL_GPIO_Init+0x2a4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d058      	beq.n	80011aa <HAL_GPIO_Init+0xfa>
 80010f8:	4a96      	ldr	r2, [pc, #600]	; (8001354 <HAL_GPIO_Init+0x2a4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d86f      	bhi.n	80011de <HAL_GPIO_Init+0x12e>
 80010fe:	4a96      	ldr	r2, [pc, #600]	; (8001358 <HAL_GPIO_Init+0x2a8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d052      	beq.n	80011aa <HAL_GPIO_Init+0xfa>
 8001104:	4a94      	ldr	r2, [pc, #592]	; (8001358 <HAL_GPIO_Init+0x2a8>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d869      	bhi.n	80011de <HAL_GPIO_Init+0x12e>
 800110a:	4a94      	ldr	r2, [pc, #592]	; (800135c <HAL_GPIO_Init+0x2ac>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d04c      	beq.n	80011aa <HAL_GPIO_Init+0xfa>
 8001110:	4a92      	ldr	r2, [pc, #584]	; (800135c <HAL_GPIO_Init+0x2ac>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d863      	bhi.n	80011de <HAL_GPIO_Init+0x12e>
 8001116:	4a92      	ldr	r2, [pc, #584]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d046      	beq.n	80011aa <HAL_GPIO_Init+0xfa>
 800111c:	4a90      	ldr	r2, [pc, #576]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d85d      	bhi.n	80011de <HAL_GPIO_Init+0x12e>
 8001122:	2b12      	cmp	r3, #18
 8001124:	d82a      	bhi.n	800117c <HAL_GPIO_Init+0xcc>
 8001126:	2b12      	cmp	r3, #18
 8001128:	d859      	bhi.n	80011de <HAL_GPIO_Init+0x12e>
 800112a:	a201      	add	r2, pc, #4	; (adr r2, 8001130 <HAL_GPIO_Init+0x80>)
 800112c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001130:	080011ab 	.word	0x080011ab
 8001134:	08001185 	.word	0x08001185
 8001138:	08001197 	.word	0x08001197
 800113c:	080011d9 	.word	0x080011d9
 8001140:	080011df 	.word	0x080011df
 8001144:	080011df 	.word	0x080011df
 8001148:	080011df 	.word	0x080011df
 800114c:	080011df 	.word	0x080011df
 8001150:	080011df 	.word	0x080011df
 8001154:	080011df 	.word	0x080011df
 8001158:	080011df 	.word	0x080011df
 800115c:	080011df 	.word	0x080011df
 8001160:	080011df 	.word	0x080011df
 8001164:	080011df 	.word	0x080011df
 8001168:	080011df 	.word	0x080011df
 800116c:	080011df 	.word	0x080011df
 8001170:	080011df 	.word	0x080011df
 8001174:	0800118d 	.word	0x0800118d
 8001178:	080011a1 	.word	0x080011a1
 800117c:	4a79      	ldr	r2, [pc, #484]	; (8001364 <HAL_GPIO_Init+0x2b4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001182:	e02c      	b.n	80011de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	623b      	str	r3, [r7, #32]
          break;
 800118a:	e029      	b.n	80011e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	3304      	adds	r3, #4
 8001192:	623b      	str	r3, [r7, #32]
          break;
 8001194:	e024      	b.n	80011e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	3308      	adds	r3, #8
 800119c:	623b      	str	r3, [r7, #32]
          break;
 800119e:	e01f      	b.n	80011e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	330c      	adds	r3, #12
 80011a6:	623b      	str	r3, [r7, #32]
          break;
 80011a8:	e01a      	b.n	80011e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d102      	bne.n	80011b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011b2:	2304      	movs	r3, #4
 80011b4:	623b      	str	r3, [r7, #32]
          break;
 80011b6:	e013      	b.n	80011e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d105      	bne.n	80011cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c0:	2308      	movs	r3, #8
 80011c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	611a      	str	r2, [r3, #16]
          break;
 80011ca:	e009      	b.n	80011e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011cc:	2308      	movs	r3, #8
 80011ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69fa      	ldr	r2, [r7, #28]
 80011d4:	615a      	str	r2, [r3, #20]
          break;
 80011d6:	e003      	b.n	80011e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
          break;
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x130>
          break;
 80011de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	2bff      	cmp	r3, #255	; 0xff
 80011e4:	d801      	bhi.n	80011ea <HAL_GPIO_Init+0x13a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	e001      	b.n	80011ee <HAL_GPIO_Init+0x13e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3304      	adds	r3, #4
 80011ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	2bff      	cmp	r3, #255	; 0xff
 80011f4:	d802      	bhi.n	80011fc <HAL_GPIO_Init+0x14c>
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	e002      	b.n	8001202 <HAL_GPIO_Init+0x152>
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	3b08      	subs	r3, #8
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	210f      	movs	r1, #15
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	401a      	ands	r2, r3
 8001214:	6a39      	ldr	r1, [r7, #32]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	431a      	orrs	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 80b1 	beq.w	8001392 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001230:	4b4d      	ldr	r3, [pc, #308]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a4c      	ldr	r2, [pc, #304]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b4a      	ldr	r3, [pc, #296]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001248:	4a48      	ldr	r2, [pc, #288]	; (800136c <HAL_GPIO_Init+0x2bc>)
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	089b      	lsrs	r3, r3, #2
 800124e:	3302      	adds	r3, #2
 8001250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001254:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	220f      	movs	r2, #15
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a40      	ldr	r2, [pc, #256]	; (8001370 <HAL_GPIO_Init+0x2c0>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d013      	beq.n	800129c <HAL_GPIO_Init+0x1ec>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a3f      	ldr	r2, [pc, #252]	; (8001374 <HAL_GPIO_Init+0x2c4>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d00d      	beq.n	8001298 <HAL_GPIO_Init+0x1e8>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a3e      	ldr	r2, [pc, #248]	; (8001378 <HAL_GPIO_Init+0x2c8>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d007      	beq.n	8001294 <HAL_GPIO_Init+0x1e4>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a3d      	ldr	r2, [pc, #244]	; (800137c <HAL_GPIO_Init+0x2cc>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d101      	bne.n	8001290 <HAL_GPIO_Init+0x1e0>
 800128c:	2303      	movs	r3, #3
 800128e:	e006      	b.n	800129e <HAL_GPIO_Init+0x1ee>
 8001290:	2304      	movs	r3, #4
 8001292:	e004      	b.n	800129e <HAL_GPIO_Init+0x1ee>
 8001294:	2302      	movs	r3, #2
 8001296:	e002      	b.n	800129e <HAL_GPIO_Init+0x1ee>
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <HAL_GPIO_Init+0x1ee>
 800129c:	2300      	movs	r3, #0
 800129e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a0:	f002 0203 	and.w	r2, r2, #3
 80012a4:	0092      	lsls	r2, r2, #2
 80012a6:	4093      	lsls	r3, r2
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ae:	492f      	ldr	r1, [pc, #188]	; (800136c <HAL_GPIO_Init+0x2bc>)
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d006      	beq.n	80012d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012c8:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	492c      	ldr	r1, [pc, #176]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	608b      	str	r3, [r1, #8]
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012d6:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	43db      	mvns	r3, r3
 80012de:	4928      	ldr	r1, [pc, #160]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	4922      	ldr	r1, [pc, #136]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	60cb      	str	r3, [r1, #12]
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001300:	68da      	ldr	r2, [r3, #12]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	43db      	mvns	r3, r3
 8001306:	491e      	ldr	r1, [pc, #120]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001308:	4013      	ands	r3, r2
 800130a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	4918      	ldr	r1, [pc, #96]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	43db      	mvns	r3, r3
 800132e:	4914      	ldr	r1, [pc, #80]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001330:	4013      	ands	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d021      	beq.n	8001384 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	490e      	ldr	r1, [pc, #56]	; (8001380 <HAL_GPIO_Init+0x2d0>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	600b      	str	r3, [r1, #0]
 800134c:	e021      	b.n	8001392 <HAL_GPIO_Init+0x2e2>
 800134e:	bf00      	nop
 8001350:	10320000 	.word	0x10320000
 8001354:	10310000 	.word	0x10310000
 8001358:	10220000 	.word	0x10220000
 800135c:	10210000 	.word	0x10210000
 8001360:	10120000 	.word	0x10120000
 8001364:	10110000 	.word	0x10110000
 8001368:	40021000 	.word	0x40021000
 800136c:	40010000 	.word	0x40010000
 8001370:	40010800 	.word	0x40010800
 8001374:	40010c00 	.word	0x40010c00
 8001378:	40011000 	.word	0x40011000
 800137c:	40011400 	.word	0x40011400
 8001380:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_GPIO_Init+0x304>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	43db      	mvns	r3, r3
 800138c:	4909      	ldr	r1, [pc, #36]	; (80013b4 <HAL_GPIO_Init+0x304>)
 800138e:	4013      	ands	r3, r2
 8001390:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	3301      	adds	r3, #1
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	fa22 f303 	lsr.w	r3, r2, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f47f ae8e 	bne.w	80010c4 <HAL_GPIO_Init+0x14>
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	372c      	adds	r7, #44	; 0x2c
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013d4:	e003      	b.n	80013de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013d6:	887b      	ldrh	r3, [r7, #2]
 80013d8:	041a      	lsls	r2, r3, #16
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	611a      	str	r2, [r3, #16]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e12b      	b.n	8001652 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d106      	bne.n	8001414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fad8 	bl	80009c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2224      	movs	r2, #36	; 0x24
 8001418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0201 	bic.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800143a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800144a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800144c:	f002 fe7c 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8001450:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4a81      	ldr	r2, [pc, #516]	; (800165c <HAL_I2C_Init+0x274>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d807      	bhi.n	800146c <HAL_I2C_Init+0x84>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4a80      	ldr	r2, [pc, #512]	; (8001660 <HAL_I2C_Init+0x278>)
 8001460:	4293      	cmp	r3, r2
 8001462:	bf94      	ite	ls
 8001464:	2301      	movls	r3, #1
 8001466:	2300      	movhi	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	e006      	b.n	800147a <HAL_I2C_Init+0x92>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4a7d      	ldr	r2, [pc, #500]	; (8001664 <HAL_I2C_Init+0x27c>)
 8001470:	4293      	cmp	r3, r2
 8001472:	bf94      	ite	ls
 8001474:	2301      	movls	r3, #1
 8001476:	2300      	movhi	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e0e7      	b.n	8001652 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4a78      	ldr	r2, [pc, #480]	; (8001668 <HAL_I2C_Init+0x280>)
 8001486:	fba2 2303 	umull	r2, r3, r2, r3
 800148a:	0c9b      	lsrs	r3, r3, #18
 800148c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	430a      	orrs	r2, r1
 80014a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4a6a      	ldr	r2, [pc, #424]	; (800165c <HAL_I2C_Init+0x274>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d802      	bhi.n	80014bc <HAL_I2C_Init+0xd4>
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	3301      	adds	r3, #1
 80014ba:	e009      	b.n	80014d0 <HAL_I2C_Init+0xe8>
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014c2:	fb02 f303 	mul.w	r3, r2, r3
 80014c6:	4a69      	ldr	r2, [pc, #420]	; (800166c <HAL_I2C_Init+0x284>)
 80014c8:	fba2 2303 	umull	r2, r3, r2, r3
 80014cc:	099b      	lsrs	r3, r3, #6
 80014ce:	3301      	adds	r3, #1
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	430b      	orrs	r3, r1
 80014d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	495c      	ldr	r1, [pc, #368]	; (800165c <HAL_I2C_Init+0x274>)
 80014ec:	428b      	cmp	r3, r1
 80014ee:	d819      	bhi.n	8001524 <HAL_I2C_Init+0x13c>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1e59      	subs	r1, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80014fe:	1c59      	adds	r1, r3, #1
 8001500:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001504:	400b      	ands	r3, r1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00a      	beq.n	8001520 <HAL_I2C_Init+0x138>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1e59      	subs	r1, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fbb1 f3f3 	udiv	r3, r1, r3
 8001518:	3301      	adds	r3, #1
 800151a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151e:	e051      	b.n	80015c4 <HAL_I2C_Init+0x1dc>
 8001520:	2304      	movs	r3, #4
 8001522:	e04f      	b.n	80015c4 <HAL_I2C_Init+0x1dc>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d111      	bne.n	8001550 <HAL_I2C_Init+0x168>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	1e58      	subs	r0, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	440b      	add	r3, r1
 800153a:	fbb0 f3f3 	udiv	r3, r0, r3
 800153e:	3301      	adds	r3, #1
 8001540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	e012      	b.n	8001576 <HAL_I2C_Init+0x18e>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1e58      	subs	r0, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	0099      	lsls	r1, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	fbb0 f3f3 	udiv	r3, r0, r3
 8001566:	3301      	adds	r3, #1
 8001568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156c:	2b00      	cmp	r3, #0
 800156e:	bf0c      	ite	eq
 8001570:	2301      	moveq	r3, #1
 8001572:	2300      	movne	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_I2C_Init+0x196>
 800157a:	2301      	movs	r3, #1
 800157c:	e022      	b.n	80015c4 <HAL_I2C_Init+0x1dc>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10e      	bne.n	80015a4 <HAL_I2C_Init+0x1bc>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1e58      	subs	r0, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6859      	ldr	r1, [r3, #4]
 800158e:	460b      	mov	r3, r1
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	440b      	add	r3, r1
 8001594:	fbb0 f3f3 	udiv	r3, r0, r3
 8001598:	3301      	adds	r3, #1
 800159a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800159e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a2:	e00f      	b.n	80015c4 <HAL_I2C_Init+0x1dc>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1e58      	subs	r0, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	0099      	lsls	r1, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	6809      	ldr	r1, [r1, #0]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69da      	ldr	r2, [r3, #28]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6911      	ldr	r1, [r2, #16]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68d2      	ldr	r2, [r2, #12]
 80015fe:	4311      	orrs	r1, r2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	430b      	orrs	r3, r1
 8001606:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2220      	movs	r2, #32
 800163e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	000186a0 	.word	0x000186a0
 8001660:	001e847f 	.word	0x001e847f
 8001664:	003d08ff 	.word	0x003d08ff
 8001668:	431bde83 	.word	0x431bde83
 800166c:	10624dd3 	.word	0x10624dd3

08001670 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001682:	2b80      	cmp	r3, #128	; 0x80
 8001684:	d103      	bne.n	800168e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	; 0x30
 800169c:	af02      	add	r7, sp, #8
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	4608      	mov	r0, r1
 80016a2:	4611      	mov	r1, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	817b      	strh	r3, [r7, #10]
 80016aa:	460b      	mov	r3, r1
 80016ac:	813b      	strh	r3, [r7, #8]
 80016ae:	4613      	mov	r3, r2
 80016b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016b6:	f7ff fb23 	bl	8000d00 <HAL_GetTick>
 80016ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	f040 8244 	bne.w	8001b52 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2319      	movs	r3, #25
 80016d0:	2201      	movs	r2, #1
 80016d2:	4982      	ldr	r1, [pc, #520]	; (80018dc <HAL_I2C_Mem_Read+0x244>)
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f001 ff33 	bl	8003540 <I2C_WaitOnFlagUntilTimeout>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80016e0:	2302      	movs	r3, #2
 80016e2:	e237      	b.n	8001b54 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_I2C_Mem_Read+0x5a>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e230      	b.n	8001b54 <HAL_I2C_Mem_Read+0x4bc>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b01      	cmp	r3, #1
 8001706:	d007      	beq.n	8001718 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001726:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2222      	movs	r2, #34	; 0x22
 800172c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2240      	movs	r2, #64	; 0x40
 8001734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001748:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a62      	ldr	r2, [pc, #392]	; (80018e0 <HAL_I2C_Mem_Read+0x248>)
 8001758:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800175a:	88f8      	ldrh	r0, [r7, #6]
 800175c:	893a      	ldrh	r2, [r7, #8]
 800175e:	8979      	ldrh	r1, [r7, #10]
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	4603      	mov	r3, r0
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f001 fd58 	bl	8003220 <I2C_RequestMemoryRead>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e1ec      	b.n	8001b54 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177e:	2b00      	cmp	r3, #0
 8001780:	d113      	bne.n	80017aa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	e1c0      	b.n	8001b2c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d11e      	bne.n	80017f0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80017c2:	b672      	cpsid	i
}
 80017c4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	61bb      	str	r3, [r7, #24]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80017ec:	b662      	cpsie	i
}
 80017ee:	e035      	b.n	800185c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d11e      	bne.n	8001836 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001806:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001808:	b672      	cpsid	i
}
 800180a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001830:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001832:	b662      	cpsie	i
}
 8001834:	e012      	b.n	800185c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001844:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800185c:	e166      	b.n	8001b2c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001862:	2b03      	cmp	r3, #3
 8001864:	f200 811f 	bhi.w	8001aa6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186c:	2b01      	cmp	r3, #1
 800186e:	d123      	bne.n	80018b8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001872:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f001 fff7 	bl	8003868 <I2C_WaitOnRXNEFlagUntilTimeout>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e167      	b.n	8001b54 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691a      	ldr	r2, [r3, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018b6:	e139      	b.n	8001b2c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d152      	bne.n	8001966 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c6:	2200      	movs	r2, #0
 80018c8:	4906      	ldr	r1, [pc, #24]	; (80018e4 <HAL_I2C_Mem_Read+0x24c>)
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f001 fe38 	bl	8003540 <I2C_WaitOnFlagUntilTimeout>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d008      	beq.n	80018e8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e13c      	b.n	8001b54 <HAL_I2C_Mem_Read+0x4bc>
 80018da:	bf00      	nop
 80018dc:	00100002 	.word	0x00100002
 80018e0:	ffff0000 	.word	0xffff0000
 80018e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001918:	3b01      	subs	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001924:	b29b      	uxth	r3, r3
 8001926:	3b01      	subs	r3, #1
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800192e:	b662      	cpsie	i
}
 8001930:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	691a      	ldr	r2, [r3, #16]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195a:	b29b      	uxth	r3, r3
 800195c:	3b01      	subs	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001964:	e0e2      	b.n	8001b2c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196c:	2200      	movs	r2, #0
 800196e:	497b      	ldr	r1, [pc, #492]	; (8001b5c <HAL_I2C_Mem_Read+0x4c4>)
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f001 fde5 	bl	8003540 <I2C_WaitOnFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0e9      	b.n	8001b54 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800198e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80019c6:	4b66      	ldr	r3, [pc, #408]	; (8001b60 <HAL_I2C_Mem_Read+0x4c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	08db      	lsrs	r3, r3, #3
 80019cc:	4a65      	ldr	r2, [pc, #404]	; (8001b64 <HAL_I2C_Mem_Read+0x4cc>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0a1a      	lsrs	r2, r3, #8
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	00da      	lsls	r2, r3, #3
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d118      	bne.n	8001a1e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2220      	movs	r2, #32
 80019f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f043 0220 	orr.w	r2, r3, #32
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001a0e:	b662      	cpsie	i
}
 8001a10:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e09a      	b.n	8001b54 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d1d9      	bne.n	80019e0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a6e:	b662      	cpsie	i
}
 8001a70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001aa4:	e042      	b.n	8001b2c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f001 fedc 	bl	8003868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e04c      	b.n	8001b54 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d118      	bne.n	8001b2c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f47f ae94 	bne.w	800185e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001b52:	2302      	movs	r3, #2
  }
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	00010004 	.word	0x00010004
 8001b60:	20000000 	.word	0x20000000
 8001b64:	14f8b589 	.word	0x14f8b589

08001b68 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	4608      	mov	r0, r1
 8001b72:	4611      	mov	r1, r2
 8001b74:	461a      	mov	r2, r3
 8001b76:	4603      	mov	r3, r0
 8001b78:	817b      	strh	r3, [r7, #10]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	813b      	strh	r3, [r7, #8]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b20      	cmp	r3, #32
 8001b90:	f040 808a 	bne.w	8001ca8 <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001b94:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <HAL_I2C_Mem_Write_IT+0x14c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	08db      	lsrs	r3, r3, #3
 8001b9a:	4a47      	ldr	r2, [pc, #284]	; (8001cb8 <HAL_I2C_Mem_Write_IT+0x150>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	0a1a      	lsrs	r2, r3, #8
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009a      	lsls	r2, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d112      	bne.n	8001be0 <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f043 0220 	orr.w	r2, r3, #32
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e064      	b.n	8001caa <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d0df      	beq.n	8001bae <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_I2C_Mem_Write_IT+0x94>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e056      	b.n	8001caa <HAL_I2C_Mem_Write_IT+0x142>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d007      	beq.n	8001c22 <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0201 	orr.w	r2, r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c30:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2221      	movs	r2, #33	; 0x21
 8001c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2240      	movs	r2, #64	; 0x40
 8001c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6a3a      	ldr	r2, [r7, #32]
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4a16      	ldr	r2, [pc, #88]	; (8001cbc <HAL_I2C_Mem_Write_IT+0x154>)
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001c64:	897a      	ldrh	r2, [r7, #10]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8001c6a:	893a      	ldrh	r2, [r7, #8]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001ca2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e000      	b.n	8001caa <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8001ca8:	2302      	movs	r3, #2
  }
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	14f8b589 	.word	0x14f8b589
 8001cbc:	ffff0000 	.word	0xffff0000

08001cc0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ce0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	2b10      	cmp	r3, #16
 8001cee:	d003      	beq.n	8001cf8 <HAL_I2C_EV_IRQHandler+0x38>
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	2b40      	cmp	r3, #64	; 0x40
 8001cf4:	f040 80b1 	bne.w	8001e5a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10d      	bne.n	8001d2e <HAL_I2C_EV_IRQHandler+0x6e>
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001d18:	d003      	beq.n	8001d22 <HAL_I2C_EV_IRQHandler+0x62>
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001d20:	d101      	bne.n	8001d26 <HAL_I2C_EV_IRQHandler+0x66>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_I2C_EV_IRQHandler+0x68>
 8001d26:	2300      	movs	r3, #0
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	f000 8114 	beq.w	8001f56 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00b      	beq.n	8001d50 <HAL_I2C_EV_IRQHandler+0x90>
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f001 fe1b 	bl	800397e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fcb9 	bl	80026c0 <I2C_Master_SB>
 8001d4e:	e083      	b.n	8001e58 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <HAL_I2C_EV_IRQHandler+0xac>
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fd30 	bl	80027ca <I2C_Master_ADD10>
 8001d6a:	e075      	b.n	8001e58 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d008      	beq.n	8001d88 <HAL_I2C_EV_IRQHandler+0xc8>
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fd4b 	bl	800281c <I2C_Master_ADDR>
 8001d86:	e067      	b.n	8001e58 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d036      	beq.n	8001e00 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001da0:	f000 80db 	beq.w	8001f5a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00d      	beq.n	8001dca <HAL_I2C_EV_IRQHandler+0x10a>
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d008      	beq.n	8001dca <HAL_I2C_EV_IRQHandler+0x10a>
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d103      	bne.n	8001dca <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f92d 	bl	8002022 <I2C_MasterTransmit_TXE>
 8001dc8:	e046      	b.n	8001e58 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80c2 	beq.w	8001f5a <HAL_I2C_EV_IRQHandler+0x29a>
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80bc 	beq.w	8001f5a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001de2:	7bbb      	ldrb	r3, [r7, #14]
 8001de4:	2b21      	cmp	r3, #33	; 0x21
 8001de6:	d103      	bne.n	8001df0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f9b6 	bl	800215a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dee:	e0b4      	b.n	8001f5a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	2b40      	cmp	r3, #64	; 0x40
 8001df4:	f040 80b1 	bne.w	8001f5a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fa24 	bl	8002246 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dfe:	e0ac      	b.n	8001f5a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e0e:	f000 80a4 	beq.w	8001f5a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00d      	beq.n	8001e38 <HAL_I2C_EV_IRQHandler+0x178>
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d008      	beq.n	8001e38 <HAL_I2C_EV_IRQHandler+0x178>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d103      	bne.n	8001e38 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 faa0 	bl	8002376 <I2C_MasterReceive_RXNE>
 8001e36:	e00f      	b.n	8001e58 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 808b 	beq.w	8001f5a <HAL_I2C_EV_IRQHandler+0x29a>
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8085 	beq.w	8001f5a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fb4b 	bl	80024ec <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e56:	e080      	b.n	8001f5a <HAL_I2C_EV_IRQHandler+0x29a>
 8001e58:	e07f      	b.n	8001f5a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	e007      	b.n	8001e7c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d011      	beq.n	8001eaa <HAL_I2C_EV_IRQHandler+0x1ea>
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00c      	beq.n	8001eaa <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001ea0:	69b9      	ldr	r1, [r7, #24]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 ff11 	bl	8002cca <I2C_Slave_ADDR>
 8001ea8:	e05a      	b.n	8001f60 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_I2C_EV_IRQHandler+0x206>
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 ff4c 	bl	8002d5c <I2C_Slave_STOPF>
 8001ec4:	e04c      	b.n	8001f60 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	2b21      	cmp	r3, #33	; 0x21
 8001eca:	d002      	beq.n	8001ed2 <HAL_I2C_EV_IRQHandler+0x212>
 8001ecc:	7bbb      	ldrb	r3, [r7, #14]
 8001ece:	2b29      	cmp	r3, #41	; 0x29
 8001ed0:	d120      	bne.n	8001f14 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00d      	beq.n	8001ef8 <HAL_I2C_EV_IRQHandler+0x238>
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_I2C_EV_IRQHandler+0x238>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d103      	bne.n	8001ef8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fe2e 	bl	8002b52 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ef6:	e032      	b.n	8001f5e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d02d      	beq.n	8001f5e <HAL_I2C_EV_IRQHandler+0x29e>
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d028      	beq.n	8001f5e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 fe5d 	bl	8002bcc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f12:	e024      	b.n	8001f5e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00d      	beq.n	8001f3a <HAL_I2C_EV_IRQHandler+0x27a>
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_I2C_EV_IRQHandler+0x27a>
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d103      	bne.n	8001f3a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fe6a 	bl	8002c0c <I2C_SlaveReceive_RXNE>
 8001f38:	e012      	b.n	8001f60 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00d      	beq.n	8001f60 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d008      	beq.n	8001f60 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fe9a 	bl	8002c88 <I2C_SlaveReceive_BTF>
 8001f54:	e004      	b.n	8001f60 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001f56:	bf00      	nop
 8001f58:	e002      	b.n	8001f60 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f5a:	bf00      	nop
 8001f5c:	e000      	b.n	8001f60 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f5e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f60:	3720      	adds	r7, #32
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	70fb      	strb	r3, [r7, #3]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr

08001fda <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr

08001ffe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002030:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002038:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002044:	2b00      	cmp	r3, #0
 8002046:	d150      	bne.n	80020ea <I2C_MasterTransmit_TXE+0xc8>
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	2b21      	cmp	r3, #33	; 0x21
 800204c:	d14d      	bne.n	80020ea <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d01d      	beq.n	8002090 <I2C_MasterTransmit_TXE+0x6e>
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b20      	cmp	r3, #32
 8002058:	d01a      	beq.n	8002090 <I2C_MasterTransmit_TXE+0x6e>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002060:	d016      	beq.n	8002090 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002070:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2211      	movs	r2, #17
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff6c 	bl	8001f66 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800208e:	e060      	b.n	8002152 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800209e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ae:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b40      	cmp	r3, #64	; 0x40
 80020c8:	d107      	bne.n	80020da <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ff81 	bl	8001fda <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020d8:	e03b      	b.n	8002152 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ff3f 	bl	8001f66 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020e8:	e033      	b.n	8002152 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	2b21      	cmp	r3, #33	; 0x21
 80020ee:	d005      	beq.n	80020fc <I2C_MasterTransmit_TXE+0xda>
 80020f0:	7bbb      	ldrb	r3, [r7, #14]
 80020f2:	2b40      	cmp	r3, #64	; 0x40
 80020f4:	d12d      	bne.n	8002152 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	2b22      	cmp	r3, #34	; 0x22
 80020fa:	d12a      	bne.n	8002152 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d108      	bne.n	8002118 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002114:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002116:	e01c      	b.n	8002152 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b40      	cmp	r3, #64	; 0x40
 8002122:	d103      	bne.n	800212c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f88e 	bl	8002246 <I2C_MemoryTransmit_TXE_BTF>
}
 800212a:	e012      	b.n	8002152 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002150:	e7ff      	b.n	8002152 <I2C_MasterTransmit_TXE+0x130>
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b21      	cmp	r3, #33	; 0x21
 8002172:	d164      	bne.n	800223e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d012      	beq.n	80021a4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	781a      	ldrb	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80021a2:	e04c      	b.n	800223e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d01d      	beq.n	80021e6 <I2C_MasterTransmit_BTF+0x8c>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d01a      	beq.n	80021e6 <I2C_MasterTransmit_BTF+0x8c>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021b6:	d016      	beq.n	80021e6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021c6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2211      	movs	r2, #17
 80021cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fec1 	bl	8001f66 <HAL_I2C_MasterTxCpltCallback>
}
 80021e4:	e02b      	b.n	800223e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021f4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002204:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b40      	cmp	r3, #64	; 0x40
 800221e:	d107      	bne.n	8002230 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff fed6 	bl	8001fda <HAL_I2C_MemTxCpltCallback>
}
 800222e:	e006      	b.n	800223e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fe94 	bl	8001f66 <HAL_I2C_MasterTxCpltCallback>
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002254:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225a:	2b00      	cmp	r3, #0
 800225c:	d11d      	bne.n	800229a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002262:	2b01      	cmp	r3, #1
 8002264:	d10b      	bne.n	800227e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800226a:	b2da      	uxtb	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002276:	1c9a      	adds	r2, r3, #2
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800227c:	e077      	b.n	800236e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002282:	b29b      	uxth	r3, r3
 8002284:	121b      	asrs	r3, r3, #8
 8002286:	b2da      	uxtb	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002298:	e069      	b.n	800236e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d10b      	bne.n	80022ba <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022b8:	e059      	b.n	800236e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d152      	bne.n	8002368 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	2b22      	cmp	r3, #34	; 0x22
 80022c6:	d10d      	bne.n	80022e4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022d6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022e2:	e044      	b.n	800236e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d015      	beq.n	800231a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	2b21      	cmp	r3, #33	; 0x21
 80022f2:	d112      	bne.n	800231a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002318:	e029      	b.n	800236e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d124      	bne.n	800236e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	2b21      	cmp	r3, #33	; 0x21
 8002328:	d121      	bne.n	800236e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002338:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002348:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff fe3a 	bl	8001fda <HAL_I2C_MemTxCpltCallback>
}
 8002366:	e002      	b.n	800236e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff f981 	bl	8001670 <I2C_Flush_DR>
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b22      	cmp	r3, #34	; 0x22
 8002388:	f040 80ac 	bne.w	80024e4 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d921      	bls.n	80023de <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	f040 808c 	bne.w	80024e4 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023da:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80023dc:	e082      	b.n	80024e4 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d075      	beq.n	80024d2 <I2C_MasterReceive_RXNE+0x15c>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d002      	beq.n	80023f2 <I2C_MasterReceive_RXNE+0x7c>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d16f      	bne.n	80024d2 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f001 fa06 	bl	8003804 <I2C_WaitOnSTOPRequestThroughIT>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d142      	bne.n	8002484 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800240c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800241c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b40      	cmp	r3, #64	; 0x40
 8002456:	d10a      	bne.n	800246e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fdc0 	bl	8001fec <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800246c:	e03a      	b.n	80024e4 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2212      	movs	r2, #18
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff fd7b 	bl	8001f78 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002482:	e02f      	b.n	80024e4 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002492:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff fd97 	bl	8001ffe <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024d0:	e008      	b.n	80024e4 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e0:	605a      	str	r2, [r3, #4]
}
 80024e2:	e7ff      	b.n	80024e4 <I2C_MasterReceive_RXNE+0x16e>
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b04      	cmp	r3, #4
 8002502:	d11b      	bne.n	800253c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002512:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800253a:	e0bd      	b.n	80026b8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b03      	cmp	r3, #3
 8002544:	d129      	bne.n	800259a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002554:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b04      	cmp	r3, #4
 800255a:	d00a      	beq.n	8002572 <I2C_MasterReceive_BTF+0x86>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d007      	beq.n	8002572 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002570:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002598:	e08e      	b.n	80026b8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d176      	bne.n	8002692 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d002      	beq.n	80025b0 <I2C_MasterReceive_BTF+0xc4>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	d108      	bne.n	80025c2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e019      	b.n	80025f6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d002      	beq.n	80025ce <I2C_MasterReceive_BTF+0xe2>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d108      	bne.n	80025e0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e00a      	b.n	80025f6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	d007      	beq.n	80025f6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002650:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b40      	cmp	r3, #64	; 0x40
 8002664:	d10a      	bne.n	800267c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff fcb9 	bl	8001fec <HAL_I2C_MemRxCpltCallback>
}
 800267a:	e01d      	b.n	80026b8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2212      	movs	r2, #18
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fc74 	bl	8001f78 <HAL_I2C_MasterRxCpltCallback>
}
 8002690:	e012      	b.n	80026b8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d117      	bne.n	8002704 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026ec:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80026ee:	e067      	b.n	80027c0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	611a      	str	r2, [r3, #16]
}
 8002702:	e05d      	b.n	80027c0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800270c:	d133      	bne.n	8002776 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b21      	cmp	r3, #33	; 0x21
 8002718:	d109      	bne.n	800272e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800272a:	611a      	str	r2, [r3, #16]
 800272c:	e008      	b.n	8002740 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	b2da      	uxtb	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <I2C_Master_SB+0x92>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	2b00      	cmp	r3, #0
 8002750:	d108      	bne.n	8002764 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	2b00      	cmp	r3, #0
 8002758:	d032      	beq.n	80027c0 <I2C_Master_SB+0x100>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	d02d      	beq.n	80027c0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002772:	605a      	str	r2, [r3, #4]
}
 8002774:	e024      	b.n	80027c0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10e      	bne.n	800279c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	b29b      	uxth	r3, r3
 8002784:	11db      	asrs	r3, r3, #7
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f003 0306 	and.w	r3, r3, #6
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f063 030f 	orn	r3, r3, #15
 8002792:	b2da      	uxtb	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	611a      	str	r2, [r3, #16]
}
 800279a:	e011      	b.n	80027c0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d10d      	bne.n	80027c0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	11db      	asrs	r3, r3, #7
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f003 0306 	and.w	r3, r3, #6
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f063 030e 	orn	r3, r3, #14
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	611a      	str	r2, [r3, #16]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <I2C_Master_ADD10+0x26>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d108      	bne.n	8002802 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00c      	beq.n	8002812 <I2C_Master_ADD10+0x48>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002810:	605a      	str	r2, [r3, #4]
  }
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800281c:	b480      	push	{r7}
 800281e:	b091      	sub	sp, #68	; 0x44
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800282a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b22      	cmp	r3, #34	; 0x22
 8002844:	f040 8174 	bne.w	8002b30 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10f      	bne.n	8002870 <I2C_Master_ADDR+0x54>
 8002850:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d10b      	bne.n	8002870 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002858:	2300      	movs	r3, #0
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	633b      	str	r3, [r7, #48]	; 0x30
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	633b      	str	r3, [r7, #48]	; 0x30
 800286c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286e:	e16b      	b.n	8002b48 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002874:	2b00      	cmp	r3, #0
 8002876:	d11d      	bne.n	80028b4 <I2C_Master_ADDR+0x98>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002880:	d118      	bne.n	80028b4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002882:	2300      	movs	r3, #0
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	651a      	str	r2, [r3, #80]	; 0x50
 80028b2:	e149      	b.n	8002b48 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d113      	bne.n	80028e6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028be:	2300      	movs	r3, #0
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	e120      	b.n	8002b28 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	f040 808a 	bne.w	8002a06 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028f8:	d137      	bne.n	800296a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002908:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002918:	d113      	bne.n	8002942 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002928:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292a:	2300      	movs	r3, #0
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	e0f2      	b.n	8002b28 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	623b      	str	r3, [r7, #32]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	623b      	str	r3, [r7, #32]
 8002956:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e0de      	b.n	8002b28 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296c:	2b08      	cmp	r3, #8
 800296e:	d02e      	beq.n	80029ce <I2C_Master_ADDR+0x1b2>
 8002970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002972:	2b20      	cmp	r3, #32
 8002974:	d02b      	beq.n	80029ce <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002978:	2b12      	cmp	r3, #18
 800297a:	d102      	bne.n	8002982 <I2C_Master_ADDR+0x166>
 800297c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297e:	2b01      	cmp	r3, #1
 8002980:	d125      	bne.n	80029ce <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002984:	2b04      	cmp	r3, #4
 8002986:	d00e      	beq.n	80029a6 <I2C_Master_ADDR+0x18a>
 8002988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298a:	2b02      	cmp	r3, #2
 800298c:	d00b      	beq.n	80029a6 <I2C_Master_ADDR+0x18a>
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	2b10      	cmp	r3, #16
 8002992:	d008      	beq.n	80029a6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	e007      	b.n	80029b6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	e0ac      	b.n	8002b28 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029dc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e090      	b.n	8002b28 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d158      	bne.n	8002ac2 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d021      	beq.n	8002a5a <I2C_Master_ADDR+0x23e>
 8002a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d01e      	beq.n	8002a5a <I2C_Master_ADDR+0x23e>
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d01b      	beq.n	8002a5a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a30:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	e012      	b.n	8002a80 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a68:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a8e:	d14b      	bne.n	8002b28 <I2C_Master_ADDR+0x30c>
 8002a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a96:	d00b      	beq.n	8002ab0 <I2C_Master_ADDR+0x294>
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d008      	beq.n	8002ab0 <I2C_Master_ADDR+0x294>
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d005      	beq.n	8002ab0 <I2C_Master_ADDR+0x294>
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d002      	beq.n	8002ab0 <I2C_Master_ADDR+0x294>
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d13b      	bne.n	8002b28 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	e032      	b.n	8002b28 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ad0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae0:	d117      	bne.n	8002b12 <I2C_Master_ADDR+0x2f6>
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ae8:	d00b      	beq.n	8002b02 <I2C_Master_ADDR+0x2e6>
 8002aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d008      	beq.n	8002b02 <I2C_Master_ADDR+0x2e6>
 8002af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d005      	beq.n	8002b02 <I2C_Master_ADDR+0x2e6>
 8002af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d002      	beq.n	8002b02 <I2C_Master_ADDR+0x2e6>
 8002afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d107      	bne.n	8002b12 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002b2e:	e00b      	b.n	8002b48 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b30:	2300      	movs	r3, #0
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
}
 8002b46:	e7ff      	b.n	8002b48 <I2C_Master_ADDR+0x32c>
 8002b48:	bf00      	nop
 8002b4a:	3744      	adds	r7, #68	; 0x44
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b60:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d02b      	beq.n	8002bc4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	781a      	ldrb	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d114      	bne.n	8002bc4 <I2C_SlaveTransmit_TXE+0x72>
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	2b29      	cmp	r3, #41	; 0x29
 8002b9e:	d111      	bne.n	8002bc4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2221      	movs	r2, #33	; 0x21
 8002bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2228      	movs	r2, #40	; 0x28
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff f9e3 	bl	8001f8a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d011      	beq.n	8002c02 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d02c      	beq.n	8002c80 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d114      	bne.n	8002c80 <I2C_SlaveReceive_RXNE+0x74>
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b2a      	cmp	r3, #42	; 0x2a
 8002c5a:	d111      	bne.n	8002c80 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2222      	movs	r2, #34	; 0x22
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2228      	movs	r2, #40	; 0x28
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff f98e 	bl	8001f9c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d012      	beq.n	8002cc0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ce4:	2b28      	cmp	r3, #40	; 0x28
 8002ce6:	d125      	bne.n	8002d34 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d103      	bne.n	8002d18 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	81bb      	strh	r3, [r7, #12]
 8002d16:	e002      	b.n	8002d1e <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d26:	89ba      	ldrh	r2, [r7, #12]
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff f93e 	bl	8001fae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d32:	e00e      	b.n	8002d52 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d34:	2300      	movs	r3, #0
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db8:	d172      	bne.n	8002ea0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b22      	cmp	r3, #34	; 0x22
 8002dbe:	d002      	beq.n	8002dc6 <I2C_Slave_STOPF+0x6a>
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8002dc4:	d135      	bne.n	8002e32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f043 0204 	orr.w	r2, r3, #4
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe f948 	bl	8001094 <HAL_DMA_GetState>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d049      	beq.n	8002e9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	4a69      	ldr	r2, [pc, #420]	; (8002fb4 <I2C_Slave_STOPF+0x258>)
 8002e10:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe f8c4 	bl	8000fa4 <HAL_DMA_Abort_IT>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d03d      	beq.n	8002e9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e30:	e035      	b.n	8002e9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f043 0204 	orr.w	r2, r3, #4
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe f912 	bl	8001094 <HAL_DMA_GetState>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d014      	beq.n	8002ea0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	4a4e      	ldr	r2, [pc, #312]	; (8002fb4 <I2C_Slave_STOPF+0x258>)
 8002e7c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe f88e 	bl	8000fa4 <HAL_DMA_Abort_IT>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4798      	blx	r3
 8002e9c:	e000      	b.n	8002ea0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d03e      	beq.n	8002f28 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d112      	bne.n	8002ede <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	d112      	bne.n	8002f12 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f043 0204 	orr.w	r2, r3, #4
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f843 	bl	8002fbc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f36:	e039      	b.n	8002fac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8002f3c:	d109      	bne.n	8002f52 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2228      	movs	r2, #40	; 0x28
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff f825 	bl	8001f9c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b28      	cmp	r3, #40	; 0x28
 8002f5c:	d111      	bne.n	8002f82 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <I2C_Slave_STOPF+0x25c>)
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff f824 	bl	8001fc8 <HAL_I2C_ListenCpltCallback>
}
 8002f80:	e014      	b.n	8002fac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	2b22      	cmp	r3, #34	; 0x22
 8002f88:	d002      	beq.n	8002f90 <I2C_Slave_STOPF+0x234>
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b22      	cmp	r3, #34	; 0x22
 8002f8e:	d10d      	bne.n	8002fac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7fe fff8 	bl	8001f9c <HAL_I2C_SlaveRxCpltCallback>
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	080033f1 	.word	0x080033f1
 8002fb8:	ffff0000 	.word	0xffff0000

08002fbc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fd2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002fd4:	7bbb      	ldrb	r3, [r7, #14]
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d002      	beq.n	8002fe0 <I2C_ITError+0x24>
 8002fda:	7bbb      	ldrb	r3, [r7, #14]
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d10a      	bne.n	8002ff6 <I2C_ITError+0x3a>
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b22      	cmp	r3, #34	; 0x22
 8002fe4:	d107      	bne.n	8002ff6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ffc:	2b28      	cmp	r3, #40	; 0x28
 8002ffe:	d107      	bne.n	8003010 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2228      	movs	r2, #40	; 0x28
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800300e:	e015      	b.n	800303c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800301e:	d00a      	beq.n	8003036 <I2C_ITError+0x7a>
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b60      	cmp	r3, #96	; 0x60
 8003024:	d007      	beq.n	8003036 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304a:	d162      	bne.n	8003112 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800305a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d020      	beq.n	80030ac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306e:	4a6a      	ldr	r2, [pc, #424]	; (8003218 <I2C_ITError+0x25c>)
 8003070:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd ff94 	bl	8000fa4 <HAL_DMA_Abort_IT>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8089 	beq.w	8003196 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030a6:	4610      	mov	r0, r2
 80030a8:	4798      	blx	r3
 80030aa:	e074      	b.n	8003196 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	4a59      	ldr	r2, [pc, #356]	; (8003218 <I2C_ITError+0x25c>)
 80030b2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fd ff73 	bl	8000fa4 <HAL_DMA_Abort_IT>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d068      	beq.n	8003196 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ce:	2b40      	cmp	r3, #64	; 0x40
 80030d0:	d10b      	bne.n	80030ea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800310c:	4610      	mov	r0, r2
 800310e:	4798      	blx	r3
 8003110:	e041      	b.n	8003196 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b60      	cmp	r3, #96	; 0x60
 800311c:	d125      	bne.n	800316a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003136:	2b40      	cmp	r3, #64	; 0x40
 8003138:	d10b      	bne.n	8003152 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0201 	bic.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe ff54 	bl	8002010 <HAL_I2C_AbortCpltCallback>
 8003168:	e015      	b.n	8003196 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	d10b      	bne.n	8003190 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7fe ff34 	bl	8001ffe <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10e      	bne.n	80031c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d109      	bne.n	80031c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d104      	bne.n	80031c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d007      	beq.n	80031d4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031d2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031da:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d113      	bne.n	8003210 <I2C_ITError+0x254>
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2b28      	cmp	r3, #40	; 0x28
 80031ec:	d110      	bne.n	8003210 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a0a      	ldr	r2, [pc, #40]	; (800321c <I2C_ITError+0x260>)
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe fedc 	bl	8001fc8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	080033f1 	.word	0x080033f1
 800321c:	ffff0000 	.word	0xffff0000

08003220 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	4608      	mov	r0, r1
 800322a:	4611      	mov	r1, r2
 800322c:	461a      	mov	r2, r3
 800322e:	4603      	mov	r3, r0
 8003230:	817b      	strh	r3, [r7, #10]
 8003232:	460b      	mov	r3, r1
 8003234:	813b      	strh	r3, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003248:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003258:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	2200      	movs	r2, #0
 8003262:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f96a 	bl	8003540 <I2C_WaitOnFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003280:	d103      	bne.n	800328a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0aa      	b.n	80033e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800328e:	897b      	ldrh	r3, [r7, #10]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800329c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	6a3a      	ldr	r2, [r7, #32]
 80032a2:	4952      	ldr	r1, [pc, #328]	; (80033ec <I2C_RequestMemoryRead+0x1cc>)
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f9c5 	bl	8003634 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e097      	b.n	80033e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032cc:	6a39      	ldr	r1, [r7, #32]
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fa50 	bl	8003774 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00d      	beq.n	80032f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d107      	bne.n	80032f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e076      	b.n	80033e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d105      	bne.n	8003308 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032fc:	893b      	ldrh	r3, [r7, #8]
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	611a      	str	r2, [r3, #16]
 8003306:	e021      	b.n	800334c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003308:	893b      	ldrh	r3, [r7, #8]
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	b29b      	uxth	r3, r3
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003318:	6a39      	ldr	r1, [r7, #32]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fa2a 	bl	8003774 <I2C_WaitOnTXEFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b04      	cmp	r3, #4
 800332c:	d107      	bne.n	800333e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e050      	b.n	80033e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003342:	893b      	ldrh	r3, [r7, #8]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800334c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334e:	6a39      	ldr	r1, [r7, #32]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fa0f 	bl	8003774 <I2C_WaitOnTXEFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00d      	beq.n	8003378 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	2b04      	cmp	r3, #4
 8003362:	d107      	bne.n	8003374 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003372:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e035      	b.n	80033e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003386:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	2200      	movs	r2, #0
 8003390:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f8d3 	bl	8003540 <I2C_WaitOnFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00d      	beq.n	80033bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ae:	d103      	bne.n	80033b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e013      	b.n	80033e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033bc:	897b      	ldrh	r3, [r7, #10]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	6a3a      	ldr	r2, [r7, #32]
 80033d0:	4906      	ldr	r1, [pc, #24]	; (80033ec <I2C_RequestMemoryRead+0x1cc>)
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f92e 	bl	8003634 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	00010002 	.word	0x00010002

080033f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800340a:	4b4b      	ldr	r3, [pc, #300]	; (8003538 <I2C_DMAAbort+0x148>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	08db      	lsrs	r3, r3, #3
 8003410:	4a4a      	ldr	r2, [pc, #296]	; (800353c <I2C_DMAAbort+0x14c>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	0a1a      	lsrs	r2, r3, #8
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	00da      	lsls	r2, r3, #3
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f043 0220 	orr.w	r2, r3, #32
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003436:	e00a      	b.n	800344e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3b01      	subs	r3, #1
 800343c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800344c:	d0ea      	beq.n	8003424 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345a:	2200      	movs	r2, #0
 800345c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	2200      	movs	r2, #0
 800346c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2200      	movs	r2, #0
 8003482:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003490:	2200      	movs	r2, #0
 8003492:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	2200      	movs	r2, #0
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0201 	bic.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b60      	cmp	r3, #96	; 0x60
 80034be:	d10e      	bne.n	80034de <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2200      	movs	r2, #0
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034d6:	6978      	ldr	r0, [r7, #20]
 80034d8:	f7fe fd9a 	bl	8002010 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034dc:	e027      	b.n	800352e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034de:	7cfb      	ldrb	r3, [r7, #19]
 80034e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034e4:	2b28      	cmp	r3, #40	; 0x28
 80034e6:	d117      	bne.n	8003518 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003506:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2200      	movs	r2, #0
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2228      	movs	r2, #40	; 0x28
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003516:	e007      	b.n	8003528 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003528:	6978      	ldr	r0, [r7, #20]
 800352a:	f7fe fd68 	bl	8001ffe <HAL_I2C_ErrorCallback>
}
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000000 	.word	0x20000000
 800353c:	14f8b589 	.word	0x14f8b589

08003540 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003550:	e048      	b.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d044      	beq.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355a:	f7fd fbd1 	bl	8000d00 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d302      	bcc.n	8003570 <I2C_WaitOnFlagUntilTimeout+0x30>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d139      	bne.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d10d      	bne.n	8003596 <I2C_WaitOnFlagUntilTimeout+0x56>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	43da      	mvns	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4013      	ands	r3, r2
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf0c      	ite	eq
 800358c:	2301      	moveq	r3, #1
 800358e:	2300      	movne	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	e00c      	b.n	80035b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	43da      	mvns	r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4013      	ands	r3, r2
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	461a      	mov	r2, r3
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d116      	bne.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e023      	b.n	800362c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	0c1b      	lsrs	r3, r3, #16
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d10d      	bne.n	800360a <I2C_WaitOnFlagUntilTimeout+0xca>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	43da      	mvns	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	4013      	ands	r3, r2
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	e00c      	b.n	8003624 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	43da      	mvns	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4013      	ands	r3, r2
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	429a      	cmp	r2, r3
 8003628:	d093      	beq.n	8003552 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003642:	e071      	b.n	8003728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003652:	d123      	bne.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003662:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800366c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f043 0204 	orr.w	r2, r3, #4
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e067      	b.n	800376c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d041      	beq.n	8003728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a4:	f7fd fb2c 	bl	8000d00 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d302      	bcc.n	80036ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d136      	bne.n	8003728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d10c      	bne.n	80036de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	43da      	mvns	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4013      	ands	r3, r2
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bf14      	ite	ne
 80036d6:	2301      	movne	r3, #1
 80036d8:	2300      	moveq	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	e00b      	b.n	80036f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	43da      	mvns	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4013      	ands	r3, r2
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf14      	ite	ne
 80036f0:	2301      	movne	r3, #1
 80036f2:	2300      	moveq	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d016      	beq.n	8003728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	f043 0220 	orr.w	r2, r3, #32
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e021      	b.n	800376c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	0c1b      	lsrs	r3, r3, #16
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d10c      	bne.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	43da      	mvns	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4013      	ands	r3, r2
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	e00b      	b.n	8003764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	43da      	mvns	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4013      	ands	r3, r2
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	bf14      	ite	ne
 800375e:	2301      	movne	r3, #1
 8003760:	2300      	moveq	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	f47f af6d 	bne.w	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003780:	e034      	b.n	80037ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f8cd 	bl	8003922 <I2C_IsAcknowledgeFailed>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e034      	b.n	80037fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d028      	beq.n	80037ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379a:	f7fd fab1 	bl	8000d00 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d302      	bcc.n	80037b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d11d      	bne.n	80037ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ba:	2b80      	cmp	r3, #128	; 0x80
 80037bc:	d016      	beq.n	80037ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	f043 0220 	orr.w	r2, r3, #32
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e007      	b.n	80037fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f6:	2b80      	cmp	r3, #128	; 0x80
 80037f8:	d1c3      	bne.n	8003782 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003810:	4b13      	ldr	r3, [pc, #76]	; (8003860 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	08db      	lsrs	r3, r3, #3
 8003816:	4a13      	ldr	r2, [pc, #76]	; (8003864 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	0a1a      	lsrs	r2, r3, #8
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3b01      	subs	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d107      	bne.n	8003842 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f043 0220 	orr.w	r2, r3, #32
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e008      	b.n	8003854 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003850:	d0e9      	beq.n	8003826 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000000 	.word	0x20000000
 8003864:	14f8b589 	.word	0x14f8b589

08003868 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003874:	e049      	b.n	800390a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b10      	cmp	r3, #16
 8003882:	d119      	bne.n	80038b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0210 	mvn.w	r2, #16
 800388c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e030      	b.n	800391a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b8:	f7fd fa22 	bl	8000d00 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d302      	bcc.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d11d      	bne.n	800390a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d8:	2b40      	cmp	r3, #64	; 0x40
 80038da:	d016      	beq.n	800390a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f043 0220 	orr.w	r2, r3, #32
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e007      	b.n	800391a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d1ae      	bne.n	8003876 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003938:	d11b      	bne.n	8003972 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003942:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800398e:	d103      	bne.n	8003998 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003996:	e007      	b.n	80039a8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80039a0:	d102      	bne.n	80039a8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2208      	movs	r2, #8
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e272      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 8087 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039d4:	4b92      	ldr	r3, [pc, #584]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d00c      	beq.n	80039fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039e0:	4b8f      	ldr	r3, [pc, #572]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d112      	bne.n	8003a12 <HAL_RCC_OscConfig+0x5e>
 80039ec:	4b8c      	ldr	r3, [pc, #560]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d10b      	bne.n	8003a12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fa:	4b89      	ldr	r3, [pc, #548]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d06c      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x12c>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d168      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e24c      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCC_OscConfig+0x76>
 8003a1c:	4b80      	ldr	r3, [pc, #512]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a7f      	ldr	r2, [pc, #508]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	e02e      	b.n	8003a88 <HAL_RCC_OscConfig+0xd4>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x98>
 8003a32:	4b7b      	ldr	r3, [pc, #492]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a7a      	ldr	r2, [pc, #488]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b78      	ldr	r3, [pc, #480]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a77      	ldr	r2, [pc, #476]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e01d      	b.n	8003a88 <HAL_RCC_OscConfig+0xd4>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0xbc>
 8003a56:	4b72      	ldr	r3, [pc, #456]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a71      	ldr	r2, [pc, #452]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b6f      	ldr	r3, [pc, #444]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a6e      	ldr	r2, [pc, #440]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0xd4>
 8003a70:	4b6b      	ldr	r3, [pc, #428]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a6a      	ldr	r2, [pc, #424]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b68      	ldr	r3, [pc, #416]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a67      	ldr	r2, [pc, #412]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fd f936 	bl	8000d00 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fd f932 	bl	8000d00 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e200      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	4b5d      	ldr	r3, [pc, #372]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0xe4>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fd f922 	bl	8000d00 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fd f91e 	bl	8000d00 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e1ec      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	4b53      	ldr	r3, [pc, #332]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x10c>
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d063      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aee:	4b4c      	ldr	r3, [pc, #304]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003afa:	4b49      	ldr	r3, [pc, #292]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d11c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x18c>
 8003b06:	4b46      	ldr	r3, [pc, #280]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d116      	bne.n	8003b40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b12:	4b43      	ldr	r3, [pc, #268]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x176>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d001      	beq.n	8003b2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e1c0      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2a:	4b3d      	ldr	r3, [pc, #244]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4939      	ldr	r1, [pc, #228]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	e03a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b48:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4e:	f7fd f8d7 	bl	8000d00 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b56:	f7fd f8d3 	bl	8000d00 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e1a1      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b74:	4b2a      	ldr	r3, [pc, #168]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4927      	ldr	r1, [pc, #156]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]
 8003b88:	e015      	b.n	8003bb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b8a:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fd f8b6 	bl	8000d00 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b98:	f7fd f8b2 	bl	8000d00 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e180      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d03a      	beq.n	8003c38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d019      	beq.n	8003bfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bca:	4b17      	ldr	r3, [pc, #92]	; (8003c28 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd0:	f7fd f896 	bl	8000d00 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd8:	f7fd f892 	bl	8000d00 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e160      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	f000 face 	bl	8004198 <RCC_Delay>
 8003bfc:	e01c      	b.n	8003c38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <HAL_RCC_OscConfig+0x274>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c04:	f7fd f87c 	bl	8000d00 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c0a:	e00f      	b.n	8003c2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0c:	f7fd f878 	bl	8000d00 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d908      	bls.n	8003c2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e146      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	42420000 	.word	0x42420000
 8003c28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c2c:	4b92      	ldr	r3, [pc, #584]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e9      	bne.n	8003c0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80a6 	beq.w	8003d92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4a:	4b8b      	ldr	r3, [pc, #556]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10d      	bne.n	8003c72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	4b88      	ldr	r3, [pc, #544]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	4a87      	ldr	r2, [pc, #540]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c60:	61d3      	str	r3, [r2, #28]
 8003c62:	4b85      	ldr	r3, [pc, #532]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c72:	4b82      	ldr	r3, [pc, #520]	; (8003e7c <HAL_RCC_OscConfig+0x4c8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d118      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7e:	4b7f      	ldr	r3, [pc, #508]	; (8003e7c <HAL_RCC_OscConfig+0x4c8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a7e      	ldr	r2, [pc, #504]	; (8003e7c <HAL_RCC_OscConfig+0x4c8>)
 8003c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8a:	f7fd f839 	bl	8000d00 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c92:	f7fd f835 	bl	8000d00 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b64      	cmp	r3, #100	; 0x64
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e103      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca4:	4b75      	ldr	r3, [pc, #468]	; (8003e7c <HAL_RCC_OscConfig+0x4c8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d106      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x312>
 8003cb8:	4b6f      	ldr	r3, [pc, #444]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	4a6e      	ldr	r2, [pc, #440]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6213      	str	r3, [r2, #32]
 8003cc4:	e02d      	b.n	8003d22 <HAL_RCC_OscConfig+0x36e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x334>
 8003cce:	4b6a      	ldr	r3, [pc, #424]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	4a69      	ldr	r2, [pc, #420]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	6213      	str	r3, [r2, #32]
 8003cda:	4b67      	ldr	r3, [pc, #412]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	4a66      	ldr	r2, [pc, #408]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003ce0:	f023 0304 	bic.w	r3, r3, #4
 8003ce4:	6213      	str	r3, [r2, #32]
 8003ce6:	e01c      	b.n	8003d22 <HAL_RCC_OscConfig+0x36e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2b05      	cmp	r3, #5
 8003cee:	d10c      	bne.n	8003d0a <HAL_RCC_OscConfig+0x356>
 8003cf0:	4b61      	ldr	r3, [pc, #388]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	4a60      	ldr	r2, [pc, #384]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cf6:	f043 0304 	orr.w	r3, r3, #4
 8003cfa:	6213      	str	r3, [r2, #32]
 8003cfc:	4b5e      	ldr	r3, [pc, #376]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	4a5d      	ldr	r2, [pc, #372]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6213      	str	r3, [r2, #32]
 8003d08:	e00b      	b.n	8003d22 <HAL_RCC_OscConfig+0x36e>
 8003d0a:	4b5b      	ldr	r3, [pc, #364]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	4a5a      	ldr	r2, [pc, #360]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	6213      	str	r3, [r2, #32]
 8003d16:	4b58      	ldr	r3, [pc, #352]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	4a57      	ldr	r2, [pc, #348]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d015      	beq.n	8003d56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2a:	f7fc ffe9 	bl	8000d00 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d32:	f7fc ffe5 	bl	8000d00 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e0b1      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	4b4b      	ldr	r3, [pc, #300]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0ee      	beq.n	8003d32 <HAL_RCC_OscConfig+0x37e>
 8003d54:	e014      	b.n	8003d80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d56:	f7fc ffd3 	bl	8000d00 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5c:	e00a      	b.n	8003d74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5e:	f7fc ffcf 	bl	8000d00 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e09b      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d74:	4b40      	ldr	r3, [pc, #256]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ee      	bne.n	8003d5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d105      	bne.n	8003d92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d86:	4b3c      	ldr	r3, [pc, #240]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4a3b      	ldr	r2, [pc, #236]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8087 	beq.w	8003eaa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d9c:	4b36      	ldr	r3, [pc, #216]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 030c 	and.w	r3, r3, #12
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d061      	beq.n	8003e6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d146      	bne.n	8003e3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db0:	4b33      	ldr	r3, [pc, #204]	; (8003e80 <HAL_RCC_OscConfig+0x4cc>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fc ffa3 	bl	8000d00 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fc ff9f 	bl	8000d00 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e06d      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd0:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de4:	d108      	bne.n	8003df8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003de6:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	4921      	ldr	r1, [pc, #132]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df8:	4b1f      	ldr	r3, [pc, #124]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a19      	ldr	r1, [r3, #32]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	491b      	ldr	r1, [pc, #108]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e10:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x4cc>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e16:	f7fc ff73 	bl	8000d00 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1e:	f7fc ff6f 	bl	8000d00 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e03d      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x46a>
 8003e3c:	e035      	b.n	8003eaa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3e:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <HAL_RCC_OscConfig+0x4cc>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fc ff5c 	bl	8000d00 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fc ff58 	bl	8000d00 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e026      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x498>
 8003e6a:	e01e      	b.n	8003eaa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e019      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_RCC_OscConfig+0x500>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d106      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d001      	beq.n	8003eaa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40021000 	.word	0x40021000

08003eb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0d0      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b6a      	ldr	r3, [pc, #424]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d910      	bls.n	8003efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b67      	ldr	r3, [pc, #412]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 0207 	bic.w	r2, r3, #7
 8003ee2:	4965      	ldr	r1, [pc, #404]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b63      	ldr	r3, [pc, #396]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0b8      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d020      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f14:	4b59      	ldr	r3, [pc, #356]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4a58      	ldr	r2, [pc, #352]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f2c:	4b53      	ldr	r3, [pc, #332]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	4a52      	ldr	r2, [pc, #328]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f38:	4b50      	ldr	r3, [pc, #320]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	494d      	ldr	r1, [pc, #308]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d040      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5e:	4b47      	ldr	r3, [pc, #284]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d115      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e07f      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f76:	4b41      	ldr	r3, [pc, #260]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e073      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f86:	4b3d      	ldr	r3, [pc, #244]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e06b      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f96:	4b39      	ldr	r3, [pc, #228]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f023 0203 	bic.w	r2, r3, #3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4936      	ldr	r1, [pc, #216]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fa8:	f7fc feaa 	bl	8000d00 <HAL_GetTick>
 8003fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb0:	f7fc fea6 	bl	8000d00 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e053      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc6:	4b2d      	ldr	r3, [pc, #180]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 020c 	and.w	r2, r3, #12
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d1eb      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd8:	4b27      	ldr	r3, [pc, #156]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d210      	bcs.n	8004008 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe6:	4b24      	ldr	r3, [pc, #144]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 0207 	bic.w	r2, r3, #7
 8003fee:	4922      	ldr	r1, [pc, #136]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e032      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004014:	4b19      	ldr	r3, [pc, #100]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4916      	ldr	r1, [pc, #88]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8004022:	4313      	orrs	r3, r2
 8004024:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004032:	4b12      	ldr	r3, [pc, #72]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	490e      	ldr	r1, [pc, #56]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004046:	f000 f821 	bl	800408c <HAL_RCC_GetSysClockFreq>
 800404a:	4602      	mov	r2, r0
 800404c:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	490a      	ldr	r1, [pc, #40]	; (8004080 <HAL_RCC_ClockConfig+0x1c8>)
 8004058:	5ccb      	ldrb	r3, [r1, r3]
 800405a:	fa22 f303 	lsr.w	r3, r2, r3
 800405e:	4a09      	ldr	r2, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1cc>)
 8004060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004062:	4b09      	ldr	r3, [pc, #36]	; (8004088 <HAL_RCC_ClockConfig+0x1d0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7fc fe08 	bl	8000c7c <HAL_InitTick>

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40022000 	.word	0x40022000
 800407c:	40021000 	.word	0x40021000
 8004080:	08008c18 	.word	0x08008c18
 8004084:	20000000 	.word	0x20000000
 8004088:	20000004 	.word	0x20000004

0800408c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	2300      	movs	r3, #0
 80040a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040a6:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <HAL_RCC_GetSysClockFreq+0x94>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d002      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x30>
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d003      	beq.n	80040c2 <HAL_RCC_GetSysClockFreq+0x36>
 80040ba:	e027      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <HAL_RCC_GetSysClockFreq+0x98>)
 80040be:	613b      	str	r3, [r7, #16]
      break;
 80040c0:	e027      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	0c9b      	lsrs	r3, r3, #18
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	4a17      	ldr	r2, [pc, #92]	; (8004128 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040cc:	5cd3      	ldrb	r3, [r2, r3]
 80040ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d010      	beq.n	80040fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040da:	4b11      	ldr	r3, [pc, #68]	; (8004120 <HAL_RCC_GetSysClockFreq+0x94>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	0c5b      	lsrs	r3, r3, #17
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	4a11      	ldr	r2, [pc, #68]	; (800412c <HAL_RCC_GetSysClockFreq+0xa0>)
 80040e6:	5cd3      	ldrb	r3, [r2, r3]
 80040e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a0d      	ldr	r2, [pc, #52]	; (8004124 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ee:	fb03 f202 	mul.w	r2, r3, r2
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	e004      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a0c      	ldr	r2, [pc, #48]	; (8004130 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004100:	fb02 f303 	mul.w	r3, r2, r3
 8004104:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	613b      	str	r3, [r7, #16]
      break;
 800410a:	e002      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_RCC_GetSysClockFreq+0x98>)
 800410e:	613b      	str	r3, [r7, #16]
      break;
 8004110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004112:	693b      	ldr	r3, [r7, #16]
}
 8004114:	4618      	mov	r0, r3
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000
 8004124:	007a1200 	.word	0x007a1200
 8004128:	08008c30 	.word	0x08008c30
 800412c:	08008c40 	.word	0x08008c40
 8004130:	003d0900 	.word	0x003d0900

08004134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004138:	4b02      	ldr	r3, [pc, #8]	; (8004144 <HAL_RCC_GetHCLKFreq+0x10>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	20000000 	.word	0x20000000

08004148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800414c:	f7ff fff2 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4903      	ldr	r1, [pc, #12]	; (800416c <HAL_RCC_GetPCLK1Freq+0x24>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000
 800416c:	08008c28 	.word	0x08008c28

08004170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004174:	f7ff ffde 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	0adb      	lsrs	r3, r3, #11
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4903      	ldr	r1, [pc, #12]	; (8004194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40021000 	.word	0x40021000
 8004194:	08008c28 	.word	0x08008c28

08004198 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041a0:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <RCC_Delay+0x34>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <RCC_Delay+0x38>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	0a5b      	lsrs	r3, r3, #9
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041b4:	bf00      	nop
  }
  while (Delay --);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1e5a      	subs	r2, r3, #1
 80041ba:	60fa      	str	r2, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f9      	bne.n	80041b4 <RCC_Delay+0x1c>
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr
 80041cc:	20000000 	.word	0x20000000
 80041d0:	10624dd3 	.word	0x10624dd3

080041d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e076      	b.n	80042d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d108      	bne.n	8004200 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041f6:	d009      	beq.n	800420c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	61da      	str	r2, [r3, #28]
 80041fe:	e005      	b.n	800420c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fc fc12 	bl	8000a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004242:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	ea42 0103 	orr.w	r1, r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	0c1a      	lsrs	r2, r3, #16
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f002 0204 	and.w	r2, r2, #4
 80042b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	4613      	mov	r3, r2
 80042ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_SPI_Transmit+0x22>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e12d      	b.n	800455a <HAL_SPI_Transmit+0x27e>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004306:	f7fc fcfb 	bl	8000d00 <HAL_GetTick>
 800430a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800430c:	88fb      	ldrh	r3, [r7, #6]
 800430e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b01      	cmp	r3, #1
 800431a:	d002      	beq.n	8004322 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800431c:	2302      	movs	r3, #2
 800431e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004320:	e116      	b.n	8004550 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_SPI_Transmit+0x52>
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d102      	bne.n	8004334 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004332:	e10d      	b.n	8004550 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2203      	movs	r2, #3
 8004338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	88fa      	ldrh	r2, [r7, #6]
 800434c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	88fa      	ldrh	r2, [r7, #6]
 8004352:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437a:	d10f      	bne.n	800439c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800438a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800439a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b40      	cmp	r3, #64	; 0x40
 80043a8:	d007      	beq.n	80043ba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c2:	d14f      	bne.n	8004464 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_SPI_Transmit+0xf6>
 80043cc:	8afb      	ldrh	r3, [r7, #22]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d142      	bne.n	8004458 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	881a      	ldrh	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	1c9a      	adds	r2, r3, #2
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043f6:	e02f      	b.n	8004458 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b02      	cmp	r3, #2
 8004404:	d112      	bne.n	800442c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	881a      	ldrh	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	1c9a      	adds	r2, r3, #2
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	86da      	strh	r2, [r3, #54]	; 0x36
 800442a:	e015      	b.n	8004458 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800442c:	f7fc fc68 	bl	8000d00 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d803      	bhi.n	8004444 <HAL_SPI_Transmit+0x168>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004442:	d102      	bne.n	800444a <HAL_SPI_Transmit+0x16e>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004456:	e07b      	b.n	8004550 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1ca      	bne.n	80043f8 <HAL_SPI_Transmit+0x11c>
 8004462:	e050      	b.n	8004506 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_SPI_Transmit+0x196>
 800446c:	8afb      	ldrh	r3, [r7, #22]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d144      	bne.n	80044fc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	330c      	adds	r3, #12
 800447c:	7812      	ldrb	r2, [r2, #0]
 800447e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004498:	e030      	b.n	80044fc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d113      	bne.n	80044d0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	7812      	ldrb	r2, [r2, #0]
 80044b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80044ce:	e015      	b.n	80044fc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044d0:	f7fc fc16 	bl	8000d00 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d803      	bhi.n	80044e8 <HAL_SPI_Transmit+0x20c>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e6:	d102      	bne.n	80044ee <HAL_SPI_Transmit+0x212>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80044fa:	e029      	b.n	8004550 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1c9      	bne.n	800449a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	6839      	ldr	r1, [r7, #0]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fa62 	bl	80049d4 <SPI_EndRxTxTransaction>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	77fb      	strb	r3, [r7, #31]
 8004546:	e003      	b.n	8004550 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004558:	7ffb      	ldrb	r3, [r7, #31]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b08c      	sub	sp, #48	; 0x30
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	607a      	str	r2, [r7, #4]
 800456e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004570:	2301      	movs	r3, #1
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_SPI_TransmitReceive+0x26>
 8004584:	2302      	movs	r3, #2
 8004586:	e198      	b.n	80048ba <HAL_SPI_TransmitReceive+0x358>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004590:	f7fc fbb6 	bl	8000d00 <HAL_GetTick>
 8004594:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800459c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80045a6:	887b      	ldrh	r3, [r7, #2]
 80045a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d00f      	beq.n	80045d2 <HAL_SPI_TransmitReceive+0x70>
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b8:	d107      	bne.n	80045ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <HAL_SPI_TransmitReceive+0x68>
 80045c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d003      	beq.n	80045d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80045ca:	2302      	movs	r3, #2
 80045cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045d0:	e16d      	b.n	80048ae <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_SPI_TransmitReceive+0x82>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_SPI_TransmitReceive+0x82>
 80045de:	887b      	ldrh	r3, [r7, #2]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d103      	bne.n	80045ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045ea:	e160      	b.n	80048ae <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d003      	beq.n	8004600 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2205      	movs	r2, #5
 80045fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	887a      	ldrh	r2, [r7, #2]
 8004610:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	887a      	ldrh	r2, [r7, #2]
 8004616:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	887a      	ldrh	r2, [r7, #2]
 8004622:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	887a      	ldrh	r2, [r7, #2]
 8004628:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d007      	beq.n	8004654 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004652:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800465c:	d17c      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <HAL_SPI_TransmitReceive+0x10a>
 8004666:	8b7b      	ldrh	r3, [r7, #26]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d16a      	bne.n	8004742 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	881a      	ldrh	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	1c9a      	adds	r2, r3, #2
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004686:	b29b      	uxth	r3, r3
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004690:	e057      	b.n	8004742 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b02      	cmp	r3, #2
 800469e:	d11b      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x176>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d016      	beq.n	80046d8 <HAL_SPI_TransmitReceive+0x176>
 80046aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d113      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	881a      	ldrh	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	1c9a      	adds	r2, r3, #2
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d119      	bne.n	800471a <HAL_SPI_TransmitReceive+0x1b8>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d014      	beq.n	800471a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	b292      	uxth	r2, r2
 80046fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	1c9a      	adds	r2, r3, #2
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004716:	2301      	movs	r3, #1
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800471a:	f7fc faf1 	bl	8000d00 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004726:	429a      	cmp	r2, r3
 8004728:	d80b      	bhi.n	8004742 <HAL_SPI_TransmitReceive+0x1e0>
 800472a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004730:	d007      	beq.n	8004742 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004740:	e0b5      	b.n	80048ae <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004746:	b29b      	uxth	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1a2      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x130>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d19d      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x130>
 8004756:	e080      	b.n	800485a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_SPI_TransmitReceive+0x204>
 8004760:	8b7b      	ldrh	r3, [r7, #26]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d16f      	bne.n	8004846 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	7812      	ldrb	r2, [r2, #0]
 8004772:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800478c:	e05b      	b.n	8004846 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b02      	cmp	r3, #2
 800479a:	d11c      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x274>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d017      	beq.n	80047d6 <HAL_SPI_TransmitReceive+0x274>
 80047a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d114      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	7812      	ldrb	r2, [r2, #0]
 80047b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d119      	bne.n	8004818 <HAL_SPI_TransmitReceive+0x2b6>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d014      	beq.n	8004818 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004814:	2301      	movs	r3, #1
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004818:	f7fc fa72 	bl	8000d00 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004824:	429a      	cmp	r2, r3
 8004826:	d803      	bhi.n	8004830 <HAL_SPI_TransmitReceive+0x2ce>
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482e:	d102      	bne.n	8004836 <HAL_SPI_TransmitReceive+0x2d4>
 8004830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004832:	2b00      	cmp	r3, #0
 8004834:	d107      	bne.n	8004846 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004844:	e033      	b.n	80048ae <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d19e      	bne.n	800478e <HAL_SPI_TransmitReceive+0x22c>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d199      	bne.n	800478e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800485a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f8b8 	bl	80049d4 <SPI_EndRxTxTransaction>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d006      	beq.n	8004878 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004876:	e01a      	b.n	80048ae <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048a4:	e003      	b.n	80048ae <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3730      	adds	r7, #48	; 0x30
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	4613      	mov	r3, r2
 80048d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048d4:	f7fc fa14 	bl	8000d00 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	4413      	add	r3, r2
 80048e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048e4:	f7fc fa0c 	bl	8000d00 <HAL_GetTick>
 80048e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048ea:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	015b      	lsls	r3, r3, #5
 80048f0:	0d1b      	lsrs	r3, r3, #20
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	fb02 f303 	mul.w	r3, r2, r3
 80048f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048fa:	e054      	b.n	80049a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d050      	beq.n	80049a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004904:	f7fc f9fc 	bl	8000d00 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	429a      	cmp	r2, r3
 8004912:	d902      	bls.n	800491a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d13d      	bne.n	8004996 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004928:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004932:	d111      	bne.n	8004958 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800493c:	d004      	beq.n	8004948 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004946:	d107      	bne.n	8004958 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004956:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004960:	d10f      	bne.n	8004982 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004980:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e017      	b.n	80049c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4013      	ands	r3, r2
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	bf0c      	ite	eq
 80049b6:	2301      	moveq	r3, #1
 80049b8:	2300      	movne	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d19b      	bne.n	80048fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3720      	adds	r7, #32
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000000 	.word	0x20000000

080049d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af02      	add	r7, sp, #8
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2200      	movs	r2, #0
 80049e8:	2180      	movs	r1, #128	; 0x80
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f7ff ff6a 	bl	80048c4 <SPI_WaitFlagStateUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fa:	f043 0220 	orr.w	r2, r3, #32
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e000      	b.n	8004a08 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e042      	b.n	8004aa8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fc f854 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2224      	movs	r2, #36	; 0x24
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fd09 	bl	800546c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d121      	bne.n	8004b0e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <HAL_UART_Transmit_IT+0x26>
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e01a      	b.n	8004b10 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	88fa      	ldrh	r2, [r7, #6]
 8004ae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	88fa      	ldrh	r2, [r7, #6]
 8004aea:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2221      	movs	r2, #33	; 0x21
 8004af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b08:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e000      	b.n	8004b10 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004b0e:	2302      	movs	r3, #2
  }
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr

08004b1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	4613      	mov	r3, r2
 8004b26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d112      	bne.n	8004b5a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_UART_Receive_IT+0x26>
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e00b      	b.n	8004b5c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fab6 	bl	80050c2 <UART_Start_Receive_IT>
 8004b56:	4603      	mov	r3, r0
 8004b58:	e000      	b.n	8004b5c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004b5a:	2302      	movs	r3, #2
  }
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b0ba      	sub	sp, #232	; 0xe8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10f      	bne.n	8004bca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <HAL_UART_IRQHandler+0x66>
 8004bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fb93 	bl	80052ee <UART_Receive_IT>
      return;
 8004bc8:	e25b      	b.n	8005082 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80de 	beq.w	8004d90 <HAL_UART_IRQHandler+0x22c>
 8004bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d106      	bne.n	8004bee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80d1 	beq.w	8004d90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00b      	beq.n	8004c12 <HAL_UART_IRQHandler+0xae>
 8004bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	f043 0201 	orr.w	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00b      	beq.n	8004c36 <HAL_UART_IRQHandler+0xd2>
 8004c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d005      	beq.n	8004c36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2e:	f043 0202 	orr.w	r2, r3, #2
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00b      	beq.n	8004c5a <HAL_UART_IRQHandler+0xf6>
 8004c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d005      	beq.n	8004c5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	f043 0204 	orr.w	r2, r3, #4
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d011      	beq.n	8004c8a <HAL_UART_IRQHandler+0x126>
 8004c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d105      	bne.n	8004c7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c82:	f043 0208 	orr.w	r2, r3, #8
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 81f2 	beq.w	8005078 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x14e>
 8004ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fb1e 	bl	80052ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bf14      	ite	ne
 8004cc0:	2301      	movne	r3, #1
 8004cc2:	2300      	moveq	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d103      	bne.n	8004cde <HAL_UART_IRQHandler+0x17a>
 8004cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d04f      	beq.n	8004d7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fa28 	bl	8005134 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d041      	beq.n	8004d76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3314      	adds	r3, #20
 8004cf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3314      	adds	r3, #20
 8004d1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1d9      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d013      	beq.n	8004d6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4a:	4a7e      	ldr	r2, [pc, #504]	; (8004f44 <HAL_UART_IRQHandler+0x3e0>)
 8004d4c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fc f926 	bl	8000fa4 <HAL_DMA_Abort_IT>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d016      	beq.n	8004d8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d68:	4610      	mov	r0, r2
 8004d6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d6c:	e00e      	b.n	8004d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f993 	bl	800509a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d74:	e00a      	b.n	8004d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f98f 	bl	800509a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d7c:	e006      	b.n	8004d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f98b 	bl	800509a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004d8a:	e175      	b.n	8005078 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8c:	bf00      	nop
    return;
 8004d8e:	e173      	b.n	8005078 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	f040 814f 	bne.w	8005038 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 8148 	beq.w	8005038 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 8141 	beq.w	8005038 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004db6:	2300      	movs	r3, #0
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 80b6 	beq.w	8004f48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004de8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8145 	beq.w	800507c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	f080 813e 	bcs.w	800507c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	f000 8088 	beq.w	8004f24 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e22:	e853 3f00 	ldrex	r3, [r3]
 8004e26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e40:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1d9      	bne.n	8004e14 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3314      	adds	r3, #20
 8004e66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e72:	f023 0301 	bic.w	r3, r3, #1
 8004e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3314      	adds	r3, #20
 8004e80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e84:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e90:	e841 2300 	strex	r3, r2, [r1]
 8004e94:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1e1      	bne.n	8004e60 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3314      	adds	r3, #20
 8004ea2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ea6:	e853 3f00 	ldrex	r3, [r3]
 8004eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3314      	adds	r3, #20
 8004ebc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ec0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ec2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ec6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e3      	bne.n	8004e9c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef4:	f023 0310 	bic.w	r3, r3, #16
 8004ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	330c      	adds	r3, #12
 8004f02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f06:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f08:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e3      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fc f805 	bl	8000f2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f8b6 	bl	80050ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f40:	e09c      	b.n	800507c <HAL_UART_IRQHandler+0x518>
 8004f42:	bf00      	nop
 8004f44:	080051f9 	.word	0x080051f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 808e 	beq.w	8005080 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004f64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8089 	beq.w	8005080 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	330c      	adds	r3, #12
 8004f74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f92:	647a      	str	r2, [r7, #68]	; 0x44
 8004f94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e3      	bne.n	8004f6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3314      	adds	r3, #20
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	623b      	str	r3, [r7, #32]
   return(result);
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3314      	adds	r3, #20
 8004fc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fca:	633a      	str	r2, [r7, #48]	; 0x30
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e3      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0310 	bic.w	r3, r3, #16
 8005002:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005010:	61fa      	str	r2, [r7, #28]
 8005012:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	69b9      	ldr	r1, [r7, #24]
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	e841 2300 	strex	r3, r2, [r1]
 800501c:	617b      	str	r3, [r7, #20]
   return(result);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e3      	bne.n	8004fec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800502a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800502e:	4619      	mov	r1, r3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f83b 	bl	80050ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005036:	e023      	b.n	8005080 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800503c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005040:	2b00      	cmp	r3, #0
 8005042:	d009      	beq.n	8005058 <HAL_UART_IRQHandler+0x4f4>
 8005044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f8e5 	bl	8005220 <UART_Transmit_IT>
    return;
 8005056:	e014      	b.n	8005082 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00e      	beq.n	8005082 <HAL_UART_IRQHandler+0x51e>
 8005064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f924 	bl	80052be <UART_EndTransmit_IT>
    return;
 8005076:	e004      	b.n	8005082 <HAL_UART_IRQHandler+0x51e>
    return;
 8005078:	bf00      	nop
 800507a:	e002      	b.n	8005082 <HAL_UART_IRQHandler+0x51e>
      return;
 800507c:	bf00      	nop
 800507e:	e000      	b.n	8005082 <HAL_UART_IRQHandler+0x51e>
      return;
 8005080:	bf00      	nop
  }
}
 8005082:	37e8      	adds	r7, #232	; 0xe8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr

080050ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	bc80      	pop	{r7}
 80050c0:	4770      	bx	lr

080050c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b085      	sub	sp, #20
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	4613      	mov	r3, r2
 80050ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	88fa      	ldrh	r2, [r7, #6]
 80050da:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	88fa      	ldrh	r2, [r7, #6]
 80050e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2222      	movs	r2, #34	; 0x22
 80050ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005106:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695a      	ldr	r2, [r3, #20]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0220 	orr.w	r2, r2, #32
 8005126:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr

08005134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005134:	b480      	push	{r7}
 8005136:	b095      	sub	sp, #84	; 0x54
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800515c:	643a      	str	r2, [r7, #64]	; 0x40
 800515e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005164:	e841 2300 	strex	r3, r2, [r1]
 8005168:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e5      	bne.n	800513c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3314      	adds	r3, #20
 8005176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f023 0301 	bic.w	r3, r3, #1
 8005186:	64bb      	str	r3, [r7, #72]	; 0x48
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3314      	adds	r3, #20
 800518e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005190:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e5      	bne.n	8005170 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d119      	bne.n	80051e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	330c      	adds	r3, #12
 80051b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	e853 3f00 	ldrex	r3, [r3]
 80051ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f023 0310 	bic.w	r3, r3, #16
 80051c2:	647b      	str	r3, [r7, #68]	; 0x44
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	330c      	adds	r3, #12
 80051ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051cc:	61ba      	str	r2, [r7, #24]
 80051ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d0:	6979      	ldr	r1, [r7, #20]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	e841 2300 	strex	r3, r2, [r1]
 80051d8:	613b      	str	r3, [r7, #16]
   return(result);
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e5      	bne.n	80051ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051ee:	bf00      	nop
 80051f0:	3754      	adds	r7, #84	; 0x54
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bc80      	pop	{r7}
 80051f6:	4770      	bx	lr

080051f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f7ff ff41 	bl	800509a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005218:	bf00      	nop
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b21      	cmp	r3, #33	; 0x21
 8005232:	d13e      	bne.n	80052b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523c:	d114      	bne.n	8005268 <UART_Transmit_IT+0x48>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d110      	bne.n	8005268 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800525a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	1c9a      	adds	r2, r3, #2
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	621a      	str	r2, [r3, #32]
 8005266:	e008      	b.n	800527a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	1c59      	adds	r1, r3, #1
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6211      	str	r1, [r2, #32]
 8005272:	781a      	ldrb	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29b      	uxth	r3, r3
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4619      	mov	r1, r3
 8005288:	84d1      	strh	r1, [r2, #38]	; 0x26
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800529c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e000      	b.n	80052b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052b2:	2302      	movs	r3, #2
  }
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr

080052be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff fed2 	bl	8005088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b08c      	sub	sp, #48	; 0x30
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b22      	cmp	r3, #34	; 0x22
 8005300:	f040 80ae 	bne.w	8005460 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530c:	d117      	bne.n	800533e <UART_Receive_IT+0x50>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d113      	bne.n	800533e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005316:	2300      	movs	r3, #0
 8005318:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532c:	b29a      	uxth	r2, r3
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	1c9a      	adds	r2, r3, #2
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	629a      	str	r2, [r3, #40]	; 0x28
 800533c:	e026      	b.n	800538c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005344:	2300      	movs	r3, #0
 8005346:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005350:	d007      	beq.n	8005362 <UART_Receive_IT+0x74>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <UART_Receive_IT+0x82>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	b2da      	uxtb	r2, r3
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	e008      	b.n	8005382 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800537c:	b2da      	uxtb	r2, r3
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29b      	uxth	r3, r3
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	4619      	mov	r1, r3
 800539a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800539c:	2b00      	cmp	r3, #0
 800539e:	d15d      	bne.n	800545c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0220 	bic.w	r2, r2, #32
 80053ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695a      	ldr	r2, [r3, #20]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0201 	bic.w	r2, r2, #1
 80053ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d135      	bne.n	8005452 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	330c      	adds	r3, #12
 80053f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	613b      	str	r3, [r7, #16]
   return(result);
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f023 0310 	bic.w	r3, r3, #16
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	330c      	adds	r3, #12
 800540a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540c:	623a      	str	r2, [r7, #32]
 800540e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	69f9      	ldr	r1, [r7, #28]
 8005412:	6a3a      	ldr	r2, [r7, #32]
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	61bb      	str	r3, [r7, #24]
   return(result);
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e5      	bne.n	80053ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0310 	and.w	r3, r3, #16
 800542a:	2b10      	cmp	r3, #16
 800542c:	d10a      	bne.n	8005444 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff fe2e 	bl	80050ac <HAL_UARTEx_RxEventCallback>
 8005450:	e002      	b.n	8005458 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fb f94c 	bl	80006f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	e002      	b.n	8005462 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	e000      	b.n	8005462 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005460:	2302      	movs	r3, #2
  }
}
 8005462:	4618      	mov	r0, r3
 8005464:	3730      	adds	r7, #48	; 0x30
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80054a6:	f023 030c 	bic.w	r3, r3, #12
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	430b      	orrs	r3, r1
 80054b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a2c      	ldr	r2, [pc, #176]	; (8005580 <UART_SetConfig+0x114>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d103      	bne.n	80054dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80054d4:	f7fe fe4c 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	e002      	b.n	80054e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80054dc:	f7fe fe34 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 80054e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	009a      	lsls	r2, r3, #2
 80054ec:	441a      	add	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f8:	4a22      	ldr	r2, [pc, #136]	; (8005584 <UART_SetConfig+0x118>)
 80054fa:	fba2 2303 	umull	r2, r3, r2, r3
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	0119      	lsls	r1, r3, #4
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4613      	mov	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	009a      	lsls	r2, r3, #2
 800550c:	441a      	add	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	fbb2 f2f3 	udiv	r2, r2, r3
 8005518:	4b1a      	ldr	r3, [pc, #104]	; (8005584 <UART_SetConfig+0x118>)
 800551a:	fba3 0302 	umull	r0, r3, r3, r2
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	2064      	movs	r0, #100	; 0x64
 8005522:	fb00 f303 	mul.w	r3, r0, r3
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	3332      	adds	r3, #50	; 0x32
 800552c:	4a15      	ldr	r2, [pc, #84]	; (8005584 <UART_SetConfig+0x118>)
 800552e:	fba2 2303 	umull	r2, r3, r2, r3
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005538:	4419      	add	r1, r3
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009a      	lsls	r2, r3, #2
 8005544:	441a      	add	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005550:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <UART_SetConfig+0x118>)
 8005552:	fba3 0302 	umull	r0, r3, r3, r2
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	2064      	movs	r0, #100	; 0x64
 800555a:	fb00 f303 	mul.w	r3, r0, r3
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	3332      	adds	r3, #50	; 0x32
 8005564:	4a07      	ldr	r2, [pc, #28]	; (8005584 <UART_SetConfig+0x118>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	f003 020f 	and.w	r2, r3, #15
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	440a      	add	r2, r1
 8005576:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005578:	bf00      	nop
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40013800 	.word	0x40013800
 8005584:	51eb851f 	.word	0x51eb851f

08005588 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800559a:	2b84      	cmp	r3, #132	; 0x84
 800559c:	d005      	beq.n	80055aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800559e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4413      	add	r3, r2
 80055a6:	3303      	adds	r3, #3
 80055a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80055aa:	68fb      	ldr	r3, [r7, #12]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr

080055b6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055bc:	f3ef 8305 	mrs	r3, IPSR
 80055c0:	607b      	str	r3, [r7, #4]
  return(result);
 80055c2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	bf14      	ite	ne
 80055c8:	2301      	movne	r3, #1
 80055ca:	2300      	moveq	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80055dc:	f001 fbfc 	bl	8006dd8 <vTaskStartScheduler>
  
  return osOK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80055e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e8:	b089      	sub	sp, #36	; 0x24
 80055ea:	af04      	add	r7, sp, #16
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d020      	beq.n	800563a <osThreadCreate+0x54>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01c      	beq.n	800563a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685c      	ldr	r4, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691e      	ldr	r6, [r3, #16]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff ffb8 	bl	8005588 <makeFreeRtosPriority>
 8005618:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005622:	9202      	str	r2, [sp, #8]
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	9100      	str	r1, [sp, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	4632      	mov	r2, r6
 800562c:	4629      	mov	r1, r5
 800562e:	4620      	mov	r0, r4
 8005630:	f001 fa30 	bl	8006a94 <xTaskCreateStatic>
 8005634:	4603      	mov	r3, r0
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	e01c      	b.n	8005674 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685c      	ldr	r4, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005646:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff ff9a 	bl	8005588 <makeFreeRtosPriority>
 8005654:	4602      	mov	r2, r0
 8005656:	f107 030c 	add.w	r3, r7, #12
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	9200      	str	r2, [sp, #0]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	4632      	mov	r2, r6
 8005662:	4629      	mov	r1, r5
 8005664:	4620      	mov	r0, r4
 8005666:	f001 fa71 	bl	8006b4c <xTaskCreate>
 800566a:	4603      	mov	r3, r0
 800566c:	2b01      	cmp	r3, #1
 800566e:	d001      	beq.n	8005674 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005670:	2300      	movs	r3, #0
 8005672:	e000      	b.n	8005676 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005674:	68fb      	ldr	r3, [r7, #12]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005680 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	460b      	mov	r3, r1
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d013      	beq.n	80056be <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8005696:	7afb      	ldrb	r3, [r7, #11]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <osTimerCreate+0x20>
 800569c:	2101      	movs	r1, #1
 800569e:	e000      	b.n	80056a2 <osTimerCreate+0x22>
 80056a0:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80056aa:	9201      	str	r2, [sp, #4]
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	460a      	mov	r2, r1
 80056b2:	2101      	movs	r1, #1
 80056b4:	480b      	ldr	r0, [pc, #44]	; (80056e4 <osTimerCreate+0x64>)
 80056b6:	f002 fa98 	bl	8007bea <xTimerCreateStatic>
 80056ba:	4603      	mov	r3, r0
 80056bc:	e00e      	b.n	80056dc <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80056be:	7afb      	ldrb	r3, [r7, #11]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <osTimerCreate+0x48>
 80056c4:	2201      	movs	r2, #1
 80056c6:	e000      	b.n	80056ca <osTimerCreate+0x4a>
 80056c8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2101      	movs	r1, #1
 80056d4:	4803      	ldr	r0, [pc, #12]	; (80056e4 <osTimerCreate+0x64>)
 80056d6:	f002 fa67 	bl	8007ba8 <xTimerCreate>
 80056da:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	08008bfc 	.word	0x08008bfc

080056e8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <osTimerStart+0x20>
    ticks = 1;
 8005704:	2301      	movs	r3, #1
 8005706:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8005708:	f7ff ff55 	bl	80055b6 <inHandlerMode>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d01a      	beq.n	8005748 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8005712:	f107 030c 	add.w	r3, r7, #12
 8005716:	2200      	movs	r2, #0
 8005718:	9200      	str	r2, [sp, #0]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	2109      	movs	r1, #9
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f002 fad2 	bl	8007cc8 <xTimerGenericCommand>
 8005724:	4603      	mov	r3, r0
 8005726:	2b01      	cmp	r3, #1
 8005728:	d002      	beq.n	8005730 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800572a:	23ff      	movs	r3, #255	; 0xff
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	e018      	b.n	8005762 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d015      	beq.n	8005762 <osTimerStart+0x7a>
 8005736:	4b0d      	ldr	r3, [pc, #52]	; (800576c <osTimerStart+0x84>)
 8005738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	e00c      	b.n	8005762 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8005748:	2300      	movs	r3, #0
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	2300      	movs	r3, #0
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	2104      	movs	r1, #4
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f002 fab8 	bl	8007cc8 <xTimerGenericCommand>
 8005758:	4603      	mov	r3, r0
 800575a:	2b01      	cmp	r3, #1
 800575c:	d001      	beq.n	8005762 <osTimerStart+0x7a>
      result = osErrorOS;
 800575e:	23ff      	movs	r3, #255	; 0xff
 8005760:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8005762:	697b      	ldr	r3, [r7, #20]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	e000ed04 	.word	0xe000ed04

08005770 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af02      	add	r7, sp, #8
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00f      	beq.n	80057a2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d10a      	bne.n	800579e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2203      	movs	r2, #3
 800578e:	9200      	str	r2, [sp, #0]
 8005790:	2200      	movs	r2, #0
 8005792:	2100      	movs	r1, #0
 8005794:	2001      	movs	r0, #1
 8005796:	f000 fa95 	bl	8005cc4 <xQueueGenericCreateStatic>
 800579a:	4603      	mov	r3, r0
 800579c:	e016      	b.n	80057cc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	e014      	b.n	80057cc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d110      	bne.n	80057ca <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80057a8:	2203      	movs	r2, #3
 80057aa:	2100      	movs	r1, #0
 80057ac:	2001      	movs	r0, #1
 80057ae:	f000 fb00 	bl	8005db2 <xQueueGenericCreate>
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <osSemaphoreCreate+0x56>
 80057ba:	2300      	movs	r3, #0
 80057bc:	2200      	movs	r2, #0
 80057be:	2100      	movs	r1, #0
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 fb53 	bl	8005e6c <xQueueGenericSend>
      return sema;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	e000      	b.n	80057cc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80057ca:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80057de:	2300      	movs	r3, #0
 80057e0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <osSemaphoreWait+0x18>
    return osErrorParameter;
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	e03a      	b.n	8005862 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d103      	bne.n	8005800 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80057f8:	f04f 33ff 	mov.w	r3, #4294967295
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	e009      	b.n	8005814 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d006      	beq.n	8005814 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <osSemaphoreWait+0x40>
      ticks = 1;
 8005810:	2301      	movs	r3, #1
 8005812:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005814:	f7ff fecf 	bl	80055b6 <inHandlerMode>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d017      	beq.n	800584e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800581e:	f107 0308 	add.w	r3, r7, #8
 8005822:	461a      	mov	r2, r3
 8005824:	2100      	movs	r1, #0
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 ff30 	bl	800668c <xQueueReceiveFromISR>
 800582c:	4603      	mov	r3, r0
 800582e:	2b01      	cmp	r3, #1
 8005830:	d001      	beq.n	8005836 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005832:	23ff      	movs	r3, #255	; 0xff
 8005834:	e015      	b.n	8005862 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d011      	beq.n	8005860 <osSemaphoreWait+0x8c>
 800583c:	4b0b      	ldr	r3, [pc, #44]	; (800586c <osSemaphoreWait+0x98>)
 800583e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	e008      	b.n	8005860 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800584e:	68f9      	ldr	r1, [r7, #12]
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fe0f 	bl	8006474 <xQueueSemaphoreTake>
 8005856:	4603      	mov	r3, r0
 8005858:	2b01      	cmp	r3, #1
 800585a:	d001      	beq.n	8005860 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800585c:	23ff      	movs	r3, #255	; 0xff
 800585e:	e000      	b.n	8005862 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	e000ed04 	.word	0xe000ed04

08005870 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005878:	2300      	movs	r3, #0
 800587a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800587c:	2300      	movs	r3, #0
 800587e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005880:	f7ff fe99 	bl	80055b6 <inHandlerMode>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d016      	beq.n	80058b8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800588a:	f107 0308 	add.w	r3, r7, #8
 800588e:	4619      	mov	r1, r3
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fc81 	bl	8006198 <xQueueGiveFromISR>
 8005896:	4603      	mov	r3, r0
 8005898:	2b01      	cmp	r3, #1
 800589a:	d001      	beq.n	80058a0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800589c:	23ff      	movs	r3, #255	; 0xff
 800589e:	e017      	b.n	80058d0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d013      	beq.n	80058ce <osSemaphoreRelease+0x5e>
 80058a6:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <osSemaphoreRelease+0x68>)
 80058a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	e00a      	b.n	80058ce <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80058b8:	2300      	movs	r3, #0
 80058ba:	2200      	movs	r2, #0
 80058bc:	2100      	movs	r1, #0
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fad4 	bl	8005e6c <xQueueGenericSend>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d001      	beq.n	80058ce <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80058ca:	23ff      	movs	r3, #255	; 0xff
 80058cc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80058ce:	68fb      	ldr	r3, [r7, #12]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	e000ed04 	.word	0xe000ed04

080058dc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80058dc:	b590      	push	{r4, r7, lr}
 80058de:	b085      	sub	sp, #20
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d011      	beq.n	8005912 <osMessageCreate+0x36>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00d      	beq.n	8005912 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6859      	ldr	r1, [r3, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	2400      	movs	r4, #0
 8005908:	9400      	str	r4, [sp, #0]
 800590a:	f000 f9db 	bl	8005cc4 <xQueueGenericCreateStatic>
 800590e:	4603      	mov	r3, r0
 8005910:	e008      	b.n	8005924 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	4619      	mov	r1, r3
 800591e:	f000 fa48 	bl	8005db2 <xQueueGenericCreate>
 8005922:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	bd90      	pop	{r4, r7, pc}

0800592c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005938:	2300      	movs	r3, #0
 800593a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <osMessagePut+0x1e>
    ticks = 1;
 8005946:	2301      	movs	r3, #1
 8005948:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800594a:	f7ff fe34 	bl	80055b6 <inHandlerMode>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d018      	beq.n	8005986 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005954:	f107 0210 	add.w	r2, r7, #16
 8005958:	f107 0108 	add.w	r1, r7, #8
 800595c:	2300      	movs	r3, #0
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 fb82 	bl	8006068 <xQueueGenericSendFromISR>
 8005964:	4603      	mov	r3, r0
 8005966:	2b01      	cmp	r3, #1
 8005968:	d001      	beq.n	800596e <osMessagePut+0x42>
      return osErrorOS;
 800596a:	23ff      	movs	r3, #255	; 0xff
 800596c:	e018      	b.n	80059a0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d014      	beq.n	800599e <osMessagePut+0x72>
 8005974:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <osMessagePut+0x7c>)
 8005976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	e00b      	b.n	800599e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005986:	f107 0108 	add.w	r1, r7, #8
 800598a:	2300      	movs	r3, #0
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 fa6c 	bl	8005e6c <xQueueGenericSend>
 8005994:	4603      	mov	r3, r0
 8005996:	2b01      	cmp	r3, #1
 8005998:	d001      	beq.n	800599e <osMessagePut+0x72>
      return osErrorOS;
 800599a:	23ff      	movs	r3, #255	; 0xff
 800599c:	e000      	b.n	80059a0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	e000ed04 	.word	0xe000ed04

080059ac <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80059ac:	b590      	push	{r4, r7, lr}
 80059ae:	b08b      	sub	sp, #44	; 0x2c
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80059c6:	2380      	movs	r3, #128	; 0x80
 80059c8:	617b      	str	r3, [r7, #20]
    return event;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	461c      	mov	r4, r3
 80059ce:	f107 0314 	add.w	r3, r7, #20
 80059d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80059da:	e054      	b.n	8005a86 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80059dc:	2300      	movs	r3, #0
 80059de:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ea:	d103      	bne.n	80059f4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80059ec:	f04f 33ff 	mov.w	r3, #4294967295
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
 80059f2:	e009      	b.n	8005a08 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d006      	beq.n	8005a08 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <osMessageGet+0x5c>
      ticks = 1;
 8005a04:	2301      	movs	r3, #1
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005a08:	f7ff fdd5 	bl	80055b6 <inHandlerMode>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01c      	beq.n	8005a4c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005a12:	f107 0220 	add.w	r2, r7, #32
 8005a16:	f107 0314 	add.w	r3, r7, #20
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	68b8      	ldr	r0, [r7, #8]
 8005a20:	f000 fe34 	bl	800668c <xQueueReceiveFromISR>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d102      	bne.n	8005a30 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005a2a:	2310      	movs	r3, #16
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	e001      	b.n	8005a34 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d01d      	beq.n	8005a76 <osMessageGet+0xca>
 8005a3a:	4b15      	ldr	r3, [pc, #84]	; (8005a90 <osMessageGet+0xe4>)
 8005a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	e014      	b.n	8005a76 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005a4c:	f107 0314 	add.w	r3, r7, #20
 8005a50:	3304      	adds	r3, #4
 8005a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a54:	4619      	mov	r1, r3
 8005a56:	68b8      	ldr	r0, [r7, #8]
 8005a58:	f000 fc2c 	bl	80062b4 <xQueueReceive>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d102      	bne.n	8005a68 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005a62:	2310      	movs	r3, #16
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	e006      	b.n	8005a76 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <osMessageGet+0xc6>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e000      	b.n	8005a74 <osMessageGet+0xc8>
 8005a72:	2340      	movs	r3, #64	; 0x40
 8005a74:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	461c      	mov	r4, r3
 8005a7a:	f107 0314 	add.w	r3, r7, #20
 8005a7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	372c      	adds	r7, #44	; 0x2c
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd90      	pop	{r4, r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f103 0208 	add.w	r2, r3, #8
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f103 0208 	add.w	r2, r3, #8
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f103 0208 	add.w	r2, r3, #8
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc80      	pop	{r7}
 8005ad0:	4770      	bx	lr

08005ad2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr

08005aea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005aea:	b480      	push	{r7}
 8005aec:	b085      	sub	sp, #20
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	601a      	str	r2, [r3, #0]
}
 8005b26:	bf00      	nop
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr

08005b30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b46:	d103      	bne.n	8005b50 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	e00c      	b.n	8005b6a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3308      	adds	r3, #8
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	e002      	b.n	8005b5e <vListInsert+0x2e>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d2f6      	bcs.n	8005b58 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	601a      	str	r2, [r3, #0]
}
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr

08005ba0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6892      	ldr	r2, [r2, #8]
 8005bb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6852      	ldr	r2, [r2, #4]
 8005bc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d103      	bne.n	8005bd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	1e5a      	subs	r2, r3, #1
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc80      	pop	{r7}
 8005bf0:	4770      	bx	lr
	...

08005bf4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c1a:	bf00      	nop
 8005c1c:	e7fe      	b.n	8005c1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c1e:	f002 fbf5 	bl	800840c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2a:	68f9      	ldr	r1, [r7, #12]
 8005c2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c2e:	fb01 f303 	mul.w	r3, r1, r3
 8005c32:	441a      	add	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	68f9      	ldr	r1, [r7, #12]
 8005c52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c54:	fb01 f303 	mul.w	r3, r1, r3
 8005c58:	441a      	add	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	22ff      	movs	r2, #255	; 0xff
 8005c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	22ff      	movs	r2, #255	; 0xff
 8005c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d114      	bne.n	8005c9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01a      	beq.n	8005cb2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3310      	adds	r3, #16
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 fb41 	bl	8007308 <xTaskRemoveFromEventList>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d012      	beq.n	8005cb2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c8c:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <xQueueGenericReset+0xcc>)
 8005c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	e009      	b.n	8005cb2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3310      	adds	r3, #16
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff fef6 	bl	8005a94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3324      	adds	r3, #36	; 0x24
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff fef1 	bl	8005a94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cb2:	f002 fbdb 	bl	800846c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cb6:	2301      	movs	r3, #1
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	e000ed04 	.word	0xe000ed04

08005cc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08e      	sub	sp, #56	; 0x38
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <xQueueGenericCreateStatic+0x52>
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <xQueueGenericCreateStatic+0x56>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <xQueueGenericCreateStatic+0x58>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	623b      	str	r3, [r7, #32]
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <xQueueGenericCreateStatic+0x7e>
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <xQueueGenericCreateStatic+0x82>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <xQueueGenericCreateStatic+0x84>
 8005d46:	2300      	movs	r3, #0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10a      	bne.n	8005d62 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	61fb      	str	r3, [r7, #28]
}
 8005d5e:	bf00      	nop
 8005d60:	e7fe      	b.n	8005d60 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d62:	2348      	movs	r3, #72	; 0x48
 8005d64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b48      	cmp	r3, #72	; 0x48
 8005d6a:	d00a      	beq.n	8005d82 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	61bb      	str	r3, [r7, #24]
}
 8005d7e:	bf00      	nop
 8005d80:	e7fe      	b.n	8005d80 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00d      	beq.n	8005da8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d94:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 f843 	bl	8005e2e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3730      	adds	r7, #48	; 0x30
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b08a      	sub	sp, #40	; 0x28
 8005db6:	af02      	add	r7, sp, #8
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10a      	bne.n	8005ddc <xQueueGenericCreate+0x2a>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	613b      	str	r3, [r7, #16]
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d102      	bne.n	8005de8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	e004      	b.n	8005df2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	fb02 f303 	mul.w	r3, r2, r3
 8005df0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	3348      	adds	r3, #72	; 0x48
 8005df6:	4618      	mov	r0, r3
 8005df8:	f002 fc08 	bl	800860c <pvPortMalloc>
 8005dfc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00f      	beq.n	8005e24 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	3348      	adds	r3, #72	; 0x48
 8005e08:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e12:	79fa      	ldrb	r2, [r7, #7]
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 f805 	bl	8005e2e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005e24:	69bb      	ldr	r3, [r7, #24]
	}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3720      	adds	r7, #32
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	607a      	str	r2, [r7, #4]
 8005e3a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d103      	bne.n	8005e4a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	e002      	b.n	8005e50 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	69b8      	ldr	r0, [r7, #24]
 8005e60:	f7ff fec8 	bl	8005bf4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e64:	bf00      	nop
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08e      	sub	sp, #56	; 0x38
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <xQueueGenericSend+0x32>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d103      	bne.n	8005eac <xQueueGenericSend+0x40>
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <xQueueGenericSend+0x44>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <xQueueGenericSend+0x46>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10a      	bne.n	8005ecc <xQueueGenericSend+0x60>
	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ec8:	bf00      	nop
 8005eca:	e7fe      	b.n	8005eca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d103      	bne.n	8005eda <xQueueGenericSend+0x6e>
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <xQueueGenericSend+0x72>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <xQueueGenericSend+0x74>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <xQueueGenericSend+0x8e>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	623b      	str	r3, [r7, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005efa:	f001 fbc9 	bl	8007690 <xTaskGetSchedulerState>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d102      	bne.n	8005f0a <xQueueGenericSend+0x9e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <xQueueGenericSend+0xa2>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <xQueueGenericSend+0xa4>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <xQueueGenericSend+0xbe>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	61fb      	str	r3, [r7, #28]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f2a:	f002 fa6f 	bl	800840c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d302      	bcc.n	8005f40 <xQueueGenericSend+0xd4>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d129      	bne.n	8005f94 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f46:	f000 fc38 	bl	80067ba <prvCopyDataToQueue>
 8005f4a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d010      	beq.n	8005f76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	3324      	adds	r3, #36	; 0x24
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f001 f9d5 	bl	8007308 <xTaskRemoveFromEventList>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d013      	beq.n	8005f8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f64:	4b3f      	ldr	r3, [pc, #252]	; (8006064 <xQueueGenericSend+0x1f8>)
 8005f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	e00a      	b.n	8005f8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d007      	beq.n	8005f8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f7c:	4b39      	ldr	r3, [pc, #228]	; (8006064 <xQueueGenericSend+0x1f8>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f8c:	f002 fa6e 	bl	800846c <vPortExitCritical>
				return pdPASS;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e063      	b.n	800605c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d103      	bne.n	8005fa2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f9a:	f002 fa67 	bl	800846c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e05c      	b.n	800605c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d106      	bne.n	8005fb6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fa8:	f107 0314 	add.w	r3, r7, #20
 8005fac:	4618      	mov	r0, r3
 8005fae:	f001 fa0d 	bl	80073cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fb6:	f002 fa59 	bl	800846c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fba:	f000 ff7d 	bl	8006eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fbe:	f002 fa25 	bl	800840c <vPortEnterCritical>
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fc8:	b25b      	sxtb	r3, r3
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fce:	d103      	bne.n	8005fd8 <xQueueGenericSend+0x16c>
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fde:	b25b      	sxtb	r3, r3
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe4:	d103      	bne.n	8005fee <xQueueGenericSend+0x182>
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fee:	f002 fa3d 	bl	800846c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ff2:	1d3a      	adds	r2, r7, #4
 8005ff4:	f107 0314 	add.w	r3, r7, #20
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f001 f9fc 	bl	80073f8 <xTaskCheckForTimeOut>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d124      	bne.n	8006050 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006008:	f000 fccf 	bl	80069aa <prvIsQueueFull>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d018      	beq.n	8006044 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	3310      	adds	r3, #16
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	4611      	mov	r1, r2
 800601a:	4618      	mov	r0, r3
 800601c:	f001 f924 	bl	8007268 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006022:	f000 fc5a 	bl	80068da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006026:	f000 ff55 	bl	8006ed4 <xTaskResumeAll>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	f47f af7c 	bne.w	8005f2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006032:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <xQueueGenericSend+0x1f8>)
 8006034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	e772      	b.n	8005f2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006046:	f000 fc48 	bl	80068da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800604a:	f000 ff43 	bl	8006ed4 <xTaskResumeAll>
 800604e:	e76c      	b.n	8005f2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006052:	f000 fc42 	bl	80068da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006056:	f000 ff3d 	bl	8006ed4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800605a:	2300      	movs	r3, #0
		}
	}
}
 800605c:	4618      	mov	r0, r3
 800605e:	3738      	adds	r7, #56	; 0x38
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	e000ed04 	.word	0xe000ed04

08006068 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08e      	sub	sp, #56	; 0x38
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10a      	bne.n	8006096 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d103      	bne.n	80060a4 <xQueueGenericSendFromISR+0x3c>
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <xQueueGenericSendFromISR+0x40>
 80060a4:	2301      	movs	r3, #1
 80060a6:	e000      	b.n	80060aa <xQueueGenericSendFromISR+0x42>
 80060a8:	2300      	movs	r3, #0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	623b      	str	r3, [r7, #32]
}
 80060c0:	bf00      	nop
 80060c2:	e7fe      	b.n	80060c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d103      	bne.n	80060d2 <xQueueGenericSendFromISR+0x6a>
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <xQueueGenericSendFromISR+0x6e>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e000      	b.n	80060d8 <xQueueGenericSendFromISR+0x70>
 80060d6:	2300      	movs	r3, #0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10a      	bne.n	80060f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	61fb      	str	r3, [r7, #28]
}
 80060ee:	bf00      	nop
 80060f0:	e7fe      	b.n	80060f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060f2:	f002 fa4d 	bl	8008590 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060f6:	f3ef 8211 	mrs	r2, BASEPRI
 80060fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	61ba      	str	r2, [r7, #24]
 800610c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800610e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006110:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611a:	429a      	cmp	r2, r3
 800611c:	d302      	bcc.n	8006124 <xQueueGenericSendFromISR+0xbc>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d12c      	bne.n	800617e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	68b9      	ldr	r1, [r7, #8]
 8006132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006134:	f000 fb41 	bl	80067ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006138:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800613c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006140:	d112      	bne.n	8006168 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	2b00      	cmp	r3, #0
 8006148:	d016      	beq.n	8006178 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	3324      	adds	r3, #36	; 0x24
 800614e:	4618      	mov	r0, r3
 8006150:	f001 f8da 	bl	8007308 <xTaskRemoveFromEventList>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00e      	beq.n	8006178 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00b      	beq.n	8006178 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	e007      	b.n	8006178 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006168:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800616c:	3301      	adds	r3, #1
 800616e:	b2db      	uxtb	r3, r3
 8006170:	b25a      	sxtb	r2, r3
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006178:	2301      	movs	r3, #1
 800617a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800617c:	e001      	b.n	8006182 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800617e:	2300      	movs	r3, #0
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800618c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800618e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006190:	4618      	mov	r0, r3
 8006192:	3738      	adds	r7, #56	; 0x38
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08e      	sub	sp, #56	; 0x38
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10a      	bne.n	80061c2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	623b      	str	r3, [r7, #32]
}
 80061be:	bf00      	nop
 80061c0:	e7fe      	b.n	80061c0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <xQueueGiveFromISR+0x48>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	61fb      	str	r3, [r7, #28]
}
 80061dc:	bf00      	nop
 80061de:	e7fe      	b.n	80061de <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d103      	bne.n	80061f0 <xQueueGiveFromISR+0x58>
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <xQueueGiveFromISR+0x5c>
 80061f0:	2301      	movs	r3, #1
 80061f2:	e000      	b.n	80061f6 <xQueueGiveFromISR+0x5e>
 80061f4:	2300      	movs	r3, #0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10a      	bne.n	8006210 <xQueueGiveFromISR+0x78>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	61bb      	str	r3, [r7, #24]
}
 800620c:	bf00      	nop
 800620e:	e7fe      	b.n	800620e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006210:	f002 f9be 	bl	8008590 <vPortValidateInterruptPriority>
	__asm volatile
 8006214:	f3ef 8211 	mrs	r2, BASEPRI
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	617a      	str	r2, [r7, #20]
 800622a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800622c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800622e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800623c:	429a      	cmp	r2, r3
 800623e:	d22b      	bcs.n	8006298 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006252:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625a:	d112      	bne.n	8006282 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	2b00      	cmp	r3, #0
 8006262:	d016      	beq.n	8006292 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	3324      	adds	r3, #36	; 0x24
 8006268:	4618      	mov	r0, r3
 800626a:	f001 f84d 	bl	8007308 <xTaskRemoveFromEventList>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00e      	beq.n	8006292 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00b      	beq.n	8006292 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2201      	movs	r2, #1
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e007      	b.n	8006292 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006286:	3301      	adds	r3, #1
 8006288:	b2db      	uxtb	r3, r3
 800628a:	b25a      	sxtb	r2, r3
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006292:	2301      	movs	r3, #1
 8006294:	637b      	str	r3, [r7, #52]	; 0x34
 8006296:	e001      	b.n	800629c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006298:	2300      	movs	r3, #0
 800629a:	637b      	str	r3, [r7, #52]	; 0x34
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f383 8811 	msr	BASEPRI, r3
}
 80062a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3738      	adds	r7, #56	; 0x38
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08c      	sub	sp, #48	; 0x30
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80062c0:	2300      	movs	r3, #0
 80062c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <xQueueReceive+0x30>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	623b      	str	r3, [r7, #32]
}
 80062e0:	bf00      	nop
 80062e2:	e7fe      	b.n	80062e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <xQueueReceive+0x3e>
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <xQueueReceive+0x42>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <xQueueReceive+0x44>
 80062f6:	2300      	movs	r3, #0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <xQueueReceive+0x5e>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	61fb      	str	r3, [r7, #28]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006312:	f001 f9bd 	bl	8007690 <xTaskGetSchedulerState>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <xQueueReceive+0x6e>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <xQueueReceive+0x72>
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <xQueueReceive+0x74>
 8006326:	2300      	movs	r3, #0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <xQueueReceive+0x8e>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	61bb      	str	r3, [r7, #24]
}
 800633e:	bf00      	nop
 8006340:	e7fe      	b.n	8006340 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006342:	f002 f863 	bl	800840c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	2b00      	cmp	r3, #0
 8006350:	d01f      	beq.n	8006392 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006356:	f000 fa9a 	bl	800688e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	1e5a      	subs	r2, r3, #1
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00f      	beq.n	800638a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	3310      	adds	r3, #16
 800636e:	4618      	mov	r0, r3
 8006370:	f000 ffca 	bl	8007308 <xTaskRemoveFromEventList>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d007      	beq.n	800638a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800637a:	4b3d      	ldr	r3, [pc, #244]	; (8006470 <xQueueReceive+0x1bc>)
 800637c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800638a:	f002 f86f 	bl	800846c <vPortExitCritical>
				return pdPASS;
 800638e:	2301      	movs	r3, #1
 8006390:	e069      	b.n	8006466 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d103      	bne.n	80063a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006398:	f002 f868 	bl	800846c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800639c:	2300      	movs	r3, #0
 800639e:	e062      	b.n	8006466 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d106      	bne.n	80063b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063a6:	f107 0310 	add.w	r3, r7, #16
 80063aa:	4618      	mov	r0, r3
 80063ac:	f001 f80e 	bl	80073cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063b0:	2301      	movs	r3, #1
 80063b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063b4:	f002 f85a 	bl	800846c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063b8:	f000 fd7e 	bl	8006eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063bc:	f002 f826 	bl	800840c <vPortEnterCritical>
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063c6:	b25b      	sxtb	r3, r3
 80063c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063cc:	d103      	bne.n	80063d6 <xQueueReceive+0x122>
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063dc:	b25b      	sxtb	r3, r3
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e2:	d103      	bne.n	80063ec <xQueueReceive+0x138>
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063ec:	f002 f83e 	bl	800846c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063f0:	1d3a      	adds	r2, r7, #4
 80063f2:	f107 0310 	add.w	r3, r7, #16
 80063f6:	4611      	mov	r1, r2
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 fffd 	bl	80073f8 <xTaskCheckForTimeOut>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d123      	bne.n	800644c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006406:	f000 faba 	bl	800697e <prvIsQueueEmpty>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d017      	beq.n	8006440 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	3324      	adds	r3, #36	; 0x24
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	4611      	mov	r1, r2
 8006418:	4618      	mov	r0, r3
 800641a:	f000 ff25 	bl	8007268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800641e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006420:	f000 fa5b 	bl	80068da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006424:	f000 fd56 	bl	8006ed4 <xTaskResumeAll>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d189      	bne.n	8006342 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800642e:	4b10      	ldr	r3, [pc, #64]	; (8006470 <xQueueReceive+0x1bc>)
 8006430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	e780      	b.n	8006342 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006442:	f000 fa4a 	bl	80068da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006446:	f000 fd45 	bl	8006ed4 <xTaskResumeAll>
 800644a:	e77a      	b.n	8006342 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800644c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800644e:	f000 fa44 	bl	80068da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006452:	f000 fd3f 	bl	8006ed4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006458:	f000 fa91 	bl	800697e <prvIsQueueEmpty>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	f43f af6f 	beq.w	8006342 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006464:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006466:	4618      	mov	r0, r3
 8006468:	3730      	adds	r7, #48	; 0x30
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	e000ed04 	.word	0xe000ed04

08006474 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08e      	sub	sp, #56	; 0x38
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800647e:	2300      	movs	r3, #0
 8006480:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006486:	2300      	movs	r3, #0
 8006488:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	623b      	str	r3, [r7, #32]
}
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	61fb      	str	r3, [r7, #28]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064c4:	f001 f8e4 	bl	8007690 <xTaskGetSchedulerState>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d102      	bne.n	80064d4 <xQueueSemaphoreTake+0x60>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <xQueueSemaphoreTake+0x64>
 80064d4:	2301      	movs	r3, #1
 80064d6:	e000      	b.n	80064da <xQueueSemaphoreTake+0x66>
 80064d8:	2300      	movs	r3, #0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10a      	bne.n	80064f4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	61bb      	str	r3, [r7, #24]
}
 80064f0:	bf00      	nop
 80064f2:	e7fe      	b.n	80064f2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80064f4:	f001 ff8a 	bl	800840c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80064f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	2b00      	cmp	r3, #0
 8006502:	d024      	beq.n	800654e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	1e5a      	subs	r2, r3, #1
 8006508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d104      	bne.n	800651e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006514:	f001 fa86 	bl	8007a24 <pvTaskIncrementMutexHeldCount>
 8006518:	4602      	mov	r2, r0
 800651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00f      	beq.n	8006546 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006528:	3310      	adds	r3, #16
 800652a:	4618      	mov	r0, r3
 800652c:	f000 feec 	bl	8007308 <xTaskRemoveFromEventList>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d007      	beq.n	8006546 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006536:	4b54      	ldr	r3, [pc, #336]	; (8006688 <xQueueSemaphoreTake+0x214>)
 8006538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006546:	f001 ff91 	bl	800846c <vPortExitCritical>
				return pdPASS;
 800654a:	2301      	movs	r3, #1
 800654c:	e097      	b.n	800667e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d111      	bne.n	8006578 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	617b      	str	r3, [r7, #20]
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006570:	f001 ff7c 	bl	800846c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006574:	2300      	movs	r3, #0
 8006576:	e082      	b.n	800667e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657a:	2b00      	cmp	r3, #0
 800657c:	d106      	bne.n	800658c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800657e:	f107 030c 	add.w	r3, r7, #12
 8006582:	4618      	mov	r0, r3
 8006584:	f000 ff22 	bl	80073cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006588:	2301      	movs	r3, #1
 800658a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800658c:	f001 ff6e 	bl	800846c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006590:	f000 fc92 	bl	8006eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006594:	f001 ff3a 	bl	800840c <vPortEnterCritical>
 8006598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800659e:	b25b      	sxtb	r3, r3
 80065a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a4:	d103      	bne.n	80065ae <xQueueSemaphoreTake+0x13a>
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065b4:	b25b      	sxtb	r3, r3
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ba:	d103      	bne.n	80065c4 <xQueueSemaphoreTake+0x150>
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065c4:	f001 ff52 	bl	800846c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065c8:	463a      	mov	r2, r7
 80065ca:	f107 030c 	add.w	r3, r7, #12
 80065ce:	4611      	mov	r1, r2
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 ff11 	bl	80073f8 <xTaskCheckForTimeOut>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d132      	bne.n	8006642 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065de:	f000 f9ce 	bl	800697e <prvIsQueueEmpty>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d026      	beq.n	8006636 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d109      	bne.n	8006604 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80065f0:	f001 ff0c 	bl	800840c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f001 f867 	bl	80076cc <xTaskPriorityInherit>
 80065fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006600:	f001 ff34 	bl	800846c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006606:	3324      	adds	r3, #36	; 0x24
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	4611      	mov	r1, r2
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fe2b 	bl	8007268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006614:	f000 f961 	bl	80068da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006618:	f000 fc5c 	bl	8006ed4 <xTaskResumeAll>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	f47f af68 	bne.w	80064f4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006624:	4b18      	ldr	r3, [pc, #96]	; (8006688 <xQueueSemaphoreTake+0x214>)
 8006626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	e75e      	b.n	80064f4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006638:	f000 f94f 	bl	80068da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800663c:	f000 fc4a 	bl	8006ed4 <xTaskResumeAll>
 8006640:	e758      	b.n	80064f4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006644:	f000 f949 	bl	80068da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006648:	f000 fc44 	bl	8006ed4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800664c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800664e:	f000 f996 	bl	800697e <prvIsQueueEmpty>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	f43f af4d 	beq.w	80064f4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00d      	beq.n	800667c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006660:	f001 fed4 	bl	800840c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006666:	f000 f891 	bl	800678c <prvGetDisinheritPriorityAfterTimeout>
 800666a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006672:	4618      	mov	r0, r3
 8006674:	f001 f936 	bl	80078e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006678:	f001 fef8 	bl	800846c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800667c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800667e:	4618      	mov	r0, r3
 8006680:	3738      	adds	r7, #56	; 0x38
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	e000ed04 	.word	0xe000ed04

0800668c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08e      	sub	sp, #56	; 0x38
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	623b      	str	r3, [r7, #32]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d103      	bne.n	80066c6 <xQueueReceiveFromISR+0x3a>
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <xQueueReceiveFromISR+0x3e>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <xQueueReceiveFromISR+0x40>
 80066ca:	2300      	movs	r3, #0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	61fb      	str	r3, [r7, #28]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066e6:	f001 ff53 	bl	8008590 <vPortValidateInterruptPriority>
	__asm volatile
 80066ea:	f3ef 8211 	mrs	r2, BASEPRI
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	61ba      	str	r2, [r7, #24]
 8006700:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006702:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	2b00      	cmp	r3, #0
 8006710:	d02f      	beq.n	8006772 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006720:	f000 f8b5 	bl	800688e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006726:	1e5a      	subs	r2, r3, #1
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800672c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d112      	bne.n	800675c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d016      	beq.n	800676c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	3310      	adds	r3, #16
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fde0 	bl	8007308 <xTaskRemoveFromEventList>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00e      	beq.n	800676c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00b      	beq.n	800676c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	e007      	b.n	800676c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800675c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006760:	3301      	adds	r3, #1
 8006762:	b2db      	uxtb	r3, r3
 8006764:	b25a      	sxtb	r2, r3
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800676c:	2301      	movs	r3, #1
 800676e:	637b      	str	r3, [r7, #52]	; 0x34
 8006770:	e001      	b.n	8006776 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006772:	2300      	movs	r3, #0
 8006774:	637b      	str	r3, [r7, #52]	; 0x34
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	613b      	str	r3, [r7, #16]
	__asm volatile
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f383 8811 	msr	BASEPRI, r3
}
 8006780:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006784:	4618      	mov	r0, r3
 8006786:	3738      	adds	r7, #56	; 0x38
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	2b00      	cmp	r3, #0
 800679a:	d006      	beq.n	80067aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f1c3 0307 	rsb	r3, r3, #7
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	e001      	b.n	80067ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80067ae:	68fb      	ldr	r3, [r7, #12]
	}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr

080067ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b086      	sub	sp, #24
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80067c6:	2300      	movs	r3, #0
 80067c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10d      	bne.n	80067f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d14d      	bne.n	800687c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 fff7 	bl	80077d8 <xTaskPriorityDisinherit>
 80067ea:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	605a      	str	r2, [r3, #4]
 80067f2:	e043      	b.n	800687c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d119      	bne.n	800682e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6898      	ldr	r0, [r3, #8]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	461a      	mov	r2, r3
 8006804:	68b9      	ldr	r1, [r7, #8]
 8006806:	f002 f95d 	bl	8008ac4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	441a      	add	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	429a      	cmp	r2, r3
 8006822:	d32b      	bcc.n	800687c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	609a      	str	r2, [r3, #8]
 800682c:	e026      	b.n	800687c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	68d8      	ldr	r0, [r3, #12]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	461a      	mov	r2, r3
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	f002 f943 	bl	8008ac4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	425b      	negs	r3, r3
 8006848:	441a      	add	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d207      	bcs.n	800686a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	425b      	negs	r3, r3
 8006864:	441a      	add	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b02      	cmp	r3, #2
 800686e:	d105      	bne.n	800687c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	3b01      	subs	r3, #1
 800687a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006884:	697b      	ldr	r3, [r7, #20]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b082      	sub	sp, #8
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689c:	2b00      	cmp	r3, #0
 800689e:	d018      	beq.n	80068d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	441a      	add	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d303      	bcc.n	80068c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68d9      	ldr	r1, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	461a      	mov	r2, r3
 80068cc:	6838      	ldr	r0, [r7, #0]
 80068ce:	f002 f8f9 	bl	8008ac4 <memcpy>
	}
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80068e2:	f001 fd93 	bl	800840c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068ee:	e011      	b.n	8006914 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d012      	beq.n	800691e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3324      	adds	r3, #36	; 0x24
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fd03 	bl	8007308 <xTaskRemoveFromEventList>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006908:	f000 fdd8 	bl	80074bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	3b01      	subs	r3, #1
 8006910:	b2db      	uxtb	r3, r3
 8006912:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006918:	2b00      	cmp	r3, #0
 800691a:	dce9      	bgt.n	80068f0 <prvUnlockQueue+0x16>
 800691c:	e000      	b.n	8006920 <prvUnlockQueue+0x46>
					break;
 800691e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	22ff      	movs	r2, #255	; 0xff
 8006924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006928:	f001 fda0 	bl	800846c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800692c:	f001 fd6e 	bl	800840c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006936:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006938:	e011      	b.n	800695e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d012      	beq.n	8006968 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3310      	adds	r3, #16
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fcde 	bl	8007308 <xTaskRemoveFromEventList>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006952:	f000 fdb3 	bl	80074bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006956:	7bbb      	ldrb	r3, [r7, #14]
 8006958:	3b01      	subs	r3, #1
 800695a:	b2db      	uxtb	r3, r3
 800695c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800695e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006962:	2b00      	cmp	r3, #0
 8006964:	dce9      	bgt.n	800693a <prvUnlockQueue+0x60>
 8006966:	e000      	b.n	800696a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006968:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	22ff      	movs	r2, #255	; 0xff
 800696e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006972:	f001 fd7b 	bl	800846c <vPortExitCritical>
}
 8006976:	bf00      	nop
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006986:	f001 fd41 	bl	800840c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	2b00      	cmp	r3, #0
 8006990:	d102      	bne.n	8006998 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006992:	2301      	movs	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	e001      	b.n	800699c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800699c:	f001 fd66 	bl	800846c <vPortExitCritical>

	return xReturn;
 80069a0:	68fb      	ldr	r3, [r7, #12]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069b2:	f001 fd2b 	bl	800840c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069be:	429a      	cmp	r2, r3
 80069c0:	d102      	bne.n	80069c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80069c2:	2301      	movs	r3, #1
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	e001      	b.n	80069cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069cc:	f001 fd4e 	bl	800846c <vPortExitCritical>

	return xReturn;
 80069d0:	68fb      	ldr	r3, [r7, #12]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	e014      	b.n	8006a16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80069ec:	4a0e      	ldr	r2, [pc, #56]	; (8006a28 <vQueueAddToRegistry+0x4c>)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10b      	bne.n	8006a10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80069f8:	490b      	ldr	r1, [pc, #44]	; (8006a28 <vQueueAddToRegistry+0x4c>)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a02:	4a09      	ldr	r2, [pc, #36]	; (8006a28 <vQueueAddToRegistry+0x4c>)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	4413      	add	r3, r2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a0e:	e006      	b.n	8006a1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	3301      	adds	r3, #1
 8006a14:	60fb      	str	r3, [r7, #12]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2b07      	cmp	r3, #7
 8006a1a:	d9e7      	bls.n	80069ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bc80      	pop	{r7}
 8006a26:	4770      	bx	lr
 8006a28:	200008d4 	.word	0x200008d4

08006a2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a3c:	f001 fce6 	bl	800840c <vPortEnterCritical>
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a46:	b25b      	sxtb	r3, r3
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4c:	d103      	bne.n	8006a56 <vQueueWaitForMessageRestricted+0x2a>
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a5c:	b25b      	sxtb	r3, r3
 8006a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a62:	d103      	bne.n	8006a6c <vQueueWaitForMessageRestricted+0x40>
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a6c:	f001 fcfe 	bl	800846c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d106      	bne.n	8006a86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	3324      	adds	r3, #36	; 0x24
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	68b9      	ldr	r1, [r7, #8]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fc15 	bl	80072b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a86:	6978      	ldr	r0, [r7, #20]
 8006a88:	f7ff ff27 	bl	80068da <prvUnlockQueue>
	}
 8006a8c:	bf00      	nop
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08e      	sub	sp, #56	; 0x38
 8006a98:	af04      	add	r7, sp, #16
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10a      	bne.n	8006abe <xTaskCreateStatic+0x2a>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	623b      	str	r3, [r7, #32]
}
 8006aba:	bf00      	nop
 8006abc:	e7fe      	b.n	8006abc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <xTaskCreateStatic+0x46>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	61fb      	str	r3, [r7, #28]
}
 8006ad6:	bf00      	nop
 8006ad8:	e7fe      	b.n	8006ad8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ada:	23a0      	movs	r3, #160	; 0xa0
 8006adc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	2ba0      	cmp	r3, #160	; 0xa0
 8006ae2:	d00a      	beq.n	8006afa <xTaskCreateStatic+0x66>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	61bb      	str	r3, [r7, #24]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d01e      	beq.n	8006b3e <xTaskCreateStatic+0xaa>
 8006b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d01b      	beq.n	8006b3e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b0e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9303      	str	r3, [sp, #12]
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	9302      	str	r3, [sp, #8]
 8006b20:	f107 0314 	add.w	r3, r7, #20
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	68b9      	ldr	r1, [r7, #8]
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 f851 	bl	8006bd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b38:	f000 f8e4 	bl	8006d04 <prvAddNewTaskToReadyList>
 8006b3c:	e001      	b.n	8006b42 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b42:	697b      	ldr	r3, [r7, #20]
	}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3728      	adds	r7, #40	; 0x28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08c      	sub	sp, #48	; 0x30
 8006b50:	af04      	add	r7, sp, #16
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b5c:	88fb      	ldrh	r3, [r7, #6]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f001 fd53 	bl	800860c <pvPortMalloc>
 8006b66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00e      	beq.n	8006b8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006b6e:	20a0      	movs	r0, #160	; 0xa0
 8006b70:	f001 fd4c 	bl	800860c <pvPortMalloc>
 8006b74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	631a      	str	r2, [r3, #48]	; 0x30
 8006b82:	e005      	b.n	8006b90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b84:	6978      	ldr	r0, [r7, #20]
 8006b86:	f001 fe05 	bl	8008794 <vPortFree>
 8006b8a:	e001      	b.n	8006b90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d017      	beq.n	8006bc6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b9e:	88fa      	ldrh	r2, [r7, #6]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	9303      	str	r3, [sp, #12]
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	9302      	str	r3, [sp, #8]
 8006ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006baa:	9301      	str	r3, [sp, #4]
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f80f 	bl	8006bd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bba:	69f8      	ldr	r0, [r7, #28]
 8006bbc:	f000 f8a2 	bl	8006d04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	e002      	b.n	8006bcc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006bcc:	69bb      	ldr	r3, [r7, #24]
	}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3720      	adds	r7, #32
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b088      	sub	sp, #32
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	f023 0307 	bic.w	r3, r3, #7
 8006bfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	617b      	str	r3, [r7, #20]
}
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c20:	2300      	movs	r3, #0
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	e012      	b.n	8006c4c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	7819      	ldrb	r1, [r3, #0]
 8006c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	4413      	add	r3, r2
 8006c34:	3334      	adds	r3, #52	; 0x34
 8006c36:	460a      	mov	r2, r1
 8006c38:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	4413      	add	r3, r2
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d006      	beq.n	8006c54 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	61fb      	str	r3, [r7, #28]
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	2b0f      	cmp	r3, #15
 8006c50:	d9e9      	bls.n	8006c26 <prvInitialiseNewTask+0x4e>
 8006c52:	e000      	b.n	8006c56 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006c54:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	2b06      	cmp	r3, #6
 8006c62:	d901      	bls.n	8006c68 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c64:	2306      	movs	r3, #6
 8006c66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c72:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c76:	2200      	movs	r2, #0
 8006c78:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe ff27 	bl	8005ad2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	3318      	adds	r3, #24
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fe ff22 	bl	8005ad2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	f1c3 0207 	rsb	r2, r3, #7
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	334c      	adds	r3, #76	; 0x4c
 8006cb8:	224c      	movs	r2, #76	; 0x4c
 8006cba:	2100      	movs	r1, #0
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f001 fe7d 	bl	80089bc <memset>
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	4a0c      	ldr	r2, [pc, #48]	; (8006cf8 <prvInitialiseNewTask+0x120>)
 8006cc6:	651a      	str	r2, [r3, #80]	; 0x50
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cca:	4a0c      	ldr	r2, [pc, #48]	; (8006cfc <prvInitialiseNewTask+0x124>)
 8006ccc:	655a      	str	r2, [r3, #84]	; 0x54
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	4a0b      	ldr	r2, [pc, #44]	; (8006d00 <prvInitialiseNewTask+0x128>)
 8006cd2:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	68f9      	ldr	r1, [r7, #12]
 8006cd8:	69b8      	ldr	r0, [r7, #24]
 8006cda:	f001 faa5 	bl	8008228 <pxPortInitialiseStack>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cf0:	bf00      	nop
 8006cf2:	3720      	adds	r7, #32
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	2000175c 	.word	0x2000175c
 8006cfc:	200017c4 	.word	0x200017c4
 8006d00:	2000182c 	.word	0x2000182c

08006d04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d0c:	f001 fb7e 	bl	800840c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d10:	4b2a      	ldr	r3, [pc, #168]	; (8006dbc <prvAddNewTaskToReadyList+0xb8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	4a29      	ldr	r2, [pc, #164]	; (8006dbc <prvAddNewTaskToReadyList+0xb8>)
 8006d18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d1a:	4b29      	ldr	r3, [pc, #164]	; (8006dc0 <prvAddNewTaskToReadyList+0xbc>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d22:	4a27      	ldr	r2, [pc, #156]	; (8006dc0 <prvAddNewTaskToReadyList+0xbc>)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d28:	4b24      	ldr	r3, [pc, #144]	; (8006dbc <prvAddNewTaskToReadyList+0xb8>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d110      	bne.n	8006d52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d30:	f000 fbe8 	bl	8007504 <prvInitialiseTaskLists>
 8006d34:	e00d      	b.n	8006d52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d36:	4b23      	ldr	r3, [pc, #140]	; (8006dc4 <prvAddNewTaskToReadyList+0xc0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d109      	bne.n	8006d52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d3e:	4b20      	ldr	r3, [pc, #128]	; (8006dc0 <prvAddNewTaskToReadyList+0xbc>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d802      	bhi.n	8006d52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d4c:	4a1c      	ldr	r2, [pc, #112]	; (8006dc0 <prvAddNewTaskToReadyList+0xbc>)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d52:	4b1d      	ldr	r3, [pc, #116]	; (8006dc8 <prvAddNewTaskToReadyList+0xc4>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3301      	adds	r3, #1
 8006d58:	4a1b      	ldr	r2, [pc, #108]	; (8006dc8 <prvAddNewTaskToReadyList+0xc4>)
 8006d5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	2201      	movs	r2, #1
 8006d62:	409a      	lsls	r2, r3
 8006d64:	4b19      	ldr	r3, [pc, #100]	; (8006dcc <prvAddNewTaskToReadyList+0xc8>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	4a18      	ldr	r2, [pc, #96]	; (8006dcc <prvAddNewTaskToReadyList+0xc8>)
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4a15      	ldr	r2, [pc, #84]	; (8006dd0 <prvAddNewTaskToReadyList+0xcc>)
 8006d7c:	441a      	add	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3304      	adds	r3, #4
 8006d82:	4619      	mov	r1, r3
 8006d84:	4610      	mov	r0, r2
 8006d86:	f7fe feb0 	bl	8005aea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d8a:	f001 fb6f 	bl	800846c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d8e:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <prvAddNewTaskToReadyList+0xc0>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00e      	beq.n	8006db4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d96:	4b0a      	ldr	r3, [pc, #40]	; (8006dc0 <prvAddNewTaskToReadyList+0xbc>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d207      	bcs.n	8006db4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006da4:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <prvAddNewTaskToReadyList+0xd0>)
 8006da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	20000a14 	.word	0x20000a14
 8006dc0:	20000914 	.word	0x20000914
 8006dc4:	20000a20 	.word	0x20000a20
 8006dc8:	20000a30 	.word	0x20000a30
 8006dcc:	20000a1c 	.word	0x20000a1c
 8006dd0:	20000918 	.word	0x20000918
 8006dd4:	e000ed04 	.word	0xe000ed04

08006dd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08a      	sub	sp, #40	; 0x28
 8006ddc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006de6:	463a      	mov	r2, r7
 8006de8:	1d39      	adds	r1, r7, #4
 8006dea:	f107 0308 	add.w	r3, r7, #8
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7f9 fb56 	bl	80004a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	9202      	str	r2, [sp, #8]
 8006dfc:	9301      	str	r3, [sp, #4]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	2300      	movs	r3, #0
 8006e04:	460a      	mov	r2, r1
 8006e06:	4924      	ldr	r1, [pc, #144]	; (8006e98 <vTaskStartScheduler+0xc0>)
 8006e08:	4824      	ldr	r0, [pc, #144]	; (8006e9c <vTaskStartScheduler+0xc4>)
 8006e0a:	f7ff fe43 	bl	8006a94 <xTaskCreateStatic>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	4a23      	ldr	r2, [pc, #140]	; (8006ea0 <vTaskStartScheduler+0xc8>)
 8006e12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e14:	4b22      	ldr	r3, [pc, #136]	; (8006ea0 <vTaskStartScheduler+0xc8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	e001      	b.n	8006e26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d102      	bne.n	8006e32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e2c:	f000 fe74 	bl	8007b18 <xTimerCreateTimerTask>
 8006e30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d11b      	bne.n	8006e70 <vTaskStartScheduler+0x98>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	613b      	str	r3, [r7, #16]
}
 8006e4a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e4c:	4b15      	ldr	r3, [pc, #84]	; (8006ea4 <vTaskStartScheduler+0xcc>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	334c      	adds	r3, #76	; 0x4c
 8006e52:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <vTaskStartScheduler+0xd0>)
 8006e54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e56:	4b15      	ldr	r3, [pc, #84]	; (8006eac <vTaskStartScheduler+0xd4>)
 8006e58:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e5e:	4b14      	ldr	r3, [pc, #80]	; (8006eb0 <vTaskStartScheduler+0xd8>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006e64:	4b13      	ldr	r3, [pc, #76]	; (8006eb4 <vTaskStartScheduler+0xdc>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e6a:	f001 fa5d 	bl	8008328 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e6e:	e00e      	b.n	8006e8e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e76:	d10a      	bne.n	8006e8e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	60fb      	str	r3, [r7, #12]
}
 8006e8a:	bf00      	nop
 8006e8c:	e7fe      	b.n	8006e8c <vTaskStartScheduler+0xb4>
}
 8006e8e:	bf00      	nop
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	08008c00 	.word	0x08008c00
 8006e9c:	080074d5 	.word	0x080074d5
 8006ea0:	20000a38 	.word	0x20000a38
 8006ea4:	20000914 	.word	0x20000914
 8006ea8:	2000005c 	.word	0x2000005c
 8006eac:	20000a34 	.word	0x20000a34
 8006eb0:	20000a20 	.word	0x20000a20
 8006eb4:	20000a18 	.word	0x20000a18

08006eb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <vTaskSuspendAll+0x18>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	4a03      	ldr	r2, [pc, #12]	; (8006ed0 <vTaskSuspendAll+0x18>)
 8006ec4:	6013      	str	r3, [r2, #0]
}
 8006ec6:	bf00      	nop
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bc80      	pop	{r7}
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	20000a3c 	.word	0x20000a3c

08006ed4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ee2:	4b41      	ldr	r3, [pc, #260]	; (8006fe8 <xTaskResumeAll+0x114>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10a      	bne.n	8006f00 <xTaskResumeAll+0x2c>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	603b      	str	r3, [r7, #0]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f00:	f001 fa84 	bl	800840c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f04:	4b38      	ldr	r3, [pc, #224]	; (8006fe8 <xTaskResumeAll+0x114>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	4a37      	ldr	r2, [pc, #220]	; (8006fe8 <xTaskResumeAll+0x114>)
 8006f0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f0e:	4b36      	ldr	r3, [pc, #216]	; (8006fe8 <xTaskResumeAll+0x114>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d161      	bne.n	8006fda <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f16:	4b35      	ldr	r3, [pc, #212]	; (8006fec <xTaskResumeAll+0x118>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d05d      	beq.n	8006fda <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f1e:	e02e      	b.n	8006f7e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006f20:	4b33      	ldr	r3, [pc, #204]	; (8006ff0 <xTaskResumeAll+0x11c>)
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3318      	adds	r3, #24
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe fe37 	bl	8005ba0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3304      	adds	r3, #4
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe fe32 	bl	8005ba0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	2201      	movs	r2, #1
 8006f42:	409a      	lsls	r2, r3
 8006f44:	4b2b      	ldr	r3, [pc, #172]	; (8006ff4 <xTaskResumeAll+0x120>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	4a2a      	ldr	r2, [pc, #168]	; (8006ff4 <xTaskResumeAll+0x120>)
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f52:	4613      	mov	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4a27      	ldr	r2, [pc, #156]	; (8006ff8 <xTaskResumeAll+0x124>)
 8006f5c:	441a      	add	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3304      	adds	r3, #4
 8006f62:	4619      	mov	r1, r3
 8006f64:	4610      	mov	r0, r2
 8006f66:	f7fe fdc0 	bl	8005aea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6e:	4b23      	ldr	r3, [pc, #140]	; (8006ffc <xTaskResumeAll+0x128>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d302      	bcc.n	8006f7e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006f78:	4b21      	ldr	r3, [pc, #132]	; (8007000 <xTaskResumeAll+0x12c>)
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f7e:	4b1c      	ldr	r3, [pc, #112]	; (8006ff0 <xTaskResumeAll+0x11c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1cc      	bne.n	8006f20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f8c:	f000 fb5c 	bl	8007648 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f90:	4b1c      	ldr	r3, [pc, #112]	; (8007004 <xTaskResumeAll+0x130>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d010      	beq.n	8006fbe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f9c:	f000 f844 	bl	8007028 <xTaskIncrementTick>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006fa6:	4b16      	ldr	r3, [pc, #88]	; (8007000 <xTaskResumeAll+0x12c>)
 8006fa8:	2201      	movs	r2, #1
 8006faa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1f1      	bne.n	8006f9c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006fb8:	4b12      	ldr	r3, [pc, #72]	; (8007004 <xTaskResumeAll+0x130>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fbe:	4b10      	ldr	r3, [pc, #64]	; (8007000 <xTaskResumeAll+0x12c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fca:	4b0f      	ldr	r3, [pc, #60]	; (8007008 <xTaskResumeAll+0x134>)
 8006fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fda:	f001 fa47 	bl	800846c <vPortExitCritical>

	return xAlreadyYielded;
 8006fde:	68bb      	ldr	r3, [r7, #8]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	20000a3c 	.word	0x20000a3c
 8006fec:	20000a14 	.word	0x20000a14
 8006ff0:	200009d4 	.word	0x200009d4
 8006ff4:	20000a1c 	.word	0x20000a1c
 8006ff8:	20000918 	.word	0x20000918
 8006ffc:	20000914 	.word	0x20000914
 8007000:	20000a28 	.word	0x20000a28
 8007004:	20000a24 	.word	0x20000a24
 8007008:	e000ed04 	.word	0xe000ed04

0800700c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007012:	4b04      	ldr	r3, [pc, #16]	; (8007024 <xTaskGetTickCount+0x18>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007018:	687b      	ldr	r3, [r7, #4]
}
 800701a:	4618      	mov	r0, r3
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr
 8007024:	20000a18 	.word	0x20000a18

08007028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007032:	4b51      	ldr	r3, [pc, #324]	; (8007178 <xTaskIncrementTick+0x150>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f040 808d 	bne.w	8007156 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800703c:	4b4f      	ldr	r3, [pc, #316]	; (800717c <xTaskIncrementTick+0x154>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3301      	adds	r3, #1
 8007042:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007044:	4a4d      	ldr	r2, [pc, #308]	; (800717c <xTaskIncrementTick+0x154>)
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d120      	bne.n	8007092 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007050:	4b4b      	ldr	r3, [pc, #300]	; (8007180 <xTaskIncrementTick+0x158>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <xTaskIncrementTick+0x48>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	603b      	str	r3, [r7, #0]
}
 800706c:	bf00      	nop
 800706e:	e7fe      	b.n	800706e <xTaskIncrementTick+0x46>
 8007070:	4b43      	ldr	r3, [pc, #268]	; (8007180 <xTaskIncrementTick+0x158>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	60fb      	str	r3, [r7, #12]
 8007076:	4b43      	ldr	r3, [pc, #268]	; (8007184 <xTaskIncrementTick+0x15c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a41      	ldr	r2, [pc, #260]	; (8007180 <xTaskIncrementTick+0x158>)
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	4a41      	ldr	r2, [pc, #260]	; (8007184 <xTaskIncrementTick+0x15c>)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	4b40      	ldr	r3, [pc, #256]	; (8007188 <xTaskIncrementTick+0x160>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3301      	adds	r3, #1
 800708a:	4a3f      	ldr	r2, [pc, #252]	; (8007188 <xTaskIncrementTick+0x160>)
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	f000 fadb 	bl	8007648 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007092:	4b3e      	ldr	r3, [pc, #248]	; (800718c <xTaskIncrementTick+0x164>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	429a      	cmp	r2, r3
 800709a:	d34d      	bcc.n	8007138 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800709c:	4b38      	ldr	r3, [pc, #224]	; (8007180 <xTaskIncrementTick+0x158>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <xTaskIncrementTick+0x82>
 80070a6:	2301      	movs	r3, #1
 80070a8:	e000      	b.n	80070ac <xTaskIncrementTick+0x84>
 80070aa:	2300      	movs	r3, #0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d004      	beq.n	80070ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070b0:	4b36      	ldr	r3, [pc, #216]	; (800718c <xTaskIncrementTick+0x164>)
 80070b2:	f04f 32ff 	mov.w	r2, #4294967295
 80070b6:	601a      	str	r2, [r3, #0]
					break;
 80070b8:	e03e      	b.n	8007138 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80070ba:	4b31      	ldr	r3, [pc, #196]	; (8007180 <xTaskIncrementTick+0x158>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d203      	bcs.n	80070da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070d2:	4a2e      	ldr	r2, [pc, #184]	; (800718c <xTaskIncrementTick+0x164>)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6013      	str	r3, [r2, #0]
						break;
 80070d8:	e02e      	b.n	8007138 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	3304      	adds	r3, #4
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fd5e 	bl	8005ba0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d004      	beq.n	80070f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	3318      	adds	r3, #24
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fe fd55 	bl	8005ba0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fa:	2201      	movs	r2, #1
 80070fc:	409a      	lsls	r2, r3
 80070fe:	4b24      	ldr	r3, [pc, #144]	; (8007190 <xTaskIncrementTick+0x168>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4313      	orrs	r3, r2
 8007104:	4a22      	ldr	r2, [pc, #136]	; (8007190 <xTaskIncrementTick+0x168>)
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710c:	4613      	mov	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4a1f      	ldr	r2, [pc, #124]	; (8007194 <xTaskIncrementTick+0x16c>)
 8007116:	441a      	add	r2, r3
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	3304      	adds	r3, #4
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f7fe fce3 	bl	8005aea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007128:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <xTaskIncrementTick+0x170>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	429a      	cmp	r2, r3
 8007130:	d3b4      	bcc.n	800709c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007132:	2301      	movs	r3, #1
 8007134:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007136:	e7b1      	b.n	800709c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007138:	4b17      	ldr	r3, [pc, #92]	; (8007198 <xTaskIncrementTick+0x170>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713e:	4915      	ldr	r1, [pc, #84]	; (8007194 <xTaskIncrementTick+0x16c>)
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d907      	bls.n	8007160 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007150:	2301      	movs	r3, #1
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	e004      	b.n	8007160 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007156:	4b11      	ldr	r3, [pc, #68]	; (800719c <xTaskIncrementTick+0x174>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3301      	adds	r3, #1
 800715c:	4a0f      	ldr	r2, [pc, #60]	; (800719c <xTaskIncrementTick+0x174>)
 800715e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007160:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <xTaskIncrementTick+0x178>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007168:	2301      	movs	r3, #1
 800716a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800716c:	697b      	ldr	r3, [r7, #20]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000a3c 	.word	0x20000a3c
 800717c:	20000a18 	.word	0x20000a18
 8007180:	200009cc 	.word	0x200009cc
 8007184:	200009d0 	.word	0x200009d0
 8007188:	20000a2c 	.word	0x20000a2c
 800718c:	20000a34 	.word	0x20000a34
 8007190:	20000a1c 	.word	0x20000a1c
 8007194:	20000918 	.word	0x20000918
 8007198:	20000914 	.word	0x20000914
 800719c:	20000a24 	.word	0x20000a24
 80071a0:	20000a28 	.word	0x20000a28

080071a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071aa:	4b29      	ldr	r3, [pc, #164]	; (8007250 <vTaskSwitchContext+0xac>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071b2:	4b28      	ldr	r3, [pc, #160]	; (8007254 <vTaskSwitchContext+0xb0>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071b8:	e044      	b.n	8007244 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80071ba:	4b26      	ldr	r3, [pc, #152]	; (8007254 <vTaskSwitchContext+0xb0>)
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80071c0:	4b25      	ldr	r3, [pc, #148]	; (8007258 <vTaskSwitchContext+0xb4>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	fab3 f383 	clz	r3, r3
 80071cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80071ce:	7afb      	ldrb	r3, [r7, #11]
 80071d0:	f1c3 031f 	rsb	r3, r3, #31
 80071d4:	617b      	str	r3, [r7, #20]
 80071d6:	4921      	ldr	r1, [pc, #132]	; (800725c <vTaskSwitchContext+0xb8>)
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	4613      	mov	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	440b      	add	r3, r1
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10a      	bne.n	8007200 <vTaskSwitchContext+0x5c>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	607b      	str	r3, [r7, #4]
}
 80071fc:	bf00      	nop
 80071fe:	e7fe      	b.n	80071fe <vTaskSwitchContext+0x5a>
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4a14      	ldr	r2, [pc, #80]	; (800725c <vTaskSwitchContext+0xb8>)
 800720c:	4413      	add	r3, r2
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	605a      	str	r2, [r3, #4]
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	3308      	adds	r3, #8
 8007222:	429a      	cmp	r2, r3
 8007224:	d104      	bne.n	8007230 <vTaskSwitchContext+0x8c>
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	605a      	str	r2, [r3, #4]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	4a0a      	ldr	r2, [pc, #40]	; (8007260 <vTaskSwitchContext+0xbc>)
 8007238:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800723a:	4b09      	ldr	r3, [pc, #36]	; (8007260 <vTaskSwitchContext+0xbc>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	334c      	adds	r3, #76	; 0x4c
 8007240:	4a08      	ldr	r2, [pc, #32]	; (8007264 <vTaskSwitchContext+0xc0>)
 8007242:	6013      	str	r3, [r2, #0]
}
 8007244:	bf00      	nop
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	20000a3c 	.word	0x20000a3c
 8007254:	20000a28 	.word	0x20000a28
 8007258:	20000a1c 	.word	0x20000a1c
 800725c:	20000918 	.word	0x20000918
 8007260:	20000914 	.word	0x20000914
 8007264:	2000005c 	.word	0x2000005c

08007268 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10a      	bne.n	800728e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	60fb      	str	r3, [r7, #12]
}
 800728a:	bf00      	nop
 800728c:	e7fe      	b.n	800728c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800728e:	4b07      	ldr	r3, [pc, #28]	; (80072ac <vTaskPlaceOnEventList+0x44>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3318      	adds	r3, #24
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7fe fc4a 	bl	8005b30 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800729c:	2101      	movs	r1, #1
 800729e:	6838      	ldr	r0, [r7, #0]
 80072a0:	f000 fbd4 	bl	8007a4c <prvAddCurrentTaskToDelayedList>
}
 80072a4:	bf00      	nop
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	20000914 	.word	0x20000914

080072b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10a      	bne.n	80072d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80072c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	617b      	str	r3, [r7, #20]
}
 80072d4:	bf00      	nop
 80072d6:	e7fe      	b.n	80072d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072d8:	4b0a      	ldr	r3, [pc, #40]	; (8007304 <vTaskPlaceOnEventListRestricted+0x54>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3318      	adds	r3, #24
 80072de:	4619      	mov	r1, r3
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f7fe fc02 	bl	8005aea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072ec:	f04f 33ff 	mov.w	r3, #4294967295
 80072f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	68b8      	ldr	r0, [r7, #8]
 80072f6:	f000 fba9 	bl	8007a4c <prvAddCurrentTaskToDelayedList>
	}
 80072fa:	bf00      	nop
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	20000914 	.word	0x20000914

08007308 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10a      	bne.n	8007334 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	60fb      	str	r3, [r7, #12]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	3318      	adds	r3, #24
 8007338:	4618      	mov	r0, r3
 800733a:	f7fe fc31 	bl	8005ba0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800733e:	4b1d      	ldr	r3, [pc, #116]	; (80073b4 <xTaskRemoveFromEventList+0xac>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d11c      	bne.n	8007380 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	3304      	adds	r3, #4
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe fc28 	bl	8005ba0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	2201      	movs	r2, #1
 8007356:	409a      	lsls	r2, r3
 8007358:	4b17      	ldr	r3, [pc, #92]	; (80073b8 <xTaskRemoveFromEventList+0xb0>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4313      	orrs	r3, r2
 800735e:	4a16      	ldr	r2, [pc, #88]	; (80073b8 <xTaskRemoveFromEventList+0xb0>)
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4a13      	ldr	r2, [pc, #76]	; (80073bc <xTaskRemoveFromEventList+0xb4>)
 8007370:	441a      	add	r2, r3
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	3304      	adds	r3, #4
 8007376:	4619      	mov	r1, r3
 8007378:	4610      	mov	r0, r2
 800737a:	f7fe fbb6 	bl	8005aea <vListInsertEnd>
 800737e:	e005      	b.n	800738c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	3318      	adds	r3, #24
 8007384:	4619      	mov	r1, r3
 8007386:	480e      	ldr	r0, [pc, #56]	; (80073c0 <xTaskRemoveFromEventList+0xb8>)
 8007388:	f7fe fbaf 	bl	8005aea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007390:	4b0c      	ldr	r3, [pc, #48]	; (80073c4 <xTaskRemoveFromEventList+0xbc>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007396:	429a      	cmp	r2, r3
 8007398:	d905      	bls.n	80073a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800739a:	2301      	movs	r3, #1
 800739c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800739e:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <xTaskRemoveFromEventList+0xc0>)
 80073a0:	2201      	movs	r2, #1
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	e001      	b.n	80073aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80073a6:	2300      	movs	r3, #0
 80073a8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80073aa:	697b      	ldr	r3, [r7, #20]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	20000a3c 	.word	0x20000a3c
 80073b8:	20000a1c 	.word	0x20000a1c
 80073bc:	20000918 	.word	0x20000918
 80073c0:	200009d4 	.word	0x200009d4
 80073c4:	20000914 	.word	0x20000914
 80073c8:	20000a28 	.word	0x20000a28

080073cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073d4:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <vTaskInternalSetTimeOutState+0x24>)
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073dc:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <vTaskInternalSetTimeOutState+0x28>)
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	605a      	str	r2, [r3, #4]
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bc80      	pop	{r7}
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	20000a2c 	.word	0x20000a2c
 80073f4:	20000a18 	.word	0x20000a18

080073f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	613b      	str	r3, [r7, #16]
}
 800741a:	bf00      	nop
 800741c:	e7fe      	b.n	800741c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10a      	bne.n	800743a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	60fb      	str	r3, [r7, #12]
}
 8007436:	bf00      	nop
 8007438:	e7fe      	b.n	8007438 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800743a:	f000 ffe7 	bl	800840c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800743e:	4b1d      	ldr	r3, [pc, #116]	; (80074b4 <xTaskCheckForTimeOut+0xbc>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	69ba      	ldr	r2, [r7, #24]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d102      	bne.n	800745e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007458:	2300      	movs	r3, #0
 800745a:	61fb      	str	r3, [r7, #28]
 800745c:	e023      	b.n	80074a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	4b15      	ldr	r3, [pc, #84]	; (80074b8 <xTaskCheckForTimeOut+0xc0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d007      	beq.n	800747a <xTaskCheckForTimeOut+0x82>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	429a      	cmp	r2, r3
 8007472:	d302      	bcc.n	800747a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007474:	2301      	movs	r3, #1
 8007476:	61fb      	str	r3, [r7, #28]
 8007478:	e015      	b.n	80074a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	429a      	cmp	r2, r3
 8007482:	d20b      	bcs.n	800749c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	1ad2      	subs	r2, r2, r3
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7ff ff9b 	bl	80073cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007496:	2300      	movs	r3, #0
 8007498:	61fb      	str	r3, [r7, #28]
 800749a:	e004      	b.n	80074a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074a2:	2301      	movs	r3, #1
 80074a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074a6:	f000 ffe1 	bl	800846c <vPortExitCritical>

	return xReturn;
 80074aa:	69fb      	ldr	r3, [r7, #28]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3720      	adds	r7, #32
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20000a18 	.word	0x20000a18
 80074b8:	20000a2c 	.word	0x20000a2c

080074bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074c0:	4b03      	ldr	r3, [pc, #12]	; (80074d0 <vTaskMissedYield+0x14>)
 80074c2:	2201      	movs	r2, #1
 80074c4:	601a      	str	r2, [r3, #0]
}
 80074c6:	bf00      	nop
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bc80      	pop	{r7}
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	20000a28 	.word	0x20000a28

080074d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074dc:	f000 f852 	bl	8007584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074e0:	4b06      	ldr	r3, [pc, #24]	; (80074fc <prvIdleTask+0x28>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d9f9      	bls.n	80074dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80074e8:	4b05      	ldr	r3, [pc, #20]	; (8007500 <prvIdleTask+0x2c>)
 80074ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074f8:	e7f0      	b.n	80074dc <prvIdleTask+0x8>
 80074fa:	bf00      	nop
 80074fc:	20000918 	.word	0x20000918
 8007500:	e000ed04 	.word	0xe000ed04

08007504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800750a:	2300      	movs	r3, #0
 800750c:	607b      	str	r3, [r7, #4]
 800750e:	e00c      	b.n	800752a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4a12      	ldr	r2, [pc, #72]	; (8007564 <prvInitialiseTaskLists+0x60>)
 800751c:	4413      	add	r3, r2
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe fab8 	bl	8005a94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3301      	adds	r3, #1
 8007528:	607b      	str	r3, [r7, #4]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b06      	cmp	r3, #6
 800752e:	d9ef      	bls.n	8007510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007530:	480d      	ldr	r0, [pc, #52]	; (8007568 <prvInitialiseTaskLists+0x64>)
 8007532:	f7fe faaf 	bl	8005a94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007536:	480d      	ldr	r0, [pc, #52]	; (800756c <prvInitialiseTaskLists+0x68>)
 8007538:	f7fe faac 	bl	8005a94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800753c:	480c      	ldr	r0, [pc, #48]	; (8007570 <prvInitialiseTaskLists+0x6c>)
 800753e:	f7fe faa9 	bl	8005a94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007542:	480c      	ldr	r0, [pc, #48]	; (8007574 <prvInitialiseTaskLists+0x70>)
 8007544:	f7fe faa6 	bl	8005a94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007548:	480b      	ldr	r0, [pc, #44]	; (8007578 <prvInitialiseTaskLists+0x74>)
 800754a:	f7fe faa3 	bl	8005a94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800754e:	4b0b      	ldr	r3, [pc, #44]	; (800757c <prvInitialiseTaskLists+0x78>)
 8007550:	4a05      	ldr	r2, [pc, #20]	; (8007568 <prvInitialiseTaskLists+0x64>)
 8007552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007554:	4b0a      	ldr	r3, [pc, #40]	; (8007580 <prvInitialiseTaskLists+0x7c>)
 8007556:	4a05      	ldr	r2, [pc, #20]	; (800756c <prvInitialiseTaskLists+0x68>)
 8007558:	601a      	str	r2, [r3, #0]
}
 800755a:	bf00      	nop
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20000918 	.word	0x20000918
 8007568:	200009a4 	.word	0x200009a4
 800756c:	200009b8 	.word	0x200009b8
 8007570:	200009d4 	.word	0x200009d4
 8007574:	200009e8 	.word	0x200009e8
 8007578:	20000a00 	.word	0x20000a00
 800757c:	200009cc 	.word	0x200009cc
 8007580:	200009d0 	.word	0x200009d0

08007584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800758a:	e019      	b.n	80075c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800758c:	f000 ff3e 	bl	800840c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007590:	4b10      	ldr	r3, [pc, #64]	; (80075d4 <prvCheckTasksWaitingTermination+0x50>)
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3304      	adds	r3, #4
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe faff 	bl	8005ba0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075a2:	4b0d      	ldr	r3, [pc, #52]	; (80075d8 <prvCheckTasksWaitingTermination+0x54>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	4a0b      	ldr	r2, [pc, #44]	; (80075d8 <prvCheckTasksWaitingTermination+0x54>)
 80075aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075ac:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <prvCheckTasksWaitingTermination+0x58>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	4a0a      	ldr	r2, [pc, #40]	; (80075dc <prvCheckTasksWaitingTermination+0x58>)
 80075b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075b6:	f000 ff59 	bl	800846c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f810 	bl	80075e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075c0:	4b06      	ldr	r3, [pc, #24]	; (80075dc <prvCheckTasksWaitingTermination+0x58>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1e1      	bne.n	800758c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	200009e8 	.word	0x200009e8
 80075d8:	20000a14 	.word	0x20000a14
 80075dc:	200009fc 	.word	0x200009fc

080075e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	334c      	adds	r3, #76	; 0x4c
 80075ec:	4618      	mov	r0, r3
 80075ee:	f001 f9ed 	bl	80089cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d108      	bne.n	800760e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007600:	4618      	mov	r0, r3
 8007602:	f001 f8c7 	bl	8008794 <vPortFree>
				vPortFree( pxTCB );
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 f8c4 	bl	8008794 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800760c:	e018      	b.n	8007640 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007614:	2b01      	cmp	r3, #1
 8007616:	d103      	bne.n	8007620 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 f8bb 	bl	8008794 <vPortFree>
	}
 800761e:	e00f      	b.n	8007640 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007626:	2b02      	cmp	r3, #2
 8007628:	d00a      	beq.n	8007640 <prvDeleteTCB+0x60>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	60fb      	str	r3, [r7, #12]
}
 800763c:	bf00      	nop
 800763e:	e7fe      	b.n	800763e <prvDeleteTCB+0x5e>
	}
 8007640:	bf00      	nop
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800764e:	4b0e      	ldr	r3, [pc, #56]	; (8007688 <prvResetNextTaskUnblockTime+0x40>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <prvResetNextTaskUnblockTime+0x14>
 8007658:	2301      	movs	r3, #1
 800765a:	e000      	b.n	800765e <prvResetNextTaskUnblockTime+0x16>
 800765c:	2300      	movs	r3, #0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007662:	4b0a      	ldr	r3, [pc, #40]	; (800768c <prvResetNextTaskUnblockTime+0x44>)
 8007664:	f04f 32ff 	mov.w	r2, #4294967295
 8007668:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800766a:	e008      	b.n	800767e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800766c:	4b06      	ldr	r3, [pc, #24]	; (8007688 <prvResetNextTaskUnblockTime+0x40>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	4a04      	ldr	r2, [pc, #16]	; (800768c <prvResetNextTaskUnblockTime+0x44>)
 800767c:	6013      	str	r3, [r2, #0]
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	bc80      	pop	{r7}
 8007686:	4770      	bx	lr
 8007688:	200009cc 	.word	0x200009cc
 800768c:	20000a34 	.word	0x20000a34

08007690 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007696:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <xTaskGetSchedulerState+0x34>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d102      	bne.n	80076a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800769e:	2301      	movs	r3, #1
 80076a0:	607b      	str	r3, [r7, #4]
 80076a2:	e008      	b.n	80076b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076a4:	4b08      	ldr	r3, [pc, #32]	; (80076c8 <xTaskGetSchedulerState+0x38>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076ac:	2302      	movs	r3, #2
 80076ae:	607b      	str	r3, [r7, #4]
 80076b0:	e001      	b.n	80076b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076b2:	2300      	movs	r3, #0
 80076b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076b6:	687b      	ldr	r3, [r7, #4]
	}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	20000a20 	.word	0x20000a20
 80076c8:	20000a3c 	.word	0x20000a3c

080076cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d06e      	beq.n	80077c0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e6:	4b39      	ldr	r3, [pc, #228]	; (80077cc <xTaskPriorityInherit+0x100>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d25e      	bcs.n	80077ae <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	db06      	blt.n	8007706 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076f8:	4b34      	ldr	r3, [pc, #208]	; (80077cc <xTaskPriorityInherit+0x100>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fe:	f1c3 0207 	rsb	r2, r3, #7
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	6959      	ldr	r1, [r3, #20]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4a2e      	ldr	r2, [pc, #184]	; (80077d0 <xTaskPriorityInherit+0x104>)
 8007718:	4413      	add	r3, r2
 800771a:	4299      	cmp	r1, r3
 800771c:	d101      	bne.n	8007722 <xTaskPriorityInherit+0x56>
 800771e:	2301      	movs	r3, #1
 8007720:	e000      	b.n	8007724 <xTaskPriorityInherit+0x58>
 8007722:	2300      	movs	r3, #0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d03a      	beq.n	800779e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	3304      	adds	r3, #4
 800772c:	4618      	mov	r0, r3
 800772e:	f7fe fa37 	bl	8005ba0 <uxListRemove>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d115      	bne.n	8007764 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800773c:	4924      	ldr	r1, [pc, #144]	; (80077d0 <xTaskPriorityInherit+0x104>)
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	440b      	add	r3, r1
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10a      	bne.n	8007764 <xTaskPriorityInherit+0x98>
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	2201      	movs	r2, #1
 8007754:	fa02 f303 	lsl.w	r3, r2, r3
 8007758:	43da      	mvns	r2, r3
 800775a:	4b1e      	ldr	r3, [pc, #120]	; (80077d4 <xTaskPriorityInherit+0x108>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4013      	ands	r3, r2
 8007760:	4a1c      	ldr	r2, [pc, #112]	; (80077d4 <xTaskPriorityInherit+0x108>)
 8007762:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007764:	4b19      	ldr	r3, [pc, #100]	; (80077cc <xTaskPriorityInherit+0x100>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007772:	2201      	movs	r2, #1
 8007774:	409a      	lsls	r2, r3
 8007776:	4b17      	ldr	r3, [pc, #92]	; (80077d4 <xTaskPriorityInherit+0x108>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4313      	orrs	r3, r2
 800777c:	4a15      	ldr	r2, [pc, #84]	; (80077d4 <xTaskPriorityInherit+0x108>)
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007784:	4613      	mov	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4a10      	ldr	r2, [pc, #64]	; (80077d0 <xTaskPriorityInherit+0x104>)
 800778e:	441a      	add	r2, r3
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	3304      	adds	r3, #4
 8007794:	4619      	mov	r1, r3
 8007796:	4610      	mov	r0, r2
 8007798:	f7fe f9a7 	bl	8005aea <vListInsertEnd>
 800779c:	e004      	b.n	80077a8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800779e:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <xTaskPriorityInherit+0x100>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80077a8:	2301      	movs	r3, #1
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	e008      	b.n	80077c0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077b2:	4b06      	ldr	r3, [pc, #24]	; (80077cc <xTaskPriorityInherit+0x100>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d201      	bcs.n	80077c0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80077bc:	2301      	movs	r3, #1
 80077be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077c0:	68fb      	ldr	r3, [r7, #12]
	}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20000914 	.word	0x20000914
 80077d0:	20000918 	.word	0x20000918
 80077d4:	20000a1c 	.word	0x20000a1c

080077d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b086      	sub	sp, #24
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077e4:	2300      	movs	r3, #0
 80077e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d06e      	beq.n	80078cc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077ee:	4b3a      	ldr	r3, [pc, #232]	; (80078d8 <xTaskPriorityDisinherit+0x100>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d00a      	beq.n	800780e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	60fb      	str	r3, [r7, #12]
}
 800780a:	bf00      	nop
 800780c:	e7fe      	b.n	800780c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10a      	bne.n	800782c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	60bb      	str	r3, [r7, #8]
}
 8007828:	bf00      	nop
 800782a:	e7fe      	b.n	800782a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007830:	1e5a      	subs	r2, r3, #1
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783e:	429a      	cmp	r2, r3
 8007840:	d044      	beq.n	80078cc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007846:	2b00      	cmp	r3, #0
 8007848:	d140      	bne.n	80078cc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	3304      	adds	r3, #4
 800784e:	4618      	mov	r0, r3
 8007850:	f7fe f9a6 	bl	8005ba0 <uxListRemove>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d115      	bne.n	8007886 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785e:	491f      	ldr	r1, [pc, #124]	; (80078dc <xTaskPriorityDisinherit+0x104>)
 8007860:	4613      	mov	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	440b      	add	r3, r1
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10a      	bne.n	8007886 <xTaskPriorityDisinherit+0xae>
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	2201      	movs	r2, #1
 8007876:	fa02 f303 	lsl.w	r3, r2, r3
 800787a:	43da      	mvns	r2, r3
 800787c:	4b18      	ldr	r3, [pc, #96]	; (80078e0 <xTaskPriorityDisinherit+0x108>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4013      	ands	r3, r2
 8007882:	4a17      	ldr	r2, [pc, #92]	; (80078e0 <xTaskPriorityDisinherit+0x108>)
 8007884:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007892:	f1c3 0207 	rsb	r2, r3, #7
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789e:	2201      	movs	r2, #1
 80078a0:	409a      	lsls	r2, r3
 80078a2:	4b0f      	ldr	r3, [pc, #60]	; (80078e0 <xTaskPriorityDisinherit+0x108>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	4a0d      	ldr	r2, [pc, #52]	; (80078e0 <xTaskPriorityDisinherit+0x108>)
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b0:	4613      	mov	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4a08      	ldr	r2, [pc, #32]	; (80078dc <xTaskPriorityDisinherit+0x104>)
 80078ba:	441a      	add	r2, r3
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	3304      	adds	r3, #4
 80078c0:	4619      	mov	r1, r3
 80078c2:	4610      	mov	r0, r2
 80078c4:	f7fe f911 	bl	8005aea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078c8:	2301      	movs	r3, #1
 80078ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078cc:	697b      	ldr	r3, [r7, #20]
	}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20000914 	.word	0x20000914
 80078dc:	20000918 	.word	0x20000918
 80078e0:	20000a1c 	.word	0x20000a1c

080078e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80078f2:	2301      	movs	r3, #1
 80078f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 8088 	beq.w	8007a0e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10a      	bne.n	800791c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	60fb      	str	r3, [r7, #12]
}
 8007918:	bf00      	nop
 800791a:	e7fe      	b.n	800791a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	429a      	cmp	r2, r3
 8007924:	d902      	bls.n	800792c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	61fb      	str	r3, [r7, #28]
 800792a:	e002      	b.n	8007932 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007930:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	69fa      	ldr	r2, [r7, #28]
 8007938:	429a      	cmp	r2, r3
 800793a:	d068      	beq.n	8007a0e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	429a      	cmp	r2, r3
 8007944:	d163      	bne.n	8007a0e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007946:	4b34      	ldr	r3, [pc, #208]	; (8007a18 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	429a      	cmp	r2, r3
 800794e:	d10a      	bne.n	8007966 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	60bb      	str	r3, [r7, #8]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	69fa      	ldr	r2, [r7, #28]
 8007970:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	2b00      	cmp	r3, #0
 8007978:	db04      	blt.n	8007984 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	f1c3 0207 	rsb	r2, r3, #7
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	6959      	ldr	r1, [r3, #20]
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	4613      	mov	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4a22      	ldr	r2, [pc, #136]	; (8007a1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007994:	4413      	add	r3, r2
 8007996:	4299      	cmp	r1, r3
 8007998:	d101      	bne.n	800799e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800799a:	2301      	movs	r3, #1
 800799c:	e000      	b.n	80079a0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800799e:	2300      	movs	r3, #0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d034      	beq.n	8007a0e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	3304      	adds	r3, #4
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fe f8f9 	bl	8005ba0 <uxListRemove>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d115      	bne.n	80079e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b8:	4918      	ldr	r1, [pc, #96]	; (8007a1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80079ba:	4613      	mov	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	440b      	add	r3, r1
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10a      	bne.n	80079e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ce:	2201      	movs	r2, #1
 80079d0:	fa02 f303 	lsl.w	r3, r2, r3
 80079d4:	43da      	mvns	r2, r3
 80079d6:	4b12      	ldr	r3, [pc, #72]	; (8007a20 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4013      	ands	r3, r2
 80079dc:	4a10      	ldr	r2, [pc, #64]	; (8007a20 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80079de:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	2201      	movs	r2, #1
 80079e6:	409a      	lsls	r2, r3
 80079e8:	4b0d      	ldr	r3, [pc, #52]	; (8007a20 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	4a0c      	ldr	r2, [pc, #48]	; (8007a20 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4a07      	ldr	r2, [pc, #28]	; (8007a1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007a00:	441a      	add	r2, r3
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4619      	mov	r1, r3
 8007a08:	4610      	mov	r0, r2
 8007a0a:	f7fe f86e 	bl	8005aea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a0e:	bf00      	nop
 8007a10:	3720      	adds	r7, #32
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000914 	.word	0x20000914
 8007a1c:	20000918 	.word	0x20000918
 8007a20:	20000a1c 	.word	0x20000a1c

08007a24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007a24:	b480      	push	{r7}
 8007a26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a28:	4b07      	ldr	r3, [pc, #28]	; (8007a48 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d004      	beq.n	8007a3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a30:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a36:	3201      	adds	r2, #1
 8007a38:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007a3a:	4b03      	ldr	r3, [pc, #12]	; (8007a48 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
	}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bc80      	pop	{r7}
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	20000914 	.word	0x20000914

08007a4c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a56:	4b29      	ldr	r3, [pc, #164]	; (8007afc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a5c:	4b28      	ldr	r3, [pc, #160]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3304      	adds	r3, #4
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe f89c 	bl	8005ba0 <uxListRemove>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10b      	bne.n	8007a86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007a6e:	4b24      	ldr	r3, [pc, #144]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	2201      	movs	r2, #1
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	43da      	mvns	r2, r3
 8007a7c:	4b21      	ldr	r3, [pc, #132]	; (8007b04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4013      	ands	r3, r2
 8007a82:	4a20      	ldr	r2, [pc, #128]	; (8007b04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8c:	d10a      	bne.n	8007aa4 <prvAddCurrentTaskToDelayedList+0x58>
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d007      	beq.n	8007aa4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a94:	4b1a      	ldr	r3, [pc, #104]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3304      	adds	r3, #4
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	481a      	ldr	r0, [pc, #104]	; (8007b08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a9e:	f7fe f824 	bl	8005aea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007aa2:	e026      	b.n	8007af2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007aac:	4b14      	ldr	r3, [pc, #80]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d209      	bcs.n	8007ad0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007abc:	4b13      	ldr	r3, [pc, #76]	; (8007b0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4610      	mov	r0, r2
 8007aca:	f7fe f831 	bl	8005b30 <vListInsert>
}
 8007ace:	e010      	b.n	8007af2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ad0:	4b0f      	ldr	r3, [pc, #60]	; (8007b10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	4b0a      	ldr	r3, [pc, #40]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4619      	mov	r1, r3
 8007adc:	4610      	mov	r0, r2
 8007ade:	f7fe f827 	bl	8005b30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ae2:	4b0c      	ldr	r3, [pc, #48]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d202      	bcs.n	8007af2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007aec:	4a09      	ldr	r2, [pc, #36]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	6013      	str	r3, [r2, #0]
}
 8007af2:	bf00      	nop
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	20000a18 	.word	0x20000a18
 8007b00:	20000914 	.word	0x20000914
 8007b04:	20000a1c 	.word	0x20000a1c
 8007b08:	20000a00 	.word	0x20000a00
 8007b0c:	200009d0 	.word	0x200009d0
 8007b10:	200009cc 	.word	0x200009cc
 8007b14:	20000a34 	.word	0x20000a34

08007b18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08a      	sub	sp, #40	; 0x28
 8007b1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b22:	f000 fb41 	bl	80081a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b26:	4b1c      	ldr	r3, [pc, #112]	; (8007b98 <xTimerCreateTimerTask+0x80>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d021      	beq.n	8007b72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b36:	1d3a      	adds	r2, r7, #4
 8007b38:	f107 0108 	add.w	r1, r7, #8
 8007b3c:	f107 030c 	add.w	r3, r7, #12
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7f8 fcc5 	bl	80004d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	9202      	str	r2, [sp, #8]
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	2302      	movs	r3, #2
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	2300      	movs	r3, #0
 8007b56:	460a      	mov	r2, r1
 8007b58:	4910      	ldr	r1, [pc, #64]	; (8007b9c <xTimerCreateTimerTask+0x84>)
 8007b5a:	4811      	ldr	r0, [pc, #68]	; (8007ba0 <xTimerCreateTimerTask+0x88>)
 8007b5c:	f7fe ff9a 	bl	8006a94 <xTaskCreateStatic>
 8007b60:	4603      	mov	r3, r0
 8007b62:	4a10      	ldr	r2, [pc, #64]	; (8007ba4 <xTimerCreateTimerTask+0x8c>)
 8007b64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b66:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <xTimerCreateTimerTask+0x8c>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	613b      	str	r3, [r7, #16]
}
 8007b8a:	bf00      	nop
 8007b8c:	e7fe      	b.n	8007b8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007b8e:	697b      	ldr	r3, [r7, #20]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20000a70 	.word	0x20000a70
 8007b9c:	08008c08 	.word	0x08008c08
 8007ba0:	08007de5 	.word	0x08007de5
 8007ba4:	20000a74 	.word	0x20000a74

08007ba8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af02      	add	r7, sp, #8
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007bb6:	202c      	movs	r0, #44	; 0x2c
 8007bb8:	f000 fd28 	bl	800860c <pvPortMalloc>
 8007bbc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00d      	beq.n	8007be0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	9301      	str	r3, [sp, #4]
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	68b9      	ldr	r1, [r7, #8]
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 f846 	bl	8007c64 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007be0:	697b      	ldr	r3, [r7, #20]
	}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b08a      	sub	sp, #40	; 0x28
 8007bee:	af02      	add	r7, sp, #8
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	607a      	str	r2, [r7, #4]
 8007bf6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007bf8:	232c      	movs	r3, #44	; 0x2c
 8007bfa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	2b2c      	cmp	r3, #44	; 0x2c
 8007c00:	d00a      	beq.n	8007c18 <xTimerCreateStatic+0x2e>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	61bb      	str	r3, [r7, #24]
}
 8007c14:	bf00      	nop
 8007c16:	e7fe      	b.n	8007c16 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <xTimerCreateStatic+0x4a>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	617b      	str	r3, [r7, #20]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c36:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00d      	beq.n	8007c5a <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	68b9      	ldr	r1, [r7, #8]
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 f809 	bl	8007c64 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8007c5a:	69fb      	ldr	r3, [r7, #28]
	}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3720      	adds	r7, #32
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	617b      	str	r3, [r7, #20]
}
 8007c8a:	bf00      	nop
 8007c8c:	e7fe      	b.n	8007c8c <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d015      	beq.n	8007cc0 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007c94:	f000 fa88 	bl	80081a8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	6a3a      	ldr	r2, [r7, #32]
 8007cb4:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	3304      	adds	r3, #4
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fd ff09 	bl	8005ad2 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007cc0:	bf00      	nop
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08a      	sub	sp, #40	; 0x28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	623b      	str	r3, [r7, #32]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007cf6:	4b1a      	ldr	r3, [pc, #104]	; (8007d60 <xTimerGenericCommand+0x98>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d02a      	beq.n	8007d54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b05      	cmp	r3, #5
 8007d0e:	dc18      	bgt.n	8007d42 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d10:	f7ff fcbe 	bl	8007690 <xTaskGetSchedulerState>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d109      	bne.n	8007d2e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d1a:	4b11      	ldr	r3, [pc, #68]	; (8007d60 <xTimerGenericCommand+0x98>)
 8007d1c:	6818      	ldr	r0, [r3, #0]
 8007d1e:	f107 0114 	add.w	r1, r7, #20
 8007d22:	2300      	movs	r3, #0
 8007d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d26:	f7fe f8a1 	bl	8005e6c <xQueueGenericSend>
 8007d2a:	6278      	str	r0, [r7, #36]	; 0x24
 8007d2c:	e012      	b.n	8007d54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d2e:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <xTimerGenericCommand+0x98>)
 8007d30:	6818      	ldr	r0, [r3, #0]
 8007d32:	f107 0114 	add.w	r1, r7, #20
 8007d36:	2300      	movs	r3, #0
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f7fe f897 	bl	8005e6c <xQueueGenericSend>
 8007d3e:	6278      	str	r0, [r7, #36]	; 0x24
 8007d40:	e008      	b.n	8007d54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d42:	4b07      	ldr	r3, [pc, #28]	; (8007d60 <xTimerGenericCommand+0x98>)
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	f107 0114 	add.w	r1, r7, #20
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	f7fe f98b 	bl	8006068 <xQueueGenericSendFromISR>
 8007d52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3728      	adds	r7, #40	; 0x28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20000a70 	.word	0x20000a70

08007d64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b088      	sub	sp, #32
 8007d68:	af02      	add	r7, sp, #8
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d6e:	4b1c      	ldr	r3, [pc, #112]	; (8007de0 <prvProcessExpiredTimer+0x7c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fd ff0f 	bl	8005ba0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d122      	bne.n	8007dd0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	699a      	ldr	r2, [r3, #24]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	18d1      	adds	r1, r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	6978      	ldr	r0, [r7, #20]
 8007d98:	f000 f8c8 	bl	8007f2c <prvInsertTimerInActiveList>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d016      	beq.n	8007dd0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007da2:	2300      	movs	r3, #0
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	2300      	movs	r3, #0
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	2100      	movs	r1, #0
 8007dac:	6978      	ldr	r0, [r7, #20]
 8007dae:	f7ff ff8b 	bl	8007cc8 <xTimerGenericCommand>
 8007db2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10a      	bne.n	8007dd0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	60fb      	str	r3, [r7, #12]
}
 8007dcc:	bf00      	nop
 8007dce:	e7fe      	b.n	8007dce <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd4:	6978      	ldr	r0, [r7, #20]
 8007dd6:	4798      	blx	r3
}
 8007dd8:	bf00      	nop
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	20000a68 	.word	0x20000a68

08007de4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dec:	f107 0308 	add.w	r3, r7, #8
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 f857 	bl	8007ea4 <prvGetNextExpireTime>
 8007df6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 f803 	bl	8007e08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e02:	f000 f8d5 	bl	8007fb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e06:	e7f1      	b.n	8007dec <prvTimerTask+0x8>

08007e08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e12:	f7ff f851 	bl	8006eb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e16:	f107 0308 	add.w	r3, r7, #8
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f866 	bl	8007eec <prvSampleTimeNow>
 8007e20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d130      	bne.n	8007e8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10a      	bne.n	8007e44 <prvProcessTimerOrBlockTask+0x3c>
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d806      	bhi.n	8007e44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e36:	f7ff f84d 	bl	8006ed4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e3a:	68f9      	ldr	r1, [r7, #12]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7ff ff91 	bl	8007d64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e42:	e024      	b.n	8007e8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d008      	beq.n	8007e5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e4a:	4b13      	ldr	r3, [pc, #76]	; (8007e98 <prvProcessTimerOrBlockTask+0x90>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	bf0c      	ite	eq
 8007e54:	2301      	moveq	r3, #1
 8007e56:	2300      	movne	r3, #0
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e5c:	4b0f      	ldr	r3, [pc, #60]	; (8007e9c <prvProcessTimerOrBlockTask+0x94>)
 8007e5e:	6818      	ldr	r0, [r3, #0]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	f7fe fddf 	bl	8006a2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e6e:	f7ff f831 	bl	8006ed4 <xTaskResumeAll>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10a      	bne.n	8007e8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e78:	4b09      	ldr	r3, [pc, #36]	; (8007ea0 <prvProcessTimerOrBlockTask+0x98>)
 8007e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	f3bf 8f6f 	isb	sy
}
 8007e88:	e001      	b.n	8007e8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e8a:	f7ff f823 	bl	8006ed4 <xTaskResumeAll>
}
 8007e8e:	bf00      	nop
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20000a6c 	.word	0x20000a6c
 8007e9c:	20000a70 	.word	0x20000a70
 8007ea0:	e000ed04 	.word	0xe000ed04

08007ea4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007eac:	4b0e      	ldr	r3, [pc, #56]	; (8007ee8 <prvGetNextExpireTime+0x44>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	bf0c      	ite	eq
 8007eb6:	2301      	moveq	r3, #1
 8007eb8:	2300      	movne	r3, #0
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d105      	bne.n	8007ed6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007eca:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <prvGetNextExpireTime+0x44>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	e001      	b.n	8007eda <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007eda:	68fb      	ldr	r3, [r7, #12]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bc80      	pop	{r7}
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20000a68 	.word	0x20000a68

08007eec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ef4:	f7ff f88a 	bl	800700c <xTaskGetTickCount>
 8007ef8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007efa:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <prvSampleTimeNow+0x3c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d205      	bcs.n	8007f10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f04:	f000 f8ee 	bl	80080e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	e002      	b.n	8007f16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f16:	4a04      	ldr	r2, [pc, #16]	; (8007f28 <prvSampleTimeNow+0x3c>)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20000a78 	.word	0x20000a78

08007f2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d812      	bhi.n	8007f78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	1ad2      	subs	r2, r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d302      	bcc.n	8007f66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f60:	2301      	movs	r3, #1
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	e01b      	b.n	8007f9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f66:	4b10      	ldr	r3, [pc, #64]	; (8007fa8 <prvInsertTimerInActiveList+0x7c>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4610      	mov	r0, r2
 8007f72:	f7fd fddd 	bl	8005b30 <vListInsert>
 8007f76:	e012      	b.n	8007f9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d206      	bcs.n	8007f8e <prvInsertTimerInActiveList+0x62>
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d302      	bcc.n	8007f8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	e007      	b.n	8007f9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f8e:	4b07      	ldr	r3, [pc, #28]	; (8007fac <prvInsertTimerInActiveList+0x80>)
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3304      	adds	r3, #4
 8007f96:	4619      	mov	r1, r3
 8007f98:	4610      	mov	r0, r2
 8007f9a:	f7fd fdc9 	bl	8005b30 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f9e:	697b      	ldr	r3, [r7, #20]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3718      	adds	r7, #24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20000a6c 	.word	0x20000a6c
 8007fac:	20000a68 	.word	0x20000a68

08007fb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b08c      	sub	sp, #48	; 0x30
 8007fb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fb6:	e081      	b.n	80080bc <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	db7e      	blt.n	80080bc <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d004      	beq.n	8007fd4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	3304      	adds	r3, #4
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fd fde6 	bl	8005ba0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fd4:	1d3b      	adds	r3, r7, #4
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff ff88 	bl	8007eec <prvSampleTimeNow>
 8007fdc:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b09      	cmp	r3, #9
 8007fe2:	d86a      	bhi.n	80080ba <prvProcessReceivedCommands+0x10a>
 8007fe4:	a201      	add	r2, pc, #4	; (adr r2, 8007fec <prvProcessReceivedCommands+0x3c>)
 8007fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fea:	bf00      	nop
 8007fec:	08008015 	.word	0x08008015
 8007ff0:	08008015 	.word	0x08008015
 8007ff4:	08008015 	.word	0x08008015
 8007ff8:	080080bd 	.word	0x080080bd
 8007ffc:	08008071 	.word	0x08008071
 8008000:	080080a9 	.word	0x080080a9
 8008004:	08008015 	.word	0x08008015
 8008008:	08008015 	.word	0x08008015
 800800c:	080080bd 	.word	0x080080bd
 8008010:	08008071 	.word	0x08008071
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	18d1      	adds	r1, r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6a3a      	ldr	r2, [r7, #32]
 8008020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008022:	f7ff ff83 	bl	8007f2c <prvInsertTimerInActiveList>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d047      	beq.n	80080bc <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008032:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d13f      	bne.n	80080bc <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	441a      	add	r2, r3
 8008044:	2300      	movs	r3, #0
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	2300      	movs	r3, #0
 800804a:	2100      	movs	r1, #0
 800804c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800804e:	f7ff fe3b 	bl	8007cc8 <xTimerGenericCommand>
 8008052:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d130      	bne.n	80080bc <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	61bb      	str	r3, [r7, #24]
}
 800806c:	bf00      	nop
 800806e:	e7fe      	b.n	800806e <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10a      	bne.n	8008094 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	617b      	str	r3, [r7, #20]
}
 8008090:	bf00      	nop
 8008092:	e7fe      	b.n	8008092 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	699a      	ldr	r2, [r3, #24]
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	18d1      	adds	r1, r2, r3
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	6a3a      	ldr	r2, [r7, #32]
 80080a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080a2:	f7ff ff43 	bl	8007f2c <prvInsertTimerInActiveList>
					break;
 80080a6:	e009      	b.n	80080bc <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d104      	bne.n	80080bc <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 80080b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080b4:	f000 fb6e 	bl	8008794 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80080b8:	e000      	b.n	80080bc <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 80080ba:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080bc:	4b08      	ldr	r3, [pc, #32]	; (80080e0 <prvProcessReceivedCommands+0x130>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f107 0108 	add.w	r1, r7, #8
 80080c4:	2200      	movs	r2, #0
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fe f8f4 	bl	80062b4 <xQueueReceive>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f47f af72 	bne.w	8007fb8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop
 80080d8:	3728      	adds	r7, #40	; 0x28
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	20000a70 	.word	0x20000a70

080080e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080ea:	e045      	b.n	8008178 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080ec:	4b2c      	ldr	r3, [pc, #176]	; (80081a0 <prvSwitchTimerLists+0xbc>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080f6:	4b2a      	ldr	r3, [pc, #168]	; (80081a0 <prvSwitchTimerLists+0xbc>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3304      	adds	r3, #4
 8008104:	4618      	mov	r0, r3
 8008106:	f7fd fd4b 	bl	8005ba0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d12e      	bne.n	8008178 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	4413      	add	r3, r2
 8008122:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	429a      	cmp	r2, r3
 800812a:	d90e      	bls.n	800814a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008138:	4b19      	ldr	r3, [pc, #100]	; (80081a0 <prvSwitchTimerLists+0xbc>)
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3304      	adds	r3, #4
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	f7fd fcf4 	bl	8005b30 <vListInsert>
 8008148:	e016      	b.n	8008178 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800814a:	2300      	movs	r3, #0
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	2300      	movs	r3, #0
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	2100      	movs	r1, #0
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f7ff fdb7 	bl	8007cc8 <xTimerGenericCommand>
 800815a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10a      	bne.n	8008178 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	603b      	str	r3, [r7, #0]
}
 8008174:	bf00      	nop
 8008176:	e7fe      	b.n	8008176 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008178:	4b09      	ldr	r3, [pc, #36]	; (80081a0 <prvSwitchTimerLists+0xbc>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1b4      	bne.n	80080ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008182:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <prvSwitchTimerLists+0xbc>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008188:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <prvSwitchTimerLists+0xc0>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a04      	ldr	r2, [pc, #16]	; (80081a0 <prvSwitchTimerLists+0xbc>)
 800818e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008190:	4a04      	ldr	r2, [pc, #16]	; (80081a4 <prvSwitchTimerLists+0xc0>)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	6013      	str	r3, [r2, #0]
}
 8008196:	bf00      	nop
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	20000a68 	.word	0x20000a68
 80081a4:	20000a6c 	.word	0x20000a6c

080081a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80081ae:	f000 f92d 	bl	800840c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80081b2:	4b15      	ldr	r3, [pc, #84]	; (8008208 <prvCheckForValidListAndQueue+0x60>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d120      	bne.n	80081fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80081ba:	4814      	ldr	r0, [pc, #80]	; (800820c <prvCheckForValidListAndQueue+0x64>)
 80081bc:	f7fd fc6a 	bl	8005a94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80081c0:	4813      	ldr	r0, [pc, #76]	; (8008210 <prvCheckForValidListAndQueue+0x68>)
 80081c2:	f7fd fc67 	bl	8005a94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80081c6:	4b13      	ldr	r3, [pc, #76]	; (8008214 <prvCheckForValidListAndQueue+0x6c>)
 80081c8:	4a10      	ldr	r2, [pc, #64]	; (800820c <prvCheckForValidListAndQueue+0x64>)
 80081ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80081cc:	4b12      	ldr	r3, [pc, #72]	; (8008218 <prvCheckForValidListAndQueue+0x70>)
 80081ce:	4a10      	ldr	r2, [pc, #64]	; (8008210 <prvCheckForValidListAndQueue+0x68>)
 80081d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80081d2:	2300      	movs	r3, #0
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	4b11      	ldr	r3, [pc, #68]	; (800821c <prvCheckForValidListAndQueue+0x74>)
 80081d8:	4a11      	ldr	r2, [pc, #68]	; (8008220 <prvCheckForValidListAndQueue+0x78>)
 80081da:	210c      	movs	r1, #12
 80081dc:	200a      	movs	r0, #10
 80081de:	f7fd fd71 	bl	8005cc4 <xQueueGenericCreateStatic>
 80081e2:	4603      	mov	r3, r0
 80081e4:	4a08      	ldr	r2, [pc, #32]	; (8008208 <prvCheckForValidListAndQueue+0x60>)
 80081e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80081e8:	4b07      	ldr	r3, [pc, #28]	; (8008208 <prvCheckForValidListAndQueue+0x60>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081f0:	4b05      	ldr	r3, [pc, #20]	; (8008208 <prvCheckForValidListAndQueue+0x60>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	490b      	ldr	r1, [pc, #44]	; (8008224 <prvCheckForValidListAndQueue+0x7c>)
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe fbf0 	bl	80069dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081fc:	f000 f936 	bl	800846c <vPortExitCritical>
}
 8008200:	bf00      	nop
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20000a70 	.word	0x20000a70
 800820c:	20000a40 	.word	0x20000a40
 8008210:	20000a54 	.word	0x20000a54
 8008214:	20000a68 	.word	0x20000a68
 8008218:	20000a6c 	.word	0x20000a6c
 800821c:	20000af4 	.word	0x20000af4
 8008220:	20000a7c 	.word	0x20000a7c
 8008224:	08008c10 	.word	0x08008c10

08008228 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	3b04      	subs	r3, #4
 8008238:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3b04      	subs	r3, #4
 8008246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f023 0201 	bic.w	r2, r3, #1
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3b04      	subs	r3, #4
 8008256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008258:	4a08      	ldr	r2, [pc, #32]	; (800827c <pxPortInitialiseStack+0x54>)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3b14      	subs	r3, #20
 8008262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3b20      	subs	r3, #32
 800826e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008270:	68fb      	ldr	r3, [r7, #12]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	bc80      	pop	{r7}
 800827a:	4770      	bx	lr
 800827c:	08008281 	.word	0x08008281

08008280 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008286:	2300      	movs	r3, #0
 8008288:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800828a:	4b12      	ldr	r3, [pc, #72]	; (80082d4 <prvTaskExitError+0x54>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008292:	d00a      	beq.n	80082aa <prvTaskExitError+0x2a>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	60fb      	str	r3, [r7, #12]
}
 80082a6:	bf00      	nop
 80082a8:	e7fe      	b.n	80082a8 <prvTaskExitError+0x28>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	60bb      	str	r3, [r7, #8]
}
 80082bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082be:	bf00      	nop
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0fc      	beq.n	80082c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082c6:	bf00      	nop
 80082c8:	bf00      	nop
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bc80      	pop	{r7}
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	2000000c 	.word	0x2000000c
	...

080082e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082e0:	4b07      	ldr	r3, [pc, #28]	; (8008300 <pxCurrentTCBConst2>)
 80082e2:	6819      	ldr	r1, [r3, #0]
 80082e4:	6808      	ldr	r0, [r1, #0]
 80082e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80082ea:	f380 8809 	msr	PSP, r0
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f04f 0000 	mov.w	r0, #0
 80082f6:	f380 8811 	msr	BASEPRI, r0
 80082fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80082fe:	4770      	bx	lr

08008300 <pxCurrentTCBConst2>:
 8008300:	20000914 	.word	0x20000914
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008304:	bf00      	nop
 8008306:	bf00      	nop

08008308 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008308:	4806      	ldr	r0, [pc, #24]	; (8008324 <prvPortStartFirstTask+0x1c>)
 800830a:	6800      	ldr	r0, [r0, #0]
 800830c:	6800      	ldr	r0, [r0, #0]
 800830e:	f380 8808 	msr	MSP, r0
 8008312:	b662      	cpsie	i
 8008314:	b661      	cpsie	f
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	df00      	svc	0
 8008320:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008322:	bf00      	nop
 8008324:	e000ed08 	.word	0xe000ed08

08008328 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800832e:	4b32      	ldr	r3, [pc, #200]	; (80083f8 <xPortStartScheduler+0xd0>)
 8008330:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	b2db      	uxtb	r3, r3
 8008338:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	22ff      	movs	r2, #255	; 0xff
 800833e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	b2db      	uxtb	r3, r3
 8008346:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008348:	78fb      	ldrb	r3, [r7, #3]
 800834a:	b2db      	uxtb	r3, r3
 800834c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008350:	b2da      	uxtb	r2, r3
 8008352:	4b2a      	ldr	r3, [pc, #168]	; (80083fc <xPortStartScheduler+0xd4>)
 8008354:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008356:	4b2a      	ldr	r3, [pc, #168]	; (8008400 <xPortStartScheduler+0xd8>)
 8008358:	2207      	movs	r2, #7
 800835a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800835c:	e009      	b.n	8008372 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800835e:	4b28      	ldr	r3, [pc, #160]	; (8008400 <xPortStartScheduler+0xd8>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3b01      	subs	r3, #1
 8008364:	4a26      	ldr	r2, [pc, #152]	; (8008400 <xPortStartScheduler+0xd8>)
 8008366:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	b2db      	uxtb	r3, r3
 800836c:	005b      	lsls	r3, r3, #1
 800836e:	b2db      	uxtb	r3, r3
 8008370:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008372:	78fb      	ldrb	r3, [r7, #3]
 8008374:	b2db      	uxtb	r3, r3
 8008376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800837a:	2b80      	cmp	r3, #128	; 0x80
 800837c:	d0ef      	beq.n	800835e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800837e:	4b20      	ldr	r3, [pc, #128]	; (8008400 <xPortStartScheduler+0xd8>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f1c3 0307 	rsb	r3, r3, #7
 8008386:	2b04      	cmp	r3, #4
 8008388:	d00a      	beq.n	80083a0 <xPortStartScheduler+0x78>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	60bb      	str	r3, [r7, #8]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083a0:	4b17      	ldr	r3, [pc, #92]	; (8008400 <xPortStartScheduler+0xd8>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	021b      	lsls	r3, r3, #8
 80083a6:	4a16      	ldr	r2, [pc, #88]	; (8008400 <xPortStartScheduler+0xd8>)
 80083a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083aa:	4b15      	ldr	r3, [pc, #84]	; (8008400 <xPortStartScheduler+0xd8>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083b2:	4a13      	ldr	r2, [pc, #76]	; (8008400 <xPortStartScheduler+0xd8>)
 80083b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80083be:	4b11      	ldr	r3, [pc, #68]	; (8008404 <xPortStartScheduler+0xdc>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a10      	ldr	r2, [pc, #64]	; (8008404 <xPortStartScheduler+0xdc>)
 80083c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80083c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083ca:	4b0e      	ldr	r3, [pc, #56]	; (8008404 <xPortStartScheduler+0xdc>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a0d      	ldr	r2, [pc, #52]	; (8008404 <xPortStartScheduler+0xdc>)
 80083d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80083d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083d6:	f000 f8b9 	bl	800854c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083da:	4b0b      	ldr	r3, [pc, #44]	; (8008408 <xPortStartScheduler+0xe0>)
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083e0:	f7ff ff92 	bl	8008308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083e4:	f7fe fede 	bl	80071a4 <vTaskSwitchContext>
	prvTaskExitError();
 80083e8:	f7ff ff4a 	bl	8008280 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	e000e400 	.word	0xe000e400
 80083fc:	20000b3c 	.word	0x20000b3c
 8008400:	20000b40 	.word	0x20000b40
 8008404:	e000ed20 	.word	0xe000ed20
 8008408:	2000000c 	.word	0x2000000c

0800840c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	607b      	str	r3, [r7, #4]
}
 8008424:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008426:	4b0f      	ldr	r3, [pc, #60]	; (8008464 <vPortEnterCritical+0x58>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3301      	adds	r3, #1
 800842c:	4a0d      	ldr	r2, [pc, #52]	; (8008464 <vPortEnterCritical+0x58>)
 800842e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008430:	4b0c      	ldr	r3, [pc, #48]	; (8008464 <vPortEnterCritical+0x58>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d10f      	bne.n	8008458 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008438:	4b0b      	ldr	r3, [pc, #44]	; (8008468 <vPortEnterCritical+0x5c>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00a      	beq.n	8008458 <vPortEnterCritical+0x4c>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	603b      	str	r3, [r7, #0]
}
 8008454:	bf00      	nop
 8008456:	e7fe      	b.n	8008456 <vPortEnterCritical+0x4a>
	}
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	bc80      	pop	{r7}
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	2000000c 	.word	0x2000000c
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008472:	4b11      	ldr	r3, [pc, #68]	; (80084b8 <vPortExitCritical+0x4c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10a      	bne.n	8008490 <vPortExitCritical+0x24>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	607b      	str	r3, [r7, #4]
}
 800848c:	bf00      	nop
 800848e:	e7fe      	b.n	800848e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008490:	4b09      	ldr	r3, [pc, #36]	; (80084b8 <vPortExitCritical+0x4c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3b01      	subs	r3, #1
 8008496:	4a08      	ldr	r2, [pc, #32]	; (80084b8 <vPortExitCritical+0x4c>)
 8008498:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800849a:	4b07      	ldr	r3, [pc, #28]	; (80084b8 <vPortExitCritical+0x4c>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d105      	bne.n	80084ae <vPortExitCritical+0x42>
 80084a2:	2300      	movs	r3, #0
 80084a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	f383 8811 	msr	BASEPRI, r3
}
 80084ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bc80      	pop	{r7}
 80084b6:	4770      	bx	lr
 80084b8:	2000000c 	.word	0x2000000c
 80084bc:	00000000 	.word	0x00000000

080084c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084c0:	f3ef 8009 	mrs	r0, PSP
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	4b0d      	ldr	r3, [pc, #52]	; (8008500 <pxCurrentTCBConst>)
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084d0:	6010      	str	r0, [r2, #0]
 80084d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80084d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80084da:	f380 8811 	msr	BASEPRI, r0
 80084de:	f7fe fe61 	bl	80071a4 <vTaskSwitchContext>
 80084e2:	f04f 0000 	mov.w	r0, #0
 80084e6:	f380 8811 	msr	BASEPRI, r0
 80084ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80084ee:	6819      	ldr	r1, [r3, #0]
 80084f0:	6808      	ldr	r0, [r1, #0]
 80084f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084f6:	f380 8809 	msr	PSP, r0
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	4770      	bx	lr

08008500 <pxCurrentTCBConst>:
 8008500:	20000914 	.word	0x20000914
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop

08008508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	607b      	str	r3, [r7, #4]
}
 8008520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008522:	f7fe fd81 	bl	8007028 <xTaskIncrementTick>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800852c:	4b06      	ldr	r3, [pc, #24]	; (8008548 <xPortSysTickHandler+0x40>)
 800852e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	2300      	movs	r3, #0
 8008536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	f383 8811 	msr	BASEPRI, r3
}
 800853e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	e000ed04 	.word	0xe000ed04

0800854c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008550:	4b0a      	ldr	r3, [pc, #40]	; (800857c <vPortSetupTimerInterrupt+0x30>)
 8008552:	2200      	movs	r2, #0
 8008554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008556:	4b0a      	ldr	r3, [pc, #40]	; (8008580 <vPortSetupTimerInterrupt+0x34>)
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800855c:	4b09      	ldr	r3, [pc, #36]	; (8008584 <vPortSetupTimerInterrupt+0x38>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a09      	ldr	r2, [pc, #36]	; (8008588 <vPortSetupTimerInterrupt+0x3c>)
 8008562:	fba2 2303 	umull	r2, r3, r2, r3
 8008566:	099b      	lsrs	r3, r3, #6
 8008568:	4a08      	ldr	r2, [pc, #32]	; (800858c <vPortSetupTimerInterrupt+0x40>)
 800856a:	3b01      	subs	r3, #1
 800856c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800856e:	4b03      	ldr	r3, [pc, #12]	; (800857c <vPortSetupTimerInterrupt+0x30>)
 8008570:	2207      	movs	r2, #7
 8008572:	601a      	str	r2, [r3, #0]
}
 8008574:	bf00      	nop
 8008576:	46bd      	mov	sp, r7
 8008578:	bc80      	pop	{r7}
 800857a:	4770      	bx	lr
 800857c:	e000e010 	.word	0xe000e010
 8008580:	e000e018 	.word	0xe000e018
 8008584:	20000000 	.word	0x20000000
 8008588:	10624dd3 	.word	0x10624dd3
 800858c:	e000e014 	.word	0xe000e014

08008590 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008596:	f3ef 8305 	mrs	r3, IPSR
 800859a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2b0f      	cmp	r3, #15
 80085a0:	d914      	bls.n	80085cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80085a2:	4a16      	ldr	r2, [pc, #88]	; (80085fc <vPortValidateInterruptPriority+0x6c>)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	4413      	add	r3, r2
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80085ac:	4b14      	ldr	r3, [pc, #80]	; (8008600 <vPortValidateInterruptPriority+0x70>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	7afa      	ldrb	r2, [r7, #11]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d20a      	bcs.n	80085cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	607b      	str	r3, [r7, #4]
}
 80085c8:	bf00      	nop
 80085ca:	e7fe      	b.n	80085ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085cc:	4b0d      	ldr	r3, [pc, #52]	; (8008604 <vPortValidateInterruptPriority+0x74>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085d4:	4b0c      	ldr	r3, [pc, #48]	; (8008608 <vPortValidateInterruptPriority+0x78>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d90a      	bls.n	80085f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80085dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	603b      	str	r3, [r7, #0]
}
 80085ee:	bf00      	nop
 80085f0:	e7fe      	b.n	80085f0 <vPortValidateInterruptPriority+0x60>
	}
 80085f2:	bf00      	nop
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bc80      	pop	{r7}
 80085fa:	4770      	bx	lr
 80085fc:	e000e3f0 	.word	0xe000e3f0
 8008600:	20000b3c 	.word	0x20000b3c
 8008604:	e000ed0c 	.word	0xe000ed0c
 8008608:	20000b40 	.word	0x20000b40

0800860c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08a      	sub	sp, #40	; 0x28
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008614:	2300      	movs	r3, #0
 8008616:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008618:	f7fe fc4e 	bl	8006eb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800861c:	4b58      	ldr	r3, [pc, #352]	; (8008780 <pvPortMalloc+0x174>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008624:	f000 f910 	bl	8008848 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008628:	4b56      	ldr	r3, [pc, #344]	; (8008784 <pvPortMalloc+0x178>)
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4013      	ands	r3, r2
 8008630:	2b00      	cmp	r3, #0
 8008632:	f040 808e 	bne.w	8008752 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d01d      	beq.n	8008678 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800863c:	2208      	movs	r2, #8
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4413      	add	r3, r2
 8008642:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f003 0307 	and.w	r3, r3, #7
 800864a:	2b00      	cmp	r3, #0
 800864c:	d014      	beq.n	8008678 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f023 0307 	bic.w	r3, r3, #7
 8008654:	3308      	adds	r3, #8
 8008656:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f003 0307 	and.w	r3, r3, #7
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00a      	beq.n	8008678 <pvPortMalloc+0x6c>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	617b      	str	r3, [r7, #20]
}
 8008674:	bf00      	nop
 8008676:	e7fe      	b.n	8008676 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d069      	beq.n	8008752 <pvPortMalloc+0x146>
 800867e:	4b42      	ldr	r3, [pc, #264]	; (8008788 <pvPortMalloc+0x17c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	429a      	cmp	r2, r3
 8008686:	d864      	bhi.n	8008752 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008688:	4b40      	ldr	r3, [pc, #256]	; (800878c <pvPortMalloc+0x180>)
 800868a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800868c:	4b3f      	ldr	r3, [pc, #252]	; (800878c <pvPortMalloc+0x180>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008692:	e004      	b.n	800869e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d903      	bls.n	80086b0 <pvPortMalloc+0xa4>
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1f1      	bne.n	8008694 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086b0:	4b33      	ldr	r3, [pc, #204]	; (8008780 <pvPortMalloc+0x174>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d04b      	beq.n	8008752 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2208      	movs	r2, #8
 80086c0:	4413      	add	r3, r2
 80086c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	1ad2      	subs	r2, r2, r3
 80086d4:	2308      	movs	r3, #8
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	429a      	cmp	r2, r3
 80086da:	d91f      	bls.n	800871c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80086dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4413      	add	r3, r2
 80086e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	f003 0307 	and.w	r3, r3, #7
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00a      	beq.n	8008704 <pvPortMalloc+0xf8>
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	613b      	str	r3, [r7, #16]
}
 8008700:	bf00      	nop
 8008702:	e7fe      	b.n	8008702 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	1ad2      	subs	r2, r2, r3
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008716:	69b8      	ldr	r0, [r7, #24]
 8008718:	f000 f8f8 	bl	800890c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800871c:	4b1a      	ldr	r3, [pc, #104]	; (8008788 <pvPortMalloc+0x17c>)
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	4a18      	ldr	r2, [pc, #96]	; (8008788 <pvPortMalloc+0x17c>)
 8008728:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800872a:	4b17      	ldr	r3, [pc, #92]	; (8008788 <pvPortMalloc+0x17c>)
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	4b18      	ldr	r3, [pc, #96]	; (8008790 <pvPortMalloc+0x184>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	429a      	cmp	r2, r3
 8008734:	d203      	bcs.n	800873e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008736:	4b14      	ldr	r3, [pc, #80]	; (8008788 <pvPortMalloc+0x17c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a15      	ldr	r2, [pc, #84]	; (8008790 <pvPortMalloc+0x184>)
 800873c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	4b10      	ldr	r3, [pc, #64]	; (8008784 <pvPortMalloc+0x178>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	431a      	orrs	r2, r3
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008752:	f7fe fbbf 	bl	8006ed4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	f003 0307 	and.w	r3, r3, #7
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00a      	beq.n	8008776 <pvPortMalloc+0x16a>
	__asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	60fb      	str	r3, [r7, #12]
}
 8008772:	bf00      	nop
 8008774:	e7fe      	b.n	8008774 <pvPortMalloc+0x168>
	return pvReturn;
 8008776:	69fb      	ldr	r3, [r7, #28]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3728      	adds	r7, #40	; 0x28
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	2000174c 	.word	0x2000174c
 8008784:	20001758 	.word	0x20001758
 8008788:	20001750 	.word	0x20001750
 800878c:	20001744 	.word	0x20001744
 8008790:	20001754 	.word	0x20001754

08008794 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d048      	beq.n	8008838 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80087a6:	2308      	movs	r3, #8
 80087a8:	425b      	negs	r3, r3
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	4413      	add	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	4b21      	ldr	r3, [pc, #132]	; (8008840 <vPortFree+0xac>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4013      	ands	r3, r2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10a      	bne.n	80087d8 <vPortFree+0x44>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	60fb      	str	r3, [r7, #12]
}
 80087d4:	bf00      	nop
 80087d6:	e7fe      	b.n	80087d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00a      	beq.n	80087f6 <vPortFree+0x62>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	60bb      	str	r3, [r7, #8]
}
 80087f2:	bf00      	nop
 80087f4:	e7fe      	b.n	80087f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	685a      	ldr	r2, [r3, #4]
 80087fa:	4b11      	ldr	r3, [pc, #68]	; (8008840 <vPortFree+0xac>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4013      	ands	r3, r2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d019      	beq.n	8008838 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d115      	bne.n	8008838 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <vPortFree+0xac>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	43db      	mvns	r3, r3
 8008816:	401a      	ands	r2, r3
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800881c:	f7fe fb4c 	bl	8006eb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	4b07      	ldr	r3, [pc, #28]	; (8008844 <vPortFree+0xb0>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4413      	add	r3, r2
 800882a:	4a06      	ldr	r2, [pc, #24]	; (8008844 <vPortFree+0xb0>)
 800882c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800882e:	6938      	ldr	r0, [r7, #16]
 8008830:	f000 f86c 	bl	800890c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008834:	f7fe fb4e 	bl	8006ed4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008838:	bf00      	nop
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20001758 	.word	0x20001758
 8008844:	20001750 	.word	0x20001750

08008848 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800884e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008852:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008854:	4b27      	ldr	r3, [pc, #156]	; (80088f4 <prvHeapInit+0xac>)
 8008856:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f003 0307 	and.w	r3, r3, #7
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00c      	beq.n	800887c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3307      	adds	r3, #7
 8008866:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f023 0307 	bic.w	r3, r3, #7
 800886e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	4a1f      	ldr	r2, [pc, #124]	; (80088f4 <prvHeapInit+0xac>)
 8008878:	4413      	add	r3, r2
 800887a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008880:	4a1d      	ldr	r2, [pc, #116]	; (80088f8 <prvHeapInit+0xb0>)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008886:	4b1c      	ldr	r3, [pc, #112]	; (80088f8 <prvHeapInit+0xb0>)
 8008888:	2200      	movs	r2, #0
 800888a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	4413      	add	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008894:	2208      	movs	r2, #8
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	1a9b      	subs	r3, r3, r2
 800889a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f023 0307 	bic.w	r3, r3, #7
 80088a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4a15      	ldr	r2, [pc, #84]	; (80088fc <prvHeapInit+0xb4>)
 80088a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088aa:	4b14      	ldr	r3, [pc, #80]	; (80088fc <prvHeapInit+0xb4>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2200      	movs	r2, #0
 80088b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088b2:	4b12      	ldr	r3, [pc, #72]	; (80088fc <prvHeapInit+0xb4>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	1ad2      	subs	r2, r2, r3
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088c8:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <prvHeapInit+0xb4>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	4a0a      	ldr	r2, [pc, #40]	; (8008900 <prvHeapInit+0xb8>)
 80088d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	4a09      	ldr	r2, [pc, #36]	; (8008904 <prvHeapInit+0xbc>)
 80088de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088e0:	4b09      	ldr	r3, [pc, #36]	; (8008908 <prvHeapInit+0xc0>)
 80088e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80088e6:	601a      	str	r2, [r3, #0]
}
 80088e8:	bf00      	nop
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bc80      	pop	{r7}
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	20000b44 	.word	0x20000b44
 80088f8:	20001744 	.word	0x20001744
 80088fc:	2000174c 	.word	0x2000174c
 8008900:	20001754 	.word	0x20001754
 8008904:	20001750 	.word	0x20001750
 8008908:	20001758 	.word	0x20001758

0800890c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008914:	4b27      	ldr	r3, [pc, #156]	; (80089b4 <prvInsertBlockIntoFreeList+0xa8>)
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	e002      	b.n	8008920 <prvInsertBlockIntoFreeList+0x14>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	429a      	cmp	r2, r3
 8008928:	d8f7      	bhi.n	800891a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	4413      	add	r3, r2
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	429a      	cmp	r2, r3
 800893a:	d108      	bne.n	800894e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	441a      	add	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	441a      	add	r2, r3
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	429a      	cmp	r2, r3
 8008960:	d118      	bne.n	8008994 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	4b14      	ldr	r3, [pc, #80]	; (80089b8 <prvInsertBlockIntoFreeList+0xac>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	429a      	cmp	r2, r3
 800896c:	d00d      	beq.n	800898a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	441a      	add	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	e008      	b.n	800899c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800898a:	4b0b      	ldr	r3, [pc, #44]	; (80089b8 <prvInsertBlockIntoFreeList+0xac>)
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	e003      	b.n	800899c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d002      	beq.n	80089aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089aa:	bf00      	nop
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bc80      	pop	{r7}
 80089b2:	4770      	bx	lr
 80089b4:	20001744 	.word	0x20001744
 80089b8:	2000174c 	.word	0x2000174c

080089bc <memset>:
 80089bc:	4603      	mov	r3, r0
 80089be:	4402      	add	r2, r0
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d100      	bne.n	80089c6 <memset+0xa>
 80089c4:	4770      	bx	lr
 80089c6:	f803 1b01 	strb.w	r1, [r3], #1
 80089ca:	e7f9      	b.n	80089c0 <memset+0x4>

080089cc <_reclaim_reent>:
 80089cc:	4b29      	ldr	r3, [pc, #164]	; (8008a74 <_reclaim_reent+0xa8>)
 80089ce:	b570      	push	{r4, r5, r6, lr}
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4604      	mov	r4, r0
 80089d4:	4283      	cmp	r3, r0
 80089d6:	d04b      	beq.n	8008a70 <_reclaim_reent+0xa4>
 80089d8:	69c3      	ldr	r3, [r0, #28]
 80089da:	b143      	cbz	r3, 80089ee <_reclaim_reent+0x22>
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d144      	bne.n	8008a6c <_reclaim_reent+0xa0>
 80089e2:	69e3      	ldr	r3, [r4, #28]
 80089e4:	6819      	ldr	r1, [r3, #0]
 80089e6:	b111      	cbz	r1, 80089ee <_reclaim_reent+0x22>
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 f879 	bl	8008ae0 <_free_r>
 80089ee:	6961      	ldr	r1, [r4, #20]
 80089f0:	b111      	cbz	r1, 80089f8 <_reclaim_reent+0x2c>
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 f874 	bl	8008ae0 <_free_r>
 80089f8:	69e1      	ldr	r1, [r4, #28]
 80089fa:	b111      	cbz	r1, 8008a02 <_reclaim_reent+0x36>
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 f86f 	bl	8008ae0 <_free_r>
 8008a02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008a04:	b111      	cbz	r1, 8008a0c <_reclaim_reent+0x40>
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 f86a 	bl	8008ae0 <_free_r>
 8008a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a0e:	b111      	cbz	r1, 8008a16 <_reclaim_reent+0x4a>
 8008a10:	4620      	mov	r0, r4
 8008a12:	f000 f865 	bl	8008ae0 <_free_r>
 8008a16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008a18:	b111      	cbz	r1, 8008a20 <_reclaim_reent+0x54>
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f000 f860 	bl	8008ae0 <_free_r>
 8008a20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008a22:	b111      	cbz	r1, 8008a2a <_reclaim_reent+0x5e>
 8008a24:	4620      	mov	r0, r4
 8008a26:	f000 f85b 	bl	8008ae0 <_free_r>
 8008a2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008a2c:	b111      	cbz	r1, 8008a34 <_reclaim_reent+0x68>
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 f856 	bl	8008ae0 <_free_r>
 8008a34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008a36:	b111      	cbz	r1, 8008a3e <_reclaim_reent+0x72>
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 f851 	bl	8008ae0 <_free_r>
 8008a3e:	6a23      	ldr	r3, [r4, #32]
 8008a40:	b1b3      	cbz	r3, 8008a70 <_reclaim_reent+0xa4>
 8008a42:	4620      	mov	r0, r4
 8008a44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a48:	4718      	bx	r3
 8008a4a:	5949      	ldr	r1, [r1, r5]
 8008a4c:	b941      	cbnz	r1, 8008a60 <_reclaim_reent+0x94>
 8008a4e:	3504      	adds	r5, #4
 8008a50:	69e3      	ldr	r3, [r4, #28]
 8008a52:	2d80      	cmp	r5, #128	; 0x80
 8008a54:	68d9      	ldr	r1, [r3, #12]
 8008a56:	d1f8      	bne.n	8008a4a <_reclaim_reent+0x7e>
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f000 f841 	bl	8008ae0 <_free_r>
 8008a5e:	e7c0      	b.n	80089e2 <_reclaim_reent+0x16>
 8008a60:	680e      	ldr	r6, [r1, #0]
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 f83c 	bl	8008ae0 <_free_r>
 8008a68:	4631      	mov	r1, r6
 8008a6a:	e7ef      	b.n	8008a4c <_reclaim_reent+0x80>
 8008a6c:	2500      	movs	r5, #0
 8008a6e:	e7ef      	b.n	8008a50 <_reclaim_reent+0x84>
 8008a70:	bd70      	pop	{r4, r5, r6, pc}
 8008a72:	bf00      	nop
 8008a74:	2000005c 	.word	0x2000005c

08008a78 <__libc_init_array>:
 8008a78:	b570      	push	{r4, r5, r6, lr}
 8008a7a:	2600      	movs	r6, #0
 8008a7c:	4d0c      	ldr	r5, [pc, #48]	; (8008ab0 <__libc_init_array+0x38>)
 8008a7e:	4c0d      	ldr	r4, [pc, #52]	; (8008ab4 <__libc_init_array+0x3c>)
 8008a80:	1b64      	subs	r4, r4, r5
 8008a82:	10a4      	asrs	r4, r4, #2
 8008a84:	42a6      	cmp	r6, r4
 8008a86:	d109      	bne.n	8008a9c <__libc_init_array+0x24>
 8008a88:	f000 f87e 	bl	8008b88 <_init>
 8008a8c:	2600      	movs	r6, #0
 8008a8e:	4d0a      	ldr	r5, [pc, #40]	; (8008ab8 <__libc_init_array+0x40>)
 8008a90:	4c0a      	ldr	r4, [pc, #40]	; (8008abc <__libc_init_array+0x44>)
 8008a92:	1b64      	subs	r4, r4, r5
 8008a94:	10a4      	asrs	r4, r4, #2
 8008a96:	42a6      	cmp	r6, r4
 8008a98:	d105      	bne.n	8008aa6 <__libc_init_array+0x2e>
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}
 8008a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aa0:	4798      	blx	r3
 8008aa2:	3601      	adds	r6, #1
 8008aa4:	e7ee      	b.n	8008a84 <__libc_init_array+0xc>
 8008aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aaa:	4798      	blx	r3
 8008aac:	3601      	adds	r6, #1
 8008aae:	e7f2      	b.n	8008a96 <__libc_init_array+0x1e>
 8008ab0:	08008c44 	.word	0x08008c44
 8008ab4:	08008c44 	.word	0x08008c44
 8008ab8:	08008c44 	.word	0x08008c44
 8008abc:	08008c48 	.word	0x08008c48

08008ac0 <__retarget_lock_acquire_recursive>:
 8008ac0:	4770      	bx	lr

08008ac2 <__retarget_lock_release_recursive>:
 8008ac2:	4770      	bx	lr

08008ac4 <memcpy>:
 8008ac4:	440a      	add	r2, r1
 8008ac6:	4291      	cmp	r1, r2
 8008ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008acc:	d100      	bne.n	8008ad0 <memcpy+0xc>
 8008ace:	4770      	bx	lr
 8008ad0:	b510      	push	{r4, lr}
 8008ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ad6:	4291      	cmp	r1, r2
 8008ad8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008adc:	d1f9      	bne.n	8008ad2 <memcpy+0xe>
 8008ade:	bd10      	pop	{r4, pc}

08008ae0 <_free_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4605      	mov	r5, r0
 8008ae4:	2900      	cmp	r1, #0
 8008ae6:	d040      	beq.n	8008b6a <_free_r+0x8a>
 8008ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aec:	1f0c      	subs	r4, r1, #4
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	bfb8      	it	lt
 8008af2:	18e4      	addlt	r4, r4, r3
 8008af4:	f000 f83c 	bl	8008b70 <__malloc_lock>
 8008af8:	4a1c      	ldr	r2, [pc, #112]	; (8008b6c <_free_r+0x8c>)
 8008afa:	6813      	ldr	r3, [r2, #0]
 8008afc:	b933      	cbnz	r3, 8008b0c <_free_r+0x2c>
 8008afe:	6063      	str	r3, [r4, #4]
 8008b00:	6014      	str	r4, [r2, #0]
 8008b02:	4628      	mov	r0, r5
 8008b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b08:	f000 b838 	b.w	8008b7c <__malloc_unlock>
 8008b0c:	42a3      	cmp	r3, r4
 8008b0e:	d908      	bls.n	8008b22 <_free_r+0x42>
 8008b10:	6820      	ldr	r0, [r4, #0]
 8008b12:	1821      	adds	r1, r4, r0
 8008b14:	428b      	cmp	r3, r1
 8008b16:	bf01      	itttt	eq
 8008b18:	6819      	ldreq	r1, [r3, #0]
 8008b1a:	685b      	ldreq	r3, [r3, #4]
 8008b1c:	1809      	addeq	r1, r1, r0
 8008b1e:	6021      	streq	r1, [r4, #0]
 8008b20:	e7ed      	b.n	8008afe <_free_r+0x1e>
 8008b22:	461a      	mov	r2, r3
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	b10b      	cbz	r3, 8008b2c <_free_r+0x4c>
 8008b28:	42a3      	cmp	r3, r4
 8008b2a:	d9fa      	bls.n	8008b22 <_free_r+0x42>
 8008b2c:	6811      	ldr	r1, [r2, #0]
 8008b2e:	1850      	adds	r0, r2, r1
 8008b30:	42a0      	cmp	r0, r4
 8008b32:	d10b      	bne.n	8008b4c <_free_r+0x6c>
 8008b34:	6820      	ldr	r0, [r4, #0]
 8008b36:	4401      	add	r1, r0
 8008b38:	1850      	adds	r0, r2, r1
 8008b3a:	4283      	cmp	r3, r0
 8008b3c:	6011      	str	r1, [r2, #0]
 8008b3e:	d1e0      	bne.n	8008b02 <_free_r+0x22>
 8008b40:	6818      	ldr	r0, [r3, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	4408      	add	r0, r1
 8008b46:	6010      	str	r0, [r2, #0]
 8008b48:	6053      	str	r3, [r2, #4]
 8008b4a:	e7da      	b.n	8008b02 <_free_r+0x22>
 8008b4c:	d902      	bls.n	8008b54 <_free_r+0x74>
 8008b4e:	230c      	movs	r3, #12
 8008b50:	602b      	str	r3, [r5, #0]
 8008b52:	e7d6      	b.n	8008b02 <_free_r+0x22>
 8008b54:	6820      	ldr	r0, [r4, #0]
 8008b56:	1821      	adds	r1, r4, r0
 8008b58:	428b      	cmp	r3, r1
 8008b5a:	bf01      	itttt	eq
 8008b5c:	6819      	ldreq	r1, [r3, #0]
 8008b5e:	685b      	ldreq	r3, [r3, #4]
 8008b60:	1809      	addeq	r1, r1, r0
 8008b62:	6021      	streq	r1, [r4, #0]
 8008b64:	6063      	str	r3, [r4, #4]
 8008b66:	6054      	str	r4, [r2, #4]
 8008b68:	e7cb      	b.n	8008b02 <_free_r+0x22>
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	20001898 	.word	0x20001898

08008b70 <__malloc_lock>:
 8008b70:	4801      	ldr	r0, [pc, #4]	; (8008b78 <__malloc_lock+0x8>)
 8008b72:	f7ff bfa5 	b.w	8008ac0 <__retarget_lock_acquire_recursive>
 8008b76:	bf00      	nop
 8008b78:	20001894 	.word	0x20001894

08008b7c <__malloc_unlock>:
 8008b7c:	4801      	ldr	r0, [pc, #4]	; (8008b84 <__malloc_unlock+0x8>)
 8008b7e:	f7ff bfa0 	b.w	8008ac2 <__retarget_lock_release_recursive>
 8008b82:	bf00      	nop
 8008b84:	20001894 	.word	0x20001894

08008b88 <_init>:
 8008b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8a:	bf00      	nop
 8008b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b8e:	bc08      	pop	{r3}
 8008b90:	469e      	mov	lr, r3
 8008b92:	4770      	bx	lr

08008b94 <_fini>:
 8008b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b96:	bf00      	nop
 8008b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b9a:	bc08      	pop	{r3}
 8008b9c:	469e      	mov	lr, r3
 8008b9e:	4770      	bx	lr
